

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Jun 14 19:30:28 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	smallconst
    44  000800                     __psmallconst:
    45                           	opt stack 0
    46  000800  00                 	db	0
    47  000801                     _dpowers:
    48                           	opt stack 0
    49  000801  0001               	dw	1
    50  000803  0000               	dw	0
    51  000805  000A               	dw	10
    52  000807  0000               	dw	0
    53  000809  0064               	dw	100
    54  00080B  0000               	dw	0
    55  00080D  03E8               	dw	1000
    56  00080F  0000               	dw	0
    57  000811  2710               	dw	10000
    58  000813  0000               	dw	0
    59  000815  86A0               	dw	34464
    60  000817  0001               	dw	1
    61  000819  4240               	dw	16960
    62  00081B  000F               	dw	15
    63  00081D  9680               	dw	38528
    64  00081F  0098               	dw	152
    65  000821  E100               	dw	57600
    66  000823  05F5               	dw	1525
    67  000825  CA00               	dw	51712
    68  000827  3B9A               	dw	15258
    69  000829                     __end_of_dpowers:
    70                           	opt stack 0
    71  000829                     __npowers_:
    72                           	opt stack 0
    73  000829  00                 	db	0
    74  00082A  80                 	db	128
    75  00082B  3F                 	db	63
    76  00082C  CD                 	db	205
    77  00082D  CC                 	db	204
    78  00082E  3D                 	db	61
    79  00082F  D7                 	db	215
    80  000830  23                 	db	35
    81  000831  3C                 	db	60
    82  000832  12                 	db	18
    83  000833  83                 	db	131
    84  000834  3A                 	db	58
    85  000835  B7                 	db	183
    86  000836  D1                 	db	209
    87  000837  38                 	db	56
    88  000838  C6                 	db	198
    89  000839  27                 	db	39
    90  00083A  37                 	db	55
    91  00083B  38                 	db	56
    92  00083C  86                 	db	134
    93  00083D  35                 	db	53
    94  00083E  C0                 	db	192
    95  00083F  D6                 	db	214
    96  000840  33                 	db	51
    97  000841  CC                 	db	204
    98  000842  2B                 	db	43
    99  000843  32                 	db	50
   100  000844  70                 	db	112
   101  000845  89                 	db	137
   102  000846  30                 	db	48
   103  000847  E7                 	db	231
   104  000848  DB                 	db	219
   105  000849  2E                 	db	46
   106  00084A  E5                 	db	229
   107  00084B  3C                 	db	60
   108  00084C  1E                 	db	30
   109  00084D  42                 	db	66
   110  00084E  A2                 	db	162
   111  00084F  0D                 	db	13
   112  000850                     __end_of__npowers_:
   113                           	opt stack 0
   114  000850                     __powers_:
   115                           	opt stack 0
   116  000850  00                 	db	0
   117  000851  80                 	db	128
   118  000852  3F                 	db	63
   119  000853  00                 	db	0
   120  000854  20                 	db	32
   121  000855  41                 	db	65
   122  000856  00                 	db	0
   123  000857  C8                 	db	200
   124  000858  42                 	db	66
   125  000859  00                 	db	0
   126  00085A  7A                 	db	122
   127  00085B  44                 	db	68
   128  00085C  40                 	db	64
   129  00085D  1C                 	db	28
   130  00085E  46                 	db	70
   131  00085F  50                 	db	80
   132  000860  C3                 	db	195
   133  000861  47                 	db	71
   134  000862  24                 	db	36
   135  000863  74                 	db	116
   136  000864  49                 	db	73
   137  000865  97                 	db	151
   138  000866  18                 	db	24
   139  000867  4B                 	db	75
   140  000868  BC                 	db	188
   141  000869  BE                 	db	190
   142  00086A  4C                 	db	76
   143  00086B  6B                 	db	107
   144  00086C  6E                 	db	110
   145  00086D  4E                 	db	78
   146  00086E  03                 	db	3
   147  00086F  15                 	db	21
   148  000870  50                 	db	80
   149  000871  79                 	db	121
   150  000872  AD                 	db	173
   151  000873  60                 	db	96
   152  000874  F3                 	db	243
   153  000875  49                 	db	73
   154  000876  71                 	db	113
   155  000877                     __end_of__powers_:
   156                           	opt stack 0
   157  0000                     _ADCON0	set	4034
   158  0000                     _ADCON0bits	set	4034
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON2	set	4032
   161  0000                     _ADRESH	set	4036
   162  0000                     _ADRESL	set	4035
   163  0000                     _LATD	set	3980
   164  0000                     _OSCCON	set	4051
   165  0000                     _TRISA	set	3986
   166  0000                     _TRISB	set	3987
   167  0000                     _TRISC	set	3988
   168  0000                     _TRISD	set	3989
   169  0000                     _ADON	set	32272
   170  0000                     _GO	set	32273
   171  0000                     _LATC0	set	31832
   172  0000                     _LATC1	set	31833
   173  000877                     STR_1:
   174  000877  56                 	db	86	;'V'
   175  000878  6F                 	db	111	;'o'
   176  000879  6C                 	db	108	;'l'
   177  00087A  74                 	db	116	;'t'
   178  00087B  61                 	db	97	;'a'
   179  00087C  67                 	db	103	;'g'
   180  00087D  65                 	db	101	;'e'
   181  00087E  20                 	db	32
   182  00087F  69                 	db	105	;'i'
   183  000880  73                 	db	115	;'s'
   184  000881  2E                 	db	46
   185  000882  2E                 	db	46
   186  000883  2E                 	db	46
   187  000884  00                 	db	0
   188  000885                     STR_2:
   189  000885  25                 	db	37
   190  000886  2E                 	db	46
   191  000887  32                 	db	50	;'2'
   192  000888  66                 	db	102	;'f'
   193  000889  00                 	db	0
   194  00088A                     STR_3:
   195  00088A  20                 	db	32
   196  00088B  56                 	db	86	;'V'
   197  00088C  00                 	db	0
   198                           
   199                           ; #config settings
   200  00088D  00                 	db	0	; dummy byte at the end
   201  0000                     
   202                           	psect	cinit
   203  002436                     __pcinit:
   204                           	opt stack 0
   205  002436                     start_initialization:
   206                           	opt stack 0
   207  002436                     __initialization:
   208                           	opt stack 0
   209                           
   210                           ; Clear objects allocated to COMRAM (3 bytes)
   211  002436  6A5B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   212  002438  6A5A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   213  00243A  6A59               	clrf	__pbssCOMRAM& (0+255),c
   214  00243C                     end_of_initialization:
   215                           	opt stack 0
   216  00243C                     __end_of__initialization:
   217                           	opt stack 0
   218  00243C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   219  00243E  6EF8               	movwf	tblptru,c
   220  002440  0100               	movlb	0
   221  002442  EFB2  F00E         	goto	_main	;jump to C main() function
   222                           tblptru	equ	0xFF8
   223                           
   224                           	psect	bssCOMRAM
   225  000059                     __pbssCOMRAM:
   226                           	opt stack 0
   227  000059                     _voltage:
   228                           	opt stack 0
   229  000059                     	ds	3
   230                           tblptru	equ	0xFF8
   231                           
   232                           	psect	cstackBANK0
   233  000060                     __pcstackBANK0:
   234                           	opt stack 0
   235  000060                     _sprintf$755:
   236                           	opt stack 0
   237                           
   238                           ; 3 bytes @ 0x0
   239  000060                     	ds	3
   240  000063                     sprintf@ap:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x3
   244  000063                     	ds	2
   245  000065                     sprintf@flag:
   246                           	opt stack 0
   247                           
   248                           ; 2 bytes @ 0x5
   249  000065                     	ds	2
   250  000067                     sprintf@val:
   251                           	opt stack 0
   252                           
   253                           ; 4 bytes @ 0x7
   254  000067                     	ds	4
   255  00006B                     sprintf@exp:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0xB
   259  00006B                     	ds	2
   260  00006D                     sprintf@tmpval:
   261                           	opt stack 0
   262                           
   263                           ; 4 bytes @ 0xD
   264  00006D                     	ds	4
   265  000071                     sprintf@prec:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x11
   269  000071                     	ds	2
   270  000073                     sprintf@fval:
   271                           	opt stack 0
   272                           
   273                           ; 3 bytes @ 0x13
   274  000073                     	ds	3
   275  000076                     sprintf@c:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x16
   279  000076                     	ds	1
   280                           tblptru	equ	0xFF8
   281                           
   282                           	psect	cstackCOMRAM
   283  000001                     __pcstackCOMRAM:
   284                           	opt stack 0
   285  000001                     ??_isdigit:
   286  000001                     ?_ADC_Read:
   287                           	opt stack 0
   288  000001                     ?___awmod:
   289                           	opt stack 0
   290  000001                     ?___ftpack:
   291                           	opt stack 0
   292  000001                     ?___ftneg:
   293                           	opt stack 0
   294  000001                     ?__tdiv_to_l_:
   295                           	opt stack 0
   296  000001                     ?__div_to_l_:
   297                           	opt stack 0
   298  000001                     ?___lldiv:
   299                           	opt stack 0
   300  000001                     ?___llmod:
   301                           	opt stack 0
   302  000001                     ADC_Read@channel:
   303                           	opt stack 0
   304  000001                     MSdelay@val:
   305                           	opt stack 0
   306  000001                     ___awmod@dividend:
   307                           	opt stack 0
   308  000001                     strcat@to:
   309                           	opt stack 0
   310  000001                     __div_to_l_@f1:
   311                           	opt stack 0
   312  000001                     ___ftpack@arg:
   313                           	opt stack 0
   314  000001                     __tdiv_to_l_@f1:
   315                           	opt stack 0
   316  000001                     ___ftge@ff1:
   317                           	opt stack 0
   318  000001                     ___ftneg@f1:
   319                           	opt stack 0
   320  000001                     ___lldiv@dividend:
   321                           	opt stack 0
   322  000001                     ___llmod@dividend:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0x0
   326  000001                     	ds	1
   327  000002                     _isdigit$520:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x1
   331  000002                     	ds	1
   332  000003                     ??_ADC_Read:
   333  000003                     isdigit@c:
   334                           	opt stack 0
   335  000003                     MSdelay@i:
   336                           	opt stack 0
   337  000003                     ___awmod@divisor:
   338                           	opt stack 0
   339  000003                     strcat@from:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x2
   343  000003                     	ds	1
   344  000004                     ___ftpack@exp:
   345                           	opt stack 0
   346  000004                     __div_to_l_@f2:
   347                           	opt stack 0
   348  000004                     __tdiv_to_l_@f2:
   349                           	opt stack 0
   350  000004                     ___ftge@ff2:
   351                           	opt stack 0
   352                           
   353                           ; 3 bytes @ 0x3
   354  000004                     	ds	1
   355  000005                     ___awmod@counter:
   356                           	opt stack 0
   357  000005                     ___ftpack@sign:
   358                           	opt stack 0
   359  000005                     MSdelay@j:
   360                           	opt stack 0
   361  000005                     strcat@cp:
   362                           	opt stack 0
   363  000005                     ___lldiv@divisor:
   364                           	opt stack 0
   365  000005                     ___llmod@divisor:
   366                           	opt stack 0
   367                           
   368                           ; 4 bytes @ 0x4
   369  000005                     	ds	1
   370  000006                     ??___ftpack:
   371  000006                     ___awmod@sign:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0x5
   375  000006                     	ds	1
   376  000007                     ??__tdiv_to_l_:
   377  000007                     ??___ftge:
   378  000007                     ?___awdiv:
   379                           	opt stack 0
   380  000007                     LCD_Command@cmd:
   381                           	opt stack 0
   382  000007                     LCD_Char@dat:
   383                           	opt stack 0
   384  000007                     ADC_Read@digital:
   385                           	opt stack 0
   386  000007                     ___awdiv@dividend:
   387                           	opt stack 0
   388  000007                     __div_to_l_@quot:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0x6
   392  000007                     	ds	1
   393  000008                     LCD_String@msg:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x7
   397  000008                     	ds	1
   398  000009                     ?___awtoft:
   399                           	opt stack 0
   400  000009                     ?___lltoft:
   401                           	opt stack 0
   402  000009                     ___llmod@counter:
   403                           	opt stack 0
   404  000009                     ___awdiv@divisor:
   405                           	opt stack 0
   406  000009                     ___awtoft@c:
   407                           	opt stack 0
   408  000009                     ___lldiv@quotient:
   409                           	opt stack 0
   410  000009                     ___lltoft@c:
   411                           	opt stack 0
   412                           
   413                           ; 4 bytes @ 0x8
   414  000009                     	ds	1
   415  00000A                     LCD_String_xy@pos:
   416                           	opt stack 0
   417  00000A                     __tdiv_to_l_@quot:
   418                           	opt stack 0
   419                           
   420                           ; 4 bytes @ 0x9
   421  00000A                     	ds	1
   422  00000B                     ___awdiv@counter:
   423                           	opt stack 0
   424  00000B                     __div_to_l_@cntr:
   425                           	opt stack 0
   426  00000B                     LCD_String_xy@msg:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0xA
   430  00000B                     	ds	1
   431  00000C                     ___awdiv@sign:
   432                           	opt stack 0
   433  00000C                     ___awtoft@sign:
   434                           	opt stack 0
   435  00000C                     __div_to_l_@exp1:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0xB
   439  00000C                     	ds	1
   440  00000D                     ??___lltoft:
   441  00000D                     LCD_String_xy@row:
   442                           	opt stack 0
   443  00000D                     ___lldiv@counter:
   444                           	opt stack 0
   445  00000D                     ___awdiv@quotient:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0xC
   449  00000D                     	ds	1
   450  00000E                     LCD_String_xy@location:
   451                           	opt stack 0
   452  00000E                     __tdiv_to_l_@cntr:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0xD
   456  00000E                     	ds	1
   457  00000F                     ?___wmul:
   458                           	opt stack 0
   459  00000F                     __tdiv_to_l_@exp1:
   460                           	opt stack 0
   461  00000F                     ___wmul@multiplier:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0xE
   465  00000F                     	ds	2
   466  000011                     ___lltoft@exp:
   467                           	opt stack 0
   468  000011                     ___wmul@multiplicand:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x10
   472  000011                     	ds	2
   473  000013                     ___wmul@product:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x12
   477  000013                     	ds	2
   478  000015                     ?___ftmul:
   479                           	opt stack 0
   480  000015                     ___ftmul@f1:
   481                           	opt stack 0
   482                           
   483                           ; 3 bytes @ 0x14
   484  000015                     	ds	3
   485  000018                     ___ftmul@f2:
   486                           	opt stack 0
   487                           
   488                           ; 3 bytes @ 0x17
   489  000018                     	ds	3
   490  00001B                     ??___ftmul:
   491                           
   492                           ; 0 bytes @ 0x1A
   493  00001B                     	ds	3
   494  00001E                     ___ftmul@exp:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x1D
   498  00001E                     	ds	1
   499  00001F                     ___ftmul@f3_as_product:
   500                           	opt stack 0
   501                           
   502                           ; 3 bytes @ 0x1E
   503  00001F                     	ds	3
   504  000022                     ___ftmul@cntr:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x21
   508  000022                     	ds	1
   509  000023                     ___ftmul@sign:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x22
   513  000023                     	ds	1
   514  000024                     ?_fround:
   515                           	opt stack 0
   516  000024                     ?_scale:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x23
   520  000024                     	ds	3
   521  000027                     _fround$753:
   522                           	opt stack 0
   523  000027                     _scale$754:
   524                           	opt stack 0
   525                           
   526                           ; 3 bytes @ 0x26
   527  000027                     	ds	3
   528  00002A                     scale@scl:
   529                           	opt stack 0
   530  00002A                     _fround$752:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x29
   534  00002A                     	ds	1
   535  00002B                     ?___fttol:
   536                           	opt stack 0
   537  00002B                     ___fttol@f1:
   538                           	opt stack 0
   539                           
   540                           ; 3 bytes @ 0x2A
   541  00002B                     	ds	2
   542  00002D                     fround@prec:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x2C
   546  00002D                     	ds	1
   547  00002E                     ?___ftadd:
   548                           	opt stack 0
   549  00002E                     ___ftadd@f1:
   550                           	opt stack 0
   551                           
   552                           ; 3 bytes @ 0x2D
   553  00002E                     	ds	1
   554  00002F                     ??___fttol:
   555                           
   556                           ; 0 bytes @ 0x2E
   557  00002F                     	ds	2
   558  000031                     ___ftadd@f2:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x30
   562  000031                     	ds	3
   563  000034                     ??___ftadd:
   564  000034                     ___fttol@sign1:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x33
   568  000034                     	ds	1
   569  000035                     ___fttol@lval:
   570                           	opt stack 0
   571                           
   572                           ; 4 bytes @ 0x34
   573  000035                     	ds	2
   574  000037                     ___ftadd@sign:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x36
   578  000037                     	ds	1
   579  000038                     ___ftadd@exp2:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x37
   583  000038                     	ds	1
   584  000039                     ___ftadd@exp1:
   585                           	opt stack 0
   586  000039                     ___fttol@exp1:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x38
   590  000039                     	ds	1
   591  00003A                     ?___ftsub:
   592                           	opt stack 0
   593  00003A                     ___ftsub@f1:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0x39
   597  00003A                     	ds	3
   598  00003D                     ___ftsub@f2:
   599                           	opt stack 0
   600                           
   601                           ; 3 bytes @ 0x3C
   602  00003D                     	ds	3
   603  000040                     ?_sprintf:
   604                           	opt stack 0
   605  000040                     sprintf@sp:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x3F
   609  000040                     	ds	2
   610  000042                     sprintf@f:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x41
   614  000042                     	ds	5
   615  000047                     ??_sprintf:
   616                           
   617                           ; 0 bytes @ 0x46
   618  000047                     	ds	6
   619  00004D                     main@data:
   620                           	opt stack 0
   621                           
   622                           ; 10 bytes @ 0x4C
   623  00004D                     	ds	10
   624  000057                     main@digital:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x56
   628  000057                     	ds	2
   629                           tblptru	equ	0xFF8
   630                           
   631 ;;
   632 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   633 ;;
   634 ;; *************** function _main *****************
   635 ;; Defined at:
   636 ;;		line 16 in file "newmain.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;		None
   639 ;; Auto vars:     Size  Location     Type
   640 ;;  data           10   76[COMRAM] unsigned char [10]
   641 ;;  digital         2   86[COMRAM] int 
   642 ;; Return value:  Size  Location     Type
   643 ;;		None               void
   644 ;; Registers used:
   645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   651 ;;      Params:         0       0       0       0       0       0       0       0       0
   652 ;;      Locals:        12       0       0       0       0       0       0       0       0
   653 ;;      Temps:          0       0       0       0       0       0       0       0       0
   654 ;;      Totals:        12       0       0       0       0       0       0       0       0
   655 ;;Total ram usage:       12 bytes
   656 ;; Hardware stack levels required when called:    4
   657 ;; This function calls:
   658 ;;		_ADC_Read
   659 ;;		_ADC_init
   660 ;;		_LCD_String_xy
   661 ;;		_LCD_init
   662 ;;		___awtoft
   663 ;;		___ftmul
   664 ;;		_sprintf
   665 ;;		_strcat
   666 ;; This function is called by:
   667 ;;		Startup code after reset
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671                           	psect	text0
   672  001D64                     __ptext0:
   673                           	opt stack 0
   674  001D64                     _main:
   675                           	opt stack 27
   676                           
   677                           ;newmain.c: 18: char data[10];
   678                           ;newmain.c: 19: int digital;
   679                           ;newmain.c: 20: OSCCON=0x72;
   680                           
   681                           ;incstack = 0
   682  001D64  0E72               	movlw	114
   683  001D66  6ED3               	movwf	4051,c	;volatile
   684                           
   685                           ;newmain.c: 21: LCD_init();
   686  001D68  EC9B  F011         	call	_LCD_init	;wreg free
   687                           
   688                           ;newmain.c: 22: ADC_init();
   689  001D6C  EC11  F012         	call	_ADC_init	;wreg free
   690                           
   691                           ;newmain.c: 24: LCD_String_xy(1,1,"Voltage is...");
   692  001D70  0E01               	movlw	1
   693  001D72  6E0A               	movwf	LCD_String_xy@pos,c
   694  001D74  0E77               	movlw	low STR_1
   695  001D76  6E0B               	movwf	LCD_String_xy@msg,c
   696  001D78  0E08               	movlw	high STR_1
   697  001D7A  6E0C               	movwf	LCD_String_xy@msg+1,c
   698  001D7C  0E01               	movlw	1
   699  001D7E  EC7E  F011         	call	_LCD_String_xy
   700  001D82  D000               	goto	l2602
   701  001D84                     l2602:
   702                           
   703                           ;newmain.c: 27: {
   704                           ;newmain.c: 28: digital=ADC_Read(0);
   705  001D84  0E00               	movlw	0
   706  001D86  6E02               	movwf	ADC_Read@channel+1,c
   707  001D88  0E00               	movlw	0
   708  001D8A  6E01               	movwf	ADC_Read@channel,c
   709  001D8C  EC29  F010         	call	_ADC_Read	;wreg free
   710  001D90  C001  F057         	movff	?_ADC_Read,main@digital
   711  001D94  C002  F058         	movff	?_ADC_Read+1,main@digital+1
   712                           
   713                           ;newmain.c: 29: voltage= digital*((float)5.00/(float)1023);
   714  001D98  C057  F009         	movff	main@digital,___awtoft@c
   715  001D9C  C058  F00A         	movff	main@digital+1,___awtoft@c+1
   716  001DA0  EC60  F011         	call	___awtoft	;wreg free
   717  001DA4  C009  F015         	movff	?___awtoft,___ftmul@f1
   718  001DA8  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
   719  001DAC  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
   720  001DB0  0E28               	movlw	40
   721  001DB2  6E18               	movwf	___ftmul@f2,c
   722  001DB4  0EA0               	movlw	160
   723  001DB6  6E19               	movwf	___ftmul@f2+1,c
   724  001DB8  0E3B               	movlw	59
   725  001DBA  6E1A               	movwf	___ftmul@f2+2,c
   726  001DBC  EC60  F00D         	call	___ftmul	;wreg free
   727  001DC0  C015  F059         	movff	?___ftmul,_voltage
   728  001DC4  C016  F05A         	movff	?___ftmul+1,_voltage+1
   729  001DC8  C017  F05B         	movff	?___ftmul+2,_voltage+2
   730                           
   731                           ;newmain.c: 30: sprintf(data,"%.2f",voltage);
   732  001DCC  0E4D               	movlw	low main@data
   733  001DCE  6E40               	movwf	sprintf@sp,c
   734  001DD0  0E00               	movlw	high main@data
   735  001DD2  6E41               	movwf	sprintf@sp+1,c
   736  001DD4  0E85               	movlw	low STR_2
   737  001DD6  6E42               	movwf	sprintf@f,c
   738  001DD8  0E08               	movlw	high STR_2
   739  001DDA  6E43               	movwf	sprintf@f+1,c
   740  001DDC  C059  F044         	movff	_voltage,?_sprintf+4
   741  001DE0  C05A  F045         	movff	_voltage+1,?_sprintf+5
   742  001DE4  C05B  F046         	movff	_voltage+2,?_sprintf+6
   743  001DE8  EC47  F004         	call	_sprintf	;wreg free
   744                           
   745                           ;newmain.c: 31: strcat(data," V");
   746  001DEC  0E4D               	movlw	low main@data
   747  001DEE  6E01               	movwf	strcat@to,c
   748  001DF0  0E00               	movlw	high main@data
   749  001DF2  6E02               	movwf	strcat@to+1,c
   750  001DF4  0E8A               	movlw	low STR_3
   751  001DF6  6E03               	movwf	strcat@from,c
   752  001DF8  0E08               	movlw	high STR_3
   753  001DFA  6E04               	movwf	strcat@from+1,c
   754  001DFC  ECFA  F010         	call	_strcat	;wreg free
   755                           
   756                           ;newmain.c: 32: LCD_String_xy(2,4,data);
   757  001E00  0E04               	movlw	4
   758  001E02  6E0A               	movwf	LCD_String_xy@pos,c
   759  001E04  0E4D               	movlw	low main@data
   760  001E06  6E0B               	movwf	LCD_String_xy@msg,c
   761  001E08  0E00               	movlw	high main@data
   762  001E0A  6E0C               	movwf	LCD_String_xy@msg+1,c
   763  001E0C  0E02               	movlw	2
   764  001E0E  EC7E  F011         	call	_LCD_String_xy
   765  001E12  D7B8               	goto	l2602
   766  001E14  EF01  F000         	goto	start
   767  001E18                     __end_of_main:
   768                           	opt stack 0
   769                           tblptru	equ	0xFF8
   770                           
   771 ;; *************** function _strcat *****************
   772 ;; Defined at:
   773 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcat.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;  to              2    0[COMRAM] PTR unsigned char 
   776 ;;		 -> main@data(10), 
   777 ;;  from            2    2[COMRAM] PTR const unsigned char 
   778 ;;		 -> STR_3(3), 
   779 ;; Auto vars:     Size  Location     Type
   780 ;;  cp              2    4[COMRAM] PTR unsigned char 
   781 ;;		 -> main@data(10), 
   782 ;; Return value:  Size  Location     Type
   783 ;;                  2    0[COMRAM] PTR unsigned char 
   784 ;; Registers used:
   785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   791 ;;      Params:         4       0       0       0       0       0       0       0       0
   792 ;;      Locals:         2       0       0       0       0       0       0       0       0
   793 ;;      Temps:          0       0       0       0       0       0       0       0       0
   794 ;;      Totals:         6       0       0       0       0       0       0       0       0
   795 ;;Total ram usage:        6 bytes
   796 ;; Hardware stack levels used:    1
   797 ;; This function calls:
   798 ;;		Nothing
   799 ;; This function is called by:
   800 ;;		_main
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           	psect	text1
   805  0021F4                     __ptext1:
   806                           	opt stack 0
   807  0021F4                     _strcat:
   808                           	opt stack 30
   809                           
   810                           ;incstack = 0
   811  0021F4  C001  F005         	movff	strcat@to,strcat@cp
   812  0021F8  C002  F006         	movff	strcat@to+1,strcat@cp+1
   813  0021FC  D003               	goto	l2576
   814  0021FE                     l2574:
   815  0021FE  4A05               	infsnz	strcat@cp,f,c
   816  002200  2A06               	incf	strcat@cp+1,f,c
   817  002202  D000               	goto	l2576
   818  002204                     l2576:
   819  002204  C005  FFD9         	movff	strcat@cp,fsr2l
   820  002208  C006  FFDA         	movff	strcat@cp+1,fsr2h
   821  00220C  50DF               	movf	indf2,w,c
   822  00220E  B4D8               	btfsc	status,2,c
   823  002210  D007               	goto	l2580
   824  002212  D7F5               	goto	l2574
   825  002214  D005               	goto	l2580
   826  002216                     l2578:
   827  002216  4A05               	infsnz	strcat@cp,f,c
   828  002218  2A06               	incf	strcat@cp+1,f,c
   829  00221A  4A03               	infsnz	strcat@from,f,c
   830  00221C  2A04               	incf	strcat@from+1,f,c
   831  00221E  D000               	goto	l2580
   832  002220                     l2580:
   833  002220  C003  FFF6         	movff	strcat@from,tblptrl
   834  002224  C004  FFF7         	movff	strcat@from+1,tblptrh
   835  002228                     	if	0	;tblptru may be non-zero
   836  002228                     	endif
   837  002228                     	if	0	;tblptru may be non-zero
   838  002228                     	endif
   839  002228  C005  FFD9         	movff	strcat@cp,fsr2l
   840  00222C  C006  FFDA         	movff	strcat@cp+1,fsr2h
   841  002230  0008               	tblrd		*
   842  002232  CFF5 FFDF          	movff	tablat,indf2
   843  002236  50DF               	movf	indf2,w,c
   844  002238  A4D8               	btfss	status,2,c
   845  00223A  D7ED               	goto	l2578
   846                           
   847                           ;	Return value of _strcat is never used
   848  00223C  0012               	return		;funcret
   849  00223E                     __end_of_strcat:
   850                           	opt stack 0
   851                           tblptru	equ	0xFF8
   852                           tblptrh	equ	0xFF7
   853                           tblptrl	equ	0xFF6
   854                           tablat	equ	0xFF5
   855                           indf2	equ	0xFDF
   856                           fsr2h	equ	0xFDA
   857                           fsr2l	equ	0xFD9
   858                           status	equ	0xFD8
   859                           
   860 ;; *************** function _sprintf *****************
   861 ;; Defined at:
   862 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;  sp              2   63[COMRAM] PTR unsigned char 
   865 ;;		 -> main@data(10), 
   866 ;;  f               2   65[COMRAM] PTR const unsigned char 
   867 ;;		 -> STR_2(5), 
   868 ;; Auto vars:     Size  Location     Type
   869 ;;  tmpval          4   13[BANK0 ] struct .
   870 ;;  val             4    7[BANK0 ] unsigned long 
   871 ;;  fval            3   19[BANK0 ] unsigned long 
   872 ;;  cp              3    0        PTR const unsigned char 
   873 ;;  prec            2   17[BANK0 ] int 
   874 ;;  exp             2   11[BANK0 ] int 
   875 ;;  flag            2    5[BANK0 ] unsigned short 
   876 ;;  ap              2    3[BANK0 ] PTR void [1]
   877 ;;		 -> ?_sprintf(2), 
   878 ;;  len             2    0        unsigned int 
   879 ;;  width           2    0        int 
   880 ;;  c               1   22[BANK0 ] char 
   881 ;;  d               1    0        unsigned char 
   882 ;; Return value:  Size  Location     Type
   883 ;;                  2   63[COMRAM] int 
   884 ;; Registers used:
   885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   891 ;;      Params:         7       0       0       0       0       0       0       0       0
   892 ;;      Locals:         0      23       0       0       0       0       0       0       0
   893 ;;      Temps:          6       0       0       0       0       0       0       0       0
   894 ;;      Totals:        13      23       0       0       0       0       0       0       0
   895 ;;Total ram usage:       36 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    3
   898 ;; This function calls:
   899 ;;		___awdiv
   900 ;;		___ftadd
   901 ;;		___ftge
   902 ;;		___ftmul
   903 ;;		___ftneg
   904 ;;		___ftsub
   905 ;;		___fttol
   906 ;;		___lldiv
   907 ;;		___llmod
   908 ;;		___lltoft
   909 ;;		___wmul
   910 ;;		__div_to_l_
   911 ;;		__tdiv_to_l_
   912 ;;		_fround
   913 ;;		_isdigit
   914 ;;		_scale
   915 ;; This function is called by:
   916 ;;		_main
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text2
   921  00088E                     __ptext2:
   922                           	opt stack 0
   923  00088E                     _sprintf:
   924                           	opt stack 27
   925                           
   926                           ;doprnt.c: 494: va_list ap;
   927                           ;doprnt.c: 499: signed char c;
   928                           ;doprnt.c: 501: int width;
   929                           ;doprnt.c: 504: int prec;
   930                           ;doprnt.c: 508: unsigned short flag;
   931                           ;doprnt.c: 515: char d;
   932                           ;doprnt.c: 516: double fval;
   933                           ;doprnt.c: 517: int exp;
   934                           ;doprnt.c: 523: union {
   935                           ;doprnt.c: 524: unsigned long vd;
   936                           ;doprnt.c: 525: double integ;
   937                           ;doprnt.c: 526: } tmpval;
   938                           ;doprnt.c: 528: unsigned long val;
   939                           ;doprnt.c: 529: unsigned len;
   940                           ;doprnt.c: 530: const char * cp;
   941                           ;doprnt.c: 533: *ap = __va_start();
   942                           
   943                           ;incstack = 0
   944  00088E  0E44               	movlw	low (?_sprintf+4)
   945  000890  0100               	movlb	0	; () banked
   946  000892  6F63               	movwf	sprintf@ap& (0+255),b
   947  000894  0E00               	movlw	high (?_sprintf+4)
   948  000896  0100               	movlb	0	; () banked
   949  000898  6F64               	movwf	(sprintf@ap+1)& (0+255),b
   950                           
   951                           ;doprnt.c: 536: while(c = *f++) {
   952  00089A  D3F9               	goto	l2566
   953  00089C                     l2368:
   954                           
   955                           ; BSR set to: 0
   956                           ;doprnt.c: 538: if(c != '%')
   957  00089C  0E25               	movlw	37
   958  00089E  0100               	movlb	0	; () banked
   959  0008A0  1976               	xorwf	sprintf@c& (0+255),w,b
   960  0008A2  B4D8               	btfsc	status,2,c
   961  0008A4  D007               	goto	l2374
   962                           
   963                           ; BSR set to: 0
   964                           ;doprnt.c: 540: {
   965                           ;doprnt.c: 541: ((*sp++ = (c)));
   966  0008A6  C040  FFD9         	movff	sprintf@sp,fsr2l
   967  0008AA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
   968  0008AE  C076  FFDF         	movff	sprintf@c,indf2
   969  0008B2  D3EA               	goto	l2564
   970  0008B4                     l2374:
   971                           
   972                           ; BSR set to: 0
   973                           ;doprnt.c: 543: }
   974                           ;doprnt.c: 548: flag = 0;
   975  0008B4  0E00               	movlw	0
   976  0008B6  0100               	movlb	0	; () banked
   977  0008B8  6F66               	movwf	(sprintf@flag+1)& (0+255),b
   978  0008BA  0E00               	movlw	0
   979  0008BC  6F65               	movwf	sprintf@flag& (0+255),b
   980                           
   981                           ; BSR set to: 0
   982                           ;doprnt.c: 611: if(*f == '.') {
   983  0008BE  C042  FFF6         	movff	sprintf@f,tblptrl
   984  0008C2  C043  FFF7         	movff	sprintf@f+1,tblptrh
   985  0008C6                     	if	0	;tblptru may be non-zero
   986  0008C6                     	endif
   987  0008C6                     	if	0	;tblptru may be non-zero
   988  0008C6                     	endif
   989  0008C6  0008               	tblrd		*
   990  0008C8  50F5               	movf	tablat,w,c
   991  0008CA  0A2E               	xorlw	46
   992  0008CC  A4D8               	btfss	status,2,c
   993  0008CE  D034               	goto	l2388
   994                           
   995                           ; BSR set to: 0
   996                           ;doprnt.c: 612: flag |= 0x4000;
   997  0008D0  0100               	movlb	0	; () banked
   998  0008D2  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
   999                           
  1000                           ;doprnt.c: 613: f++;
  1001  0008D4  4A42               	infsnz	sprintf@f,f,c
  1002  0008D6  2A43               	incf	sprintf@f+1,f,c
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;doprnt.c: 620: {
  1006                           ;doprnt.c: 621: prec = 0;
  1007  0008D8  0E00               	movlw	0
  1008  0008DA  0100               	movlb	0	; () banked
  1009  0008DC  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1010  0008DE  0E00               	movlw	0
  1011  0008E0  6F71               	movwf	sprintf@prec& (0+255),b
  1012                           
  1013                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1014  0008E2  D01E               	goto	l2386
  1015  0008E4                     l2382:
  1016                           
  1017                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1018  0008E4  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  1019  0008E8  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1020  0008EC  0E00               	movlw	0
  1021  0008EE  6E12               	movwf	___wmul@multiplicand+1,c
  1022  0008F0  0E0A               	movlw	10
  1023  0008F2  6E11               	movwf	___wmul@multiplicand,c
  1024  0008F4  ECB4  F011         	call	___wmul	;wreg free
  1025  0008F8  C042  FFF6         	movff	sprintf@f,tblptrl
  1026  0008FC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1027  000900                     	if	0	;tblptru may be non-zero
  1028  000900                     	endif
  1029  000900                     	if	0	;tblptru may be non-zero
  1030  000900                     	endif
  1031  000900  0008               	tblrd		*
  1032  000902  50F5               	movf	tablat,w,c
  1033  000904  260F               	addwf	?___wmul,f,c
  1034  000906  0E00               	movlw	0
  1035  000908  2210               	addwfc	?___wmul+1,f,c
  1036  00090A  0ED0               	movlw	208
  1037  00090C  240F               	addwf	?___wmul,w,c
  1038  00090E  0100               	movlb	0	; () banked
  1039  000910  6F71               	movwf	sprintf@prec& (0+255),b
  1040  000912  0EFF               	movlw	255
  1041  000914  2010               	addwfc	?___wmul+1,w,c
  1042  000916  0100               	movlb	0	; () banked
  1043  000918  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1044                           
  1045                           ; BSR set to: 0
  1046  00091A  4A42               	infsnz	sprintf@f,f,c
  1047  00091C  2A43               	incf	sprintf@f+1,f,c
  1048  00091E  D000               	goto	l2386
  1049  000920                     l2386:
  1050                           
  1051                           ; BSR set to: 0
  1052  000920  C042  FFF6         	movff	sprintf@f,tblptrl
  1053  000924  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1054  000928                     	if	0	;tblptru may be non-zero
  1055  000928                     	endif
  1056  000928                     	if	0	;tblptru may be non-zero
  1057  000928                     	endif
  1058  000928  0008               	tblrd		*
  1059  00092A  50F5               	movf	tablat,w,c
  1060  00092C  EC00  F012         	call	_isdigit
  1061  000930  A0D8               	btfss	status,0,c
  1062  000932  D010               	goto	l2396
  1063  000934  D7D7               	goto	l2382
  1064                           
  1065                           ;doprnt.c: 624: }
  1066                           ;doprnt.c: 625: } else {
  1067  000936  D00E               	goto	l2396
  1068  000938                     l2388:
  1069                           
  1070                           ;doprnt.c: 626: prec = 0;
  1071  000938  0E00               	movlw	0
  1072  00093A  0100               	movlb	0	; () banked
  1073  00093C  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1074  00093E  0E00               	movlw	0
  1075  000940  6F71               	movwf	sprintf@prec& (0+255),b
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;doprnt.c: 628: flag |= 0x1000;
  1079  000942  0100               	movlb	0	; () banked
  1080  000944  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;doprnt.c: 630: }
  1084                           ;doprnt.c: 635: switch(c = *f++) {
  1085  000946  D006               	goto	l2396
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;doprnt.c: 638: goto alldone;
  1089                           
  1090                           ;doprnt.c: 637: case 0:
  1091  000948  D3B2               	goto	l2568
  1092  00094A                     l2392:
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;doprnt.c: 663: flag |= 0x400;
  1096  00094A  0100               	movlb	0	; () banked
  1097  00094C  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1098                           
  1099                           ;doprnt.c: 664: break;
  1100  00094E  D014               	goto	l2398
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;doprnt.c: 813: continue;
  1104                           
  1105                           ;doprnt.c: 802: default:
  1106  000950  D39E               	goto	l2566
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;doprnt.c: 822: }
  1110  000952  D012               	goto	l2398
  1111  000954                     l2396:
  1112  000954  C042  FFF6         	movff	sprintf@f,tblptrl
  1113  000958  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1114  00095C  4A42               	infsnz	sprintf@f,f,c
  1115  00095E  2A43               	incf	sprintf@f+1,f,c
  1116  000960                     	if	0	;tblptru may be non-zero
  1117  000960                     	endif
  1118  000960                     	if	0	;tblptru may be non-zero
  1119  000960                     	endif
  1120  000960  0008               	tblrd		*
  1121  000962  CFF5 F076          	movff	tablat,sprintf@c
  1122  000966  0100               	movlb	0	; () banked
  1123  000968  5176               	movf	sprintf@c& (0+255),w,b
  1124                           
  1125                           ; Switch size 1, requested type "space"
  1126                           ; Number of cases is 2, Range of values is 0 to 102
  1127                           ; switch strategies available:
  1128                           ; Name         Instructions Cycles
  1129                           ; simple_byte            7     4 (average)
  1130                           ;	Chosen strategy is simple_byte
  1131  00096A  0A00               	xorlw	0	; case 0
  1132  00096C  B4D8               	btfsc	status,2,c
  1133  00096E  D39F               	goto	l2568
  1134  000970  0A66               	xorlw	102	; case 102
  1135  000972  B4D8               	btfsc	status,2,c
  1136  000974  D7EA               	goto	l2392
  1137  000976  D38B               	goto	l2566
  1138  000978                     l2398:
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;doprnt.c: 825: if(flag & (0x700)) {
  1142  000978  0E07               	movlw	7
  1143  00097A  0100               	movlb	0	; () banked
  1144  00097C  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1145  00097E  B4D8               	btfsc	status,2,c
  1146  000980  D334               	goto	l2546
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;doprnt.c: 827: if(flag & 0x1000)
  1150  000982  0100               	movlb	0	; () banked
  1151  000984  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1152  000986  D006               	goto	l2404
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;doprnt.c: 829: prec = 6;
  1156  000988  0E00               	movlw	0
  1157  00098A  0100               	movlb	0	; () banked
  1158  00098C  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1159  00098E  0E06               	movlw	6
  1160  000990  6F71               	movwf	sprintf@prec& (0+255),b
  1161  000992  D000               	goto	l2404
  1162  000994                     l2404:
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1166  000994  C063  FFD9         	movff	sprintf@ap,fsr2l
  1167  000998  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1168  00099C  CFDE F073          	movff	postinc2,sprintf@fval
  1169  0009A0  CFDE F074          	movff	postinc2,sprintf@fval+1
  1170  0009A4  CFDD F075          	movff	postdec2,sprintf@fval+2
  1171                           
  1172                           ; BSR set to: 0
  1173  0009A8  0E03               	movlw	3
  1174  0009AA  0100               	movlb	0	; () banked
  1175  0009AC  2763               	addwf	sprintf@ap& (0+255),f,b
  1176  0009AE  0E00               	movlw	0
  1177  0009B0  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;doprnt.c: 831: if(fval < 0.0) {
  1181  0009B2  0100               	movlb	0	; () banked
  1182  0009B4  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1183  0009B6  D012               	goto	l2414
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;doprnt.c: 832: fval = -fval;
  1187  0009B8  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1188  0009BC  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1189  0009C0  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1190  0009C4  ECEE  F011         	call	___ftneg	;wreg free
  1191  0009C8  C001  F073         	movff	?___ftneg,sprintf@fval
  1192  0009CC  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1193  0009D0  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1194                           
  1195                           ;doprnt.c: 833: flag |= 0x03;
  1196  0009D4  0E03               	movlw	3
  1197  0009D6  0100               	movlb	0	; () banked
  1198  0009D8  1365               	iorwf	sprintf@flag& (0+255),f,b
  1199  0009DA  D000               	goto	l2414
  1200  0009DC                     l2414:
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;doprnt.c: 834: }
  1204                           ;doprnt.c: 835: exp = 0;
  1205  0009DC  0E00               	movlw	0
  1206  0009DE  0100               	movlb	0	; () banked
  1207  0009E0  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1208  0009E2  0E00               	movlw	0
  1209  0009E4  6F6B               	movwf	sprintf@exp& (0+255),b
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;doprnt.c: 836: if( fval!=0) {
  1213  0009E6  0100               	movlb	0	; () banked
  1214  0009E8  5173               	movf	sprintf@fval& (0+255),w,b
  1215  0009EA  0100               	movlb	0	; () banked
  1216  0009EC  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1217  0009EE  0100               	movlb	0	; () banked
  1218  0009F0  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1219  0009F2  B4D8               	btfsc	status,2,c
  1220  0009F4  D08D               	goto	l2442
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1224  0009F6  0E82               	movlw	130
  1225  0009F8  6E47               	movwf	??_sprintf& (0+255),c
  1226  0009FA  0EFF               	movlw	255
  1227  0009FC  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1228  0009FE  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1229  000A02  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1230  000A06  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1231  000A0A  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1232  000A0E  0E10               	movlw	16
  1233  000A10  D005               	goto	u2560
  1234  000A12                     u2565:
  1235  000A12  90D8               	bcf	status,0,c
  1236  000A14  324C               	rrcf	??_sprintf+5,f,c
  1237  000A16  324B               	rrcf	??_sprintf+4,f,c
  1238  000A18  324A               	rrcf	??_sprintf+3,f,c
  1239  000A1A  3249               	rrcf	??_sprintf+2,f,c
  1240  000A1C                     u2560:
  1241  000A1C  2EE8               	decfsz	wreg,f,c
  1242  000A1E  D7F9               	goto	u2565
  1243  000A20  5049               	movf	??_sprintf+2,w,c
  1244  000A22  2447               	addwf	??_sprintf,w,c
  1245  000A24  0100               	movlb	0	; () banked
  1246  000A26  6F6B               	movwf	sprintf@exp& (0+255),b
  1247  000A28  0E00               	movlw	0
  1248  000A2A  2048               	addwfc	??_sprintf+1,w,c
  1249  000A2C  0100               	movlb	0	; () banked
  1250  000A2E  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1251                           
  1252                           ; BSR set to: 0
  1253                           ;doprnt.c: 838: exp--;
  1254  000A30  0100               	movlb	0	; () banked
  1255  000A32  076B               	decf	sprintf@exp& (0+255),f,b
  1256  000A34  A0D8               	btfss	status,0,c
  1257  000A36  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;doprnt.c: 839: exp *= 3;
  1261  000A38  C06B  F00F         	movff	sprintf@exp,___wmul@multiplier
  1262  000A3C  C06C  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1263  000A40  0E00               	movlw	0
  1264  000A42  6E12               	movwf	___wmul@multiplicand+1,c
  1265  000A44  0E03               	movlw	3
  1266  000A46  6E11               	movwf	___wmul@multiplicand,c
  1267  000A48  ECB4  F011         	call	___wmul	;wreg free
  1268  000A4C  C00F  F06B         	movff	?___wmul,sprintf@exp
  1269  000A50  C010  F06C         	movff	?___wmul+1,sprintf@exp+1
  1270                           
  1271                           ;doprnt.c: 840: exp /= 10;
  1272  000A54  C06B  F007         	movff	sprintf@exp,___awdiv@dividend
  1273  000A58  C06C  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1274  000A5C  0E00               	movlw	0
  1275  000A5E  6E0A               	movwf	___awdiv@divisor+1,c
  1276  000A60  0E0A               	movlw	10
  1277  000A62  6E09               	movwf	___awdiv@divisor,c
  1278  000A64  EC0C  F00F         	call	___awdiv	;wreg free
  1279  000A68  C007  F06B         	movff	?___awdiv,sprintf@exp
  1280  000A6C  C008  F06C         	movff	?___awdiv+1,sprintf@exp+1
  1281                           
  1282                           ;doprnt.c: 841: if(exp < 0)
  1283  000A70  0100               	movlb	0	; () banked
  1284  000A72  AF6C               	btfss	(sprintf@exp+1)& (0+255),7,b
  1285  000A74  D005               	goto	l2430
  1286                           
  1287                           ; BSR set to: 0
  1288                           ;doprnt.c: 842: exp--;
  1289  000A76  0100               	movlb	0	; () banked
  1290  000A78  076B               	decf	sprintf@exp& (0+255),f,b
  1291  000A7A  A0D8               	btfss	status,0,c
  1292  000A7C  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1293  000A7E  D000               	goto	l2430
  1294  000A80                     l2430:
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1298  000A80  0100               	movlb	0	; () banked
  1299  000A82  516B               	movf	sprintf@exp& (0+255),w,b
  1300  000A84  0800               	sublw	0
  1301  000A86  EC5F  F008         	call	_scale
  1302  000A8A  C024  F06D         	movff	?_scale,sprintf@tmpval
  1303  000A8E  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1304  000A92  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1305                           
  1306                           ;doprnt.c: 847: tmpval.integ *= fval;
  1307  000A96  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  1308  000A9A  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1309  000A9E  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1310  000AA2  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1311  000AA6  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1312  000AAA  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1313  000AAE  EC60  F00D         	call	___ftmul	;wreg free
  1314  000AB2  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  1315  000AB6  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  1316  000ABA  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  1317                           
  1318                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1319  000ABE  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1320  000AC2  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1321  000AC6  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1322  000ACA  0E00               	movlw	0
  1323  000ACC  6E04               	movwf	___ftge@ff2,c
  1324  000ACE  0E80               	movlw	128
  1325  000AD0  6E05               	movwf	___ftge@ff2+1,c
  1326  000AD2  0E3F               	movlw	63
  1327  000AD4  6E06               	movwf	___ftge@ff2+2,c
  1328  000AD6  EC57  F00F         	call	___ftge	;wreg free
  1329  000ADA  B0D8               	btfsc	status,0,c
  1330  000ADC  D005               	goto	l2438
  1331                           
  1332                           ;doprnt.c: 849: exp--;
  1333  000ADE  0100               	movlb	0	; () banked
  1334  000AE0  076B               	decf	sprintf@exp& (0+255),f,b
  1335  000AE2  A0D8               	btfss	status,0,c
  1336  000AE4  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1337  000AE6  D014               	goto	l2442
  1338  000AE8                     l2438:
  1339                           
  1340                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1341  000AE8  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1342  000AEC  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1343  000AF0  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1344  000AF4  0E00               	movlw	0
  1345  000AF6  6E04               	movwf	___ftge@ff2,c
  1346  000AF8  0E20               	movlw	32
  1347  000AFA  6E05               	movwf	___ftge@ff2+1,c
  1348  000AFC  0E41               	movlw	65
  1349  000AFE  6E06               	movwf	___ftge@ff2+2,c
  1350  000B00  EC57  F00F         	call	___ftge	;wreg free
  1351  000B04  A0D8               	btfss	status,0,c
  1352  000B06  D004               	goto	l2442
  1353                           
  1354                           ;doprnt.c: 851: exp++;
  1355  000B08  0100               	movlb	0	; () banked
  1356  000B0A  4B6B               	infsnz	sprintf@exp& (0+255),f,b
  1357  000B0C  2B6C               	incf	(sprintf@exp+1)& (0+255),f,b
  1358                           
  1359                           ; BSR set to: 0
  1360                           
  1361                           ; BSR set to: 0
  1362  000B0E  D000               	goto	l2442
  1363  000B10                     l2442:
  1364                           
  1365                           ;doprnt.c: 852: }
  1366                           ;doprnt.c: 1112: if(prec <= 12)
  1367  000B10  0100               	movlb	0	; () banked
  1368  000B12  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1369  000B14  D008               	goto	l2444
  1370  000B16  0100               	movlb	0	; () banked
  1371  000B18  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1372  000B1A  E11E               	bnz	l2446
  1373  000B1C  0E0D               	movlw	13
  1374  000B1E  0100               	movlb	0	; () banked
  1375  000B20  5D71               	subwf	sprintf@prec& (0+255),w,b
  1376  000B22  B0D8               	btfsc	status,0,c
  1377  000B24  D019               	goto	l2446
  1378  000B26                     l2444:
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;doprnt.c: 1113: fval += fround(prec);
  1382  000B26  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  1383  000B2A  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1384  000B2E  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1385  000B32  0100               	movlb	0	; () banked
  1386  000B34  5171               	movf	sprintf@prec& (0+255),w,b
  1387  000B36  EC4F  F00A         	call	_fround
  1388  000B3A  C024  F031         	movff	?_fround,___ftadd@f2
  1389  000B3E  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1390  000B42  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1391  000B46  EC71  F00B         	call	___ftadd	;wreg free
  1392  000B4A  C02E  F073         	movff	?___ftadd,sprintf@fval
  1393  000B4E  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  1394  000B52  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  1395  000B56  D000               	goto	l2446
  1396  000B58                     l2446:
  1397                           
  1398                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1399  000B58  0100               	movlb	0	; () banked
  1400  000B5A  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1401  000B5C  D008               	goto	l2448
  1402  000B5E  0100               	movlb	0	; () banked
  1403  000B60  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1404  000B62  E128               	bnz	l2454
  1405  000B64  0E0A               	movlw	10
  1406  000B66  0100               	movlb	0	; () banked
  1407  000B68  5D6B               	subwf	sprintf@exp& (0+255),w,b
  1408  000B6A  B0D8               	btfsc	status,0,c
  1409  000B6C  D023               	goto	l2454
  1410  000B6E                     l2448:
  1411                           
  1412                           ; BSR set to: 0
  1413  000B6E  0100               	movlb	0	; () banked
  1414  000B70  5173               	movf	sprintf@fval& (0+255),w,b
  1415  000B72  0100               	movlb	0	; () banked
  1416  000B74  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1417  000B76  0100               	movlb	0	; () banked
  1418  000B78  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1419  000B7A  B4D8               	btfsc	status,2,c
  1420  000B7C  D077               	goto	l2468
  1421                           
  1422                           ; BSR set to: 0
  1423  000B7E  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1424  000B82  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1425  000B86  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1426  000B8A  ECDC  F00D         	call	___fttol	;wreg free
  1427  000B8E  502B               	movf	?___fttol,w,c
  1428  000B90  102C               	iorwf	?___fttol+1,w,c
  1429  000B92  102D               	iorwf	?___fttol+2,w,c
  1430  000B94  102E               	iorwf	?___fttol+3,w,c
  1431  000B96  A4D8               	btfss	status,2,c
  1432  000B98  D069               	goto	l2468
  1433  000B9A  0100               	movlb	0	; () banked
  1434  000B9C  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1435  000B9E  D066               	goto	l2468
  1436  000BA0  0100               	movlb	0	; () banked
  1437  000BA2  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1438  000BA4  E107               	bnz	l2454
  1439  000BA6  0E02               	movlw	2
  1440  000BA8  0100               	movlb	0	; () banked
  1441  000BAA  5D6B               	subwf	sprintf@exp& (0+255),w,b
  1442  000BAC  B0D8               	btfsc	status,0,c
  1443  000BAE  D002               	goto	l2454
  1444  000BB0  D05D               	goto	l2468
  1445  000BB2  D000               	goto	l2454
  1446  000BB4                     l2454:
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1450  000BB4  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1451  000BB8  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1452  000BBC  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1453  000BC0  0E70               	movlw	112
  1454  000BC2  6E04               	movwf	___ftge@ff2,c
  1455  000BC4  0E89               	movlw	137
  1456  000BC6  6E05               	movwf	___ftge@ff2+1,c
  1457  000BC8  0E40               	movlw	64
  1458  000BCA  6E06               	movwf	___ftge@ff2+2,c
  1459  000BCC  EC57  F00F         	call	___ftge	;wreg free
  1460  000BD0  B0D8               	btfsc	status,0,c
  1461  000BD2  D003               	goto	l2458
  1462                           
  1463                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1464  000BD4  0100               	movlb	0	; () banked
  1465  000BD6  0EF7               	movlw	247
  1466  000BD8  D002               	goto	L1
  1467  000BDA                     l2458:
  1468                           
  1469                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1470  000BDA  0100               	movlb	0	; () banked
  1471  000BDC  0EF8               	movlw	248
  1472  000BDE                     L1:
  1473  000BDE  276B               	addwf	sprintf@exp& (0+255),f,b
  1474  000BE0  0EFF               	movlw	255
  1475  000BE2  236C               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1476  000BE4  D000               	goto	l2460
  1477  000BE6                     l2460:
  1478                           
  1479                           ; BSR set to: 0
  1480                           ;doprnt.c: 1124: }
  1481                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1482  000BE6  0100               	movlb	0	; () banked
  1483  000BE8  516B               	movf	sprintf@exp& (0+255),w,b
  1484  000BEA  EC5F  F008         	call	_scale
  1485  000BEE  C024  F06D         	movff	?_scale,sprintf@tmpval
  1486  000BF2  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1487  000BF6  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1488                           
  1489                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1490  000BFA  D017               	goto	l2464
  1491  000BFC  C073  F001         	movff	sprintf@fval,__div_to_l_@f1
  1492  000C00  C074  F002         	movff	sprintf@fval+1,__div_to_l_@f1+1
  1493  000C04  C075  F003         	movff	sprintf@fval+2,__div_to_l_@f1+2
  1494  000C08  C06D  F004         	movff	sprintf@tmpval,__div_to_l_@f2
  1495  000C0C  C06E  F005         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  1496  000C10  C06F  F006         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  1497  000C14  ECDB  F00C         	call	__div_to_l_	;wreg free
  1498  000C18  C001  F067         	movff	?__div_to_l_,sprintf@val
  1499  000C1C  C002  F068         	movff	?__div_to_l_+1,sprintf@val+1
  1500  000C20  C003  F069         	movff	?__div_to_l_+2,sprintf@val+2
  1501  000C24  C004  F06A         	movff	?__div_to_l_+3,sprintf@val+3
  1502  000C28  D017               	goto	l2466
  1503  000C2A                     l2464:
  1504  000C2A  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1505  000C2E  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1506  000C32  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1507  000C36  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1508  000C3A  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1509  000C3E  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1510  000C42  EC53  F00C         	call	__tdiv_to_l_	;wreg free
  1511  000C46  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  1512  000C4A  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1513  000C4E  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1514  000C52  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1515  000C56  D000               	goto	l2466
  1516  000C58                     l2466:
  1517                           
  1518                           ;doprnt.c: 1129: fval = 0.0;
  1519  000C58  0E00               	movlw	0
  1520  000C5A  0100               	movlb	0	; () banked
  1521  000C5C  6F73               	movwf	sprintf@fval& (0+255),b
  1522  000C5E  0E00               	movlw	0
  1523  000C60  0100               	movlb	0	; () banked
  1524  000C62  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  1525  000C64  0E00               	movlw	0
  1526  000C66  0100               	movlb	0	; () banked
  1527  000C68  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  1528                           
  1529                           ;doprnt.c: 1130: } else {
  1530  000C6A  D034               	goto	l2472
  1531  000C6C                     l2468:
  1532                           
  1533                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1534  000C6C  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1535  000C70  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1536  000C74  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1537  000C78  ECDC  F00D         	call	___fttol	;wreg free
  1538  000C7C  C02B  F067         	movff	?___fttol,sprintf@val
  1539  000C80  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  1540  000C84  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  1541  000C88  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  1542                           
  1543                           ;doprnt.c: 1132: fval -= (double)val;
  1544  000C8C  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  1545  000C90  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1546  000C94  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1547  000C98  C067  F009         	movff	sprintf@val,___lltoft@c
  1548  000C9C  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1549  000CA0  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1550  000CA4  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1551  000CA8  ECA0  F010         	call	___lltoft	;wreg free
  1552  000CAC  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1553  000CB0  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1554  000CB4  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1555  000CB8  EC1F  F011         	call	___ftsub	;wreg free
  1556  000CBC  C03A  F073         	movff	?___ftsub,sprintf@fval
  1557  000CC0  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  1558  000CC4  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  1559                           
  1560                           ;doprnt.c: 1133: exp = 0;
  1561  000CC8  0E00               	movlw	0
  1562  000CCA  0100               	movlb	0	; () banked
  1563  000CCC  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1564  000CCE  0E00               	movlw	0
  1565  000CD0  6F6B               	movwf	sprintf@exp& (0+255),b
  1566  000CD2  D000               	goto	l2472
  1567  000CD4                     l2472:
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;doprnt.c: 1134: }
  1571                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1572  000CD4  0E01               	movlw	1
  1573  000CD6  0100               	movlb	0	; () banked
  1574  000CD8  6F76               	movwf	sprintf@c& (0+255),b
  1575  000CDA                     l2474:
  1576                           
  1577                           ; BSR set to: 0
  1578  000CDA  0E0A               	movlw	10
  1579  000CDC  0100               	movlb	0	; () banked
  1580  000CDE  1976               	xorwf	sprintf@c& (0+255),w,b
  1581  000CE0  B4D8               	btfsc	status,2,c
  1582  000CE2  D022               	goto	l2486
  1583  000CE4  D001               	goto	l2478
  1584                           
  1585                           ; BSR set to: 0
  1586  000CE6  D020               	goto	l2486
  1587  000CE8                     l2478:
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;doprnt.c: 1137: if(val < dpowers[c])
  1591  000CE8  0100               	movlb	0	; () banked
  1592  000CEA  5176               	movf	sprintf@c& (0+255),w,b
  1593  000CEC  0D04               	mullw	4
  1594  000CEE  0E01               	movlw	low _dpowers
  1595  000CF0  24F3               	addwf	prodl,w,c
  1596  000CF2  6EF6               	movwf	tblptrl,c
  1597  000CF4  0E08               	movlw	high _dpowers
  1598  000CF6  20F4               	addwfc	prodh,w,c
  1599  000CF8  6EF7               	movwf	tblptrh,c
  1600  000CFA                     	if	0	;There are less than 3 active tblptr bytes
  1601  000CFA                     	endif
  1602  000CFA  0009               	tblrd		*+
  1603  000CFC  50F5               	movf	tablat,w,c
  1604  000CFE  0100               	movlb	0	; () banked
  1605  000D00  5D67               	subwf	sprintf@val& (0+255),w,b
  1606  000D02  0009               	tblrd		*+
  1607  000D04  50F5               	movf	tablat,w,c
  1608  000D06  0100               	movlb	0	; () banked
  1609  000D08  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  1610  000D0A  0009               	tblrd		*+
  1611  000D0C  50F5               	movf	tablat,w,c
  1612  000D0E  0100               	movlb	0	; () banked
  1613  000D10  5969               	subwfb	(sprintf@val+2)& (0+255),w,b
  1614  000D12  0009               	tblrd		*+
  1615  000D14  50F5               	movf	tablat,w,c
  1616  000D16  0100               	movlb	0	; () banked
  1617  000D18  596A               	subwfb	(sprintf@val+3)& (0+255),w,b
  1618  000D1A  A0D8               	btfss	status,0,c
  1619  000D1C  D005               	goto	l2486
  1620  000D1E  D001               	goto	l2482
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;doprnt.c: 1138: break;
  1624  000D20  D003               	goto	l2486
  1625  000D22                     l2482:
  1626                           
  1627                           ; BSR set to: 0
  1628  000D22  0100               	movlb	0	; () banked
  1629  000D24  2B76               	incf	sprintf@c& (0+255),f,b
  1630  000D26  D7D9               	goto	l2474
  1631  000D28                     l2486:
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;doprnt.c: 1175: {
  1635                           ;doprnt.c: 1188: if(flag & 0x03)
  1636  000D28  0E03               	movlw	3
  1637  000D2A  0100               	movlb	0	; () banked
  1638  000D2C  1565               	andwf	sprintf@flag& (0+255),w,b
  1639  000D2E  6E47               	movwf	??_sprintf& (0+255),c
  1640  000D30  0E00               	movlw	0
  1641  000D32  0100               	movlb	0	; () banked
  1642  000D34  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1643  000D36  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1644  000D38  5047               	movf	??_sprintf,w,c
  1645  000D3A  1048               	iorwf	??_sprintf+1,w,c
  1646  000D3C  B4D8               	btfsc	status,2,c
  1647  000D3E  D053               	goto	l2500
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1651  000D40  C040  FFD9         	movff	sprintf@sp,fsr2l
  1652  000D44  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1653  000D48  0E2D               	movlw	45
  1654  000D4A  D04B               	goto	L2
  1655  000D4C                     l2490:
  1656                           
  1657                           ; BSR set to: 0
  1658  000D4C  4A40               	infsnz	sprintf@sp,f,c
  1659  000D4E  2A41               	incf	sprintf@sp+1,f,c
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;doprnt.c: 1195: }
  1663                           ;doprnt.c: 1196: while(c--) {
  1664  000D50  D04A               	goto	l2500
  1665  000D52                     l2492:
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;doprnt.c: 1200: {
  1669                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1670  000D52  C067  F001         	movff	sprintf@val,___lldiv@dividend
  1671  000D56  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1672  000D5A  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1673  000D5E  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1674  000D62  0100               	movlb	0	; () banked
  1675  000D64  5176               	movf	sprintf@c& (0+255),w,b
  1676  000D66  0D04               	mullw	4
  1677  000D68  0E01               	movlw	low _dpowers
  1678  000D6A  24F3               	addwf	prodl,w,c
  1679  000D6C  6EF6               	movwf	tblptrl,c
  1680  000D6E  0E08               	movlw	high _dpowers
  1681  000D70  20F4               	addwfc	prodh,w,c
  1682  000D72  6EF7               	movwf	tblptrh,c
  1683  000D74                     	if	0	;There are less than 3 active tblptr bytes
  1684  000D74                     	endif
  1685  000D74  0009               	tblrd		*+
  1686  000D76  CFF5 F005          	movff	tablat,___lldiv@divisor
  1687  000D7A  0009               	tblrd		*+
  1688  000D7C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1689  000D80  0009               	tblrd		*+
  1690  000D82  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1691  000D86  000A               	tblrd		*-
  1692  000D88  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1693  000D8C  ECA2  F00F         	call	___lldiv	;wreg free
  1694  000D90  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1695  000D94  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1696  000D98  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1697  000D9C  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1698                           
  1699                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1700  000DA0  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1701  000DA4  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1702  000DA8  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1703  000DAC  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1704  000DB0  0E0A               	movlw	10
  1705  000DB2  6E05               	movwf	___llmod@divisor,c
  1706  000DB4  0E00               	movlw	0
  1707  000DB6  6E06               	movwf	___llmod@divisor+1,c
  1708  000DB8  0E00               	movlw	0
  1709  000DBA  6E07               	movwf	___llmod@divisor+2,c
  1710  000DBC  0E00               	movlw	0
  1711  000DBE  6E08               	movwf	___llmod@divisor+3,c
  1712  000DC0  EC68  F010         	call	___llmod	;wreg free
  1713  000DC4  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1714  000DC8  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1715  000DCC  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1716  000DD0  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1717                           
  1718                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1719  000DD4  0100               	movlb	0	; () banked
  1720  000DD6  516D               	movf	sprintf@tmpval& (0+255),w,b
  1721  000DD8  0F30               	addlw	48
  1722  000DDA  C040  FFD9         	movff	sprintf@sp,fsr2l
  1723  000DDE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1724  000DE2                     L2:
  1725  000DE2  6EDF               	movwf	indf2,c
  1726  000DE4  D7B3               	goto	l2490
  1727  000DE6                     l2500:
  1728                           
  1729                           ; BSR set to: 0
  1730  000DE6  0100               	movlb	0	; () banked
  1731  000DE8  0776               	decf	sprintf@c& (0+255),f,b
  1732  000DEA  0100               	movlb	0	; () banked
  1733  000DEC  2976               	incf	sprintf@c& (0+255),w,b
  1734  000DEE  B4D8               	btfsc	status,2,c
  1735  000DF0  D00F               	goto	l2508
  1736  000DF2  D7AF               	goto	l2492
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;doprnt.c: 1204: }
  1740                           ;doprnt.c: 1206: }
  1741                           ;doprnt.c: 1207: while(exp > 0) {
  1742  000DF4  D00D               	goto	l2508
  1743  000DF6                     l2502:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1747  000DF6  C040  FFD9         	movff	sprintf@sp,fsr2l
  1748  000DFA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1749  000DFE  0E30               	movlw	48
  1750  000E00  6EDF               	movwf	indf2,c
  1751                           
  1752                           ; BSR set to: 0
  1753  000E02  4A40               	infsnz	sprintf@sp,f,c
  1754  000E04  2A41               	incf	sprintf@sp+1,f,c
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;doprnt.c: 1209: exp--;
  1758  000E06  0100               	movlb	0	; () banked
  1759  000E08  076B               	decf	sprintf@exp& (0+255),f,b
  1760  000E0A  A0D8               	btfss	status,0,c
  1761  000E0C  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1762  000E0E  D000               	goto	l2508
  1763  000E10                     l2508:
  1764                           
  1765                           ; BSR set to: 0
  1766  000E10  0100               	movlb	0	; () banked
  1767  000E12  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1768  000E14  D007               	goto	l2510
  1769  000E16  0100               	movlb	0	; () banked
  1770  000E18  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1771  000E1A  E1ED               	bnz	l2502
  1772  000E1C  0100               	movlb	0	; () banked
  1773  000E1E  056B               	decf	sprintf@exp& (0+255),w,b
  1774  000E20  B0D8               	btfsc	status,0,c
  1775  000E22  D7E9               	goto	l2502
  1776  000E24                     l2510:
  1777                           
  1778                           ; BSR set to: 0
  1779                           ;doprnt.c: 1210: }
  1780                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1781  000E24  0100               	movlb	0	; () banked
  1782  000E26  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1783  000E28  D00C               	goto	l171
  1784  000E2A  0100               	movlb	0	; () banked
  1785  000E2C  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1786  000E2E  E105               	bnz	u2720
  1787  000E30  0E09               	movlw	9
  1788  000E32  0100               	movlb	0	; () banked
  1789  000E34  5D71               	subwf	sprintf@prec& (0+255),w,b
  1790  000E36  A0D8               	btfss	status,0,c
  1791  000E38  D004               	goto	l171
  1792  000E3A                     u2720:
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1796  000E3A  0E08               	movlw	8
  1797  000E3C  0100               	movlb	0	; () banked
  1798  000E3E  6F76               	movwf	sprintf@c& (0+255),b
  1799  000E40  D003               	goto	l2514
  1800  000E42                     l171:
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;doprnt.c: 1213: else
  1804                           ;doprnt.c: 1214: c = prec;
  1805  000E42  C071  F076         	movff	sprintf@prec,sprintf@c
  1806  000E46  D000               	goto	l2514
  1807  000E48                     l2514:
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;doprnt.c: 1215: prec -= c;
  1811  000E48  0100               	movlb	0	; () banked
  1812  000E4A  5176               	movf	sprintf@c& (0+255),w,b
  1813  000E4C  0100               	movlb	0	; () banked
  1814  000E4E  5F71               	subwf	sprintf@prec& (0+255),f,b
  1815  000E50  0E00               	movlw	0
  1816  000E52  0100               	movlb	0	; () banked
  1817  000E54  BF76               	btfsc	sprintf@c& (0+255),7,b
  1818  000E56  0EFF               	movlw	255
  1819  000E58  0100               	movlb	0	; () banked
  1820  000E5A  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 1219: if(c)
  1824  000E5C  0100               	movlb	0	; () banked
  1825  000E5E  5176               	movf	sprintf@c& (0+255),w,b
  1826  000E60  0100               	movlb	0	; () banked
  1827  000E62  B4D8               	btfsc	status,2,c
  1828  000E64  D009               	goto	l2522
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  1832  000E66  C040  FFD9         	movff	sprintf@sp,fsr2l
  1833  000E6A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1834  000E6E  0E2E               	movlw	46
  1835  000E70  6EDF               	movwf	indf2,c
  1836                           
  1837                           ; BSR set to: 0
  1838  000E72  4A40               	infsnz	sprintf@sp,f,c
  1839  000E74  2A41               	incf	sprintf@sp+1,f,c
  1840  000E76  D000               	goto	l2522
  1841  000E78                     l2522:
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1845  000E78  0100               	movlb	0	; () banked
  1846  000E7A  5176               	movf	sprintf@c& (0+255),w,b
  1847  000E7C  EC5F  F008         	call	_scale
  1848  000E80  C024  F060         	movff	?_scale,_sprintf$755
  1849  000E84  C025  F061         	movff	?_scale+1,_sprintf$755+1
  1850  000E88  C026  F062         	movff	?_scale+2,_sprintf$755+2
  1851                           
  1852                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1853  000E8C  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1854  000E90  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1855  000E94  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1856  000E98  C060  F015         	movff	_sprintf$755,___ftmul@f1
  1857  000E9C  C061  F016         	movff	_sprintf$755+1,___ftmul@f1+1
  1858  000EA0  C062  F017         	movff	_sprintf$755+2,___ftmul@f1+2
  1859  000EA4  EC60  F00D         	call	___ftmul	;wreg free
  1860  000EA8  C015  F02B         	movff	?___ftmul,___fttol@f1
  1861  000EAC  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1862  000EB0  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1863  000EB4  ECDC  F00D         	call	___fttol	;wreg free
  1864  000EB8  C02B  F067         	movff	?___fttol,sprintf@val
  1865  000EBC  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  1866  000EC0  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  1867  000EC4  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  1868                           
  1869                           ;doprnt.c: 1228: while(c--) {
  1870  000EC8  D073               	goto	l2536
  1871  000ECA                     l2526:
  1872                           
  1873                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1874  000ECA  C067  F001         	movff	sprintf@val,___lldiv@dividend
  1875  000ECE  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1876  000ED2  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1877  000ED6  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1878  000EDA  0100               	movlb	0	; () banked
  1879  000EDC  5176               	movf	sprintf@c& (0+255),w,b
  1880  000EDE  0D04               	mullw	4
  1881  000EE0  0E01               	movlw	low _dpowers
  1882  000EE2  24F3               	addwf	prodl,w,c
  1883  000EE4  6EF6               	movwf	tblptrl,c
  1884  000EE6  0E08               	movlw	high _dpowers
  1885  000EE8  20F4               	addwfc	prodh,w,c
  1886  000EEA  6EF7               	movwf	tblptrh,c
  1887  000EEC                     	if	0	;There are less than 3 active tblptr bytes
  1888  000EEC                     	endif
  1889  000EEC  0009               	tblrd		*+
  1890  000EEE  CFF5 F005          	movff	tablat,___lldiv@divisor
  1891  000EF2  0009               	tblrd		*+
  1892  000EF4  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1893  000EF8  0009               	tblrd		*+
  1894  000EFA  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1895  000EFE  000A               	tblrd		*-
  1896  000F00  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1897  000F04  ECA2  F00F         	call	___lldiv	;wreg free
  1898  000F08  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1899  000F0C  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1900  000F10  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1901  000F14  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1902                           
  1903                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1904  000F18  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1905  000F1C  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1906  000F20  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1907  000F24  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1908  000F28  0E0A               	movlw	10
  1909  000F2A  6E05               	movwf	___llmod@divisor,c
  1910  000F2C  0E00               	movlw	0
  1911  000F2E  6E06               	movwf	___llmod@divisor+1,c
  1912  000F30  0E00               	movlw	0
  1913  000F32  6E07               	movwf	___llmod@divisor+2,c
  1914  000F34  0E00               	movlw	0
  1915  000F36  6E08               	movwf	___llmod@divisor+3,c
  1916  000F38  EC68  F010         	call	___llmod	;wreg free
  1917  000F3C  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1918  000F40  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1919  000F44  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1920  000F48  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1921                           
  1922                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  1923  000F4C  0100               	movlb	0	; () banked
  1924  000F4E  516D               	movf	sprintf@tmpval& (0+255),w,b
  1925  000F50  0F30               	addlw	48
  1926  000F52  C040  FFD9         	movff	sprintf@sp,fsr2l
  1927  000F56  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1928  000F5A  6EDF               	movwf	indf2,c
  1929                           
  1930                           ; BSR set to: 0
  1931  000F5C  4A40               	infsnz	sprintf@sp,f,c
  1932  000F5E  2A41               	incf	sprintf@sp+1,f,c
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;doprnt.c: 1232: val %= dpowers[c];
  1936  000F60  C067  F001         	movff	sprintf@val,___llmod@dividend
  1937  000F64  C068  F002         	movff	sprintf@val+1,___llmod@dividend+1
  1938  000F68  C069  F003         	movff	sprintf@val+2,___llmod@dividend+2
  1939  000F6C  C06A  F004         	movff	sprintf@val+3,___llmod@dividend+3
  1940  000F70  0100               	movlb	0	; () banked
  1941  000F72  5176               	movf	sprintf@c& (0+255),w,b
  1942  000F74  0D04               	mullw	4
  1943  000F76  0E01               	movlw	low _dpowers
  1944  000F78  24F3               	addwf	prodl,w,c
  1945  000F7A  6EF6               	movwf	tblptrl,c
  1946  000F7C  0E08               	movlw	high _dpowers
  1947  000F7E  20F4               	addwfc	prodh,w,c
  1948  000F80  6EF7               	movwf	tblptrh,c
  1949  000F82                     	if	0	;There are less than 3 active tblptr bytes
  1950  000F82                     	endif
  1951  000F82  0009               	tblrd		*+
  1952  000F84  CFF5 F005          	movff	tablat,___llmod@divisor
  1953  000F88  0009               	tblrd		*+
  1954  000F8A  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1955  000F8E  0009               	tblrd		*+
  1956  000F90  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1957  000F94  000A               	tblrd		*-
  1958  000F96  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1959  000F9A  EC68  F010         	call	___llmod	;wreg free
  1960  000F9E  C001  F067         	movff	?___llmod,sprintf@val
  1961  000FA2  C002  F068         	movff	?___llmod+1,sprintf@val+1
  1962  000FA6  C003  F069         	movff	?___llmod+2,sprintf@val+2
  1963  000FAA  C004  F06A         	movff	?___llmod+3,sprintf@val+3
  1964  000FAE  D000               	goto	l2536
  1965  000FB0                     l2536:
  1966  000FB0  0100               	movlb	0	; () banked
  1967  000FB2  0776               	decf	sprintf@c& (0+255),f,b
  1968  000FB4  0100               	movlb	0	; () banked
  1969  000FB6  2976               	incf	sprintf@c& (0+255),w,b
  1970  000FB8  B4D8               	btfsc	status,2,c
  1971  000FBA  D00F               	goto	l2544
  1972  000FBC  D786               	goto	l2526
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;doprnt.c: 1233: }
  1976                           ;doprnt.c: 1235: while(prec) {
  1977  000FBE  D00D               	goto	l2544
  1978  000FC0                     l2538:
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  1982  000FC0  C040  FFD9         	movff	sprintf@sp,fsr2l
  1983  000FC4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1984  000FC8  0E30               	movlw	48
  1985  000FCA  6EDF               	movwf	indf2,c
  1986                           
  1987                           ; BSR set to: 0
  1988  000FCC  4A40               	infsnz	sprintf@sp,f,c
  1989  000FCE  2A41               	incf	sprintf@sp+1,f,c
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;doprnt.c: 1237: prec--;
  1993  000FD0  0100               	movlb	0	; () banked
  1994  000FD2  0771               	decf	sprintf@prec& (0+255),f,b
  1995  000FD4  A0D8               	btfss	status,0,c
  1996  000FD6  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  1997  000FD8  D000               	goto	l2544
  1998  000FDA                     l2544:
  1999                           
  2000                           ; BSR set to: 0
  2001  000FDA  0100               	movlb	0	; () banked
  2002  000FDC  5171               	movf	sprintf@prec& (0+255),w,b
  2003  000FDE  0100               	movlb	0	; () banked
  2004  000FE0  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2005  000FE2  B4D8               	btfsc	status,2,c
  2006  000FE4  D054               	goto	l2566
  2007  000FE6  D7EC               	goto	l2538
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;doprnt.c: 1238: }
  2011                           ;doprnt.c: 1245: continue;
  2012  000FE8  D052               	goto	l2566
  2013  000FEA                     l2546:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;doprnt.c: 1246: }
  2017                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2018  000FEA  0100               	movlb	0	; () banked
  2019  000FEC  5171               	movf	sprintf@prec& (0+255),w,b
  2020  000FEE  0100               	movlb	0	; () banked
  2021  000FF0  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2022  000FF2  A4D8               	btfss	status,2,c
  2023  000FF4  D00E               	goto	l2552
  2024                           
  2025                           ; BSR set to: 0
  2026  000FF6  0100               	movlb	0	; () banked
  2027  000FF8  5167               	movf	sprintf@val& (0+255),w,b
  2028  000FFA  0100               	movlb	0	; () banked
  2029  000FFC  1168               	iorwf	(sprintf@val+1)& (0+255),w,b
  2030  000FFE  0100               	movlb	0	; () banked
  2031  001000  1169               	iorwf	(sprintf@val+2)& (0+255),w,b
  2032  001002  0100               	movlb	0	; () banked
  2033  001004  116A               	iorwf	(sprintf@val+3)& (0+255),w,b
  2034  001006  A4D8               	btfss	status,2,c
  2035  001008  D004               	goto	l2552
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 1291: prec++;
  2039  00100A  0100               	movlb	0	; () banked
  2040  00100C  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2041  00100E  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2042  001010  D000               	goto	l2552
  2043  001012                     l2552:
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;doprnt.c: 1339: if(c < prec)
  2047  001012  0E80               	movlw	128
  2048  001014  0100               	movlb	0	; () banked
  2049  001016  BF76               	btfsc	sprintf@c& (0+255),7,b
  2050  001018  0E7F               	movlw	127
  2051  00101A  6E47               	movwf	??_sprintf& (0+255),c
  2052  00101C  0100               	movlb	0	; () banked
  2053  00101E  5171               	movf	sprintf@prec& (0+255),w,b
  2054  001020  0100               	movlb	0	; () banked
  2055  001022  5D76               	subwf	sprintf@c& (0+255),w,b
  2056  001024  0100               	movlb	0	; () banked
  2057  001026  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2058  001028  0A80               	xorlw	128
  2059  00102A  5847               	subwfb	??_sprintf& (0+255),w,c
  2060  00102C  B0D8               	btfsc	status,0,c
  2061  00102E  D003               	goto	l2556
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;doprnt.c: 1340: c = prec;
  2065  001030  C071  F076         	movff	sprintf@prec,sprintf@c
  2066  001034  D017               	goto	l2560
  2067  001036                     l2556:
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;doprnt.c: 1341: else if(prec < c)
  2071  001036  0100               	movlb	0	; () banked
  2072  001038  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2073  00103A  0A80               	xorlw	128
  2074  00103C  6E47               	movwf	??_sprintf& (0+255),c
  2075  00103E  0100               	movlb	0	; () banked
  2076  001040  5176               	movf	sprintf@c& (0+255),w,b
  2077  001042  0100               	movlb	0	; () banked
  2078  001044  5D71               	subwf	sprintf@prec& (0+255),w,b
  2079  001046  0E80               	movlw	128
  2080  001048  0100               	movlb	0	; () banked
  2081  00104A  BF76               	btfsc	sprintf@c& (0+255),7,b
  2082  00104C  0E7F               	movlw	127
  2083  00104E  5847               	subwfb	??_sprintf& (0+255),w,c
  2084  001050  B0D8               	btfsc	status,0,c
  2085  001052  D008               	goto	l2560
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;doprnt.c: 1342: prec = c;
  2089  001054  0100               	movlb	0	; () banked
  2090  001056  5176               	movf	sprintf@c& (0+255),w,b
  2091  001058  0100               	movlb	0	; () banked
  2092  00105A  6F71               	movwf	sprintf@prec& (0+255),b
  2093  00105C  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  2094  00105E  BF71               	btfsc	sprintf@prec& (0+255),7,b
  2095  001060  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2096                           
  2097                           ; BSR set to: 0
  2098  001062  D000               	goto	l2560
  2099  001064                     l2560:
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;doprnt.c: 1422: {
  2103                           ;doprnt.c: 1438: if(flag & 0x03)
  2104  001064  0E03               	movlw	3
  2105  001066  0100               	movlb	0	; () banked
  2106  001068  1565               	andwf	sprintf@flag& (0+255),w,b
  2107  00106A  6E47               	movwf	??_sprintf& (0+255),c
  2108  00106C  0E00               	movlw	0
  2109  00106E  0100               	movlb	0	; () banked
  2110  001070  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2111  001072  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2112  001074  5047               	movf	??_sprintf,w,c
  2113  001076  1048               	iorwf	??_sprintf+1,w,c
  2114  001078  B4D8               	btfsc	status,2,c
  2115  00107A  D009               	goto	l2566
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2119  00107C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2120  001080  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2121  001084  0E2D               	movlw	45
  2122  001086  6EDF               	movwf	indf2,c
  2123  001088                     l2564:
  2124                           
  2125                           ; BSR set to: 0
  2126  001088  4A40               	infsnz	sprintf@sp,f,c
  2127  00108A  2A41               	incf	sprintf@sp+1,f,c
  2128                           
  2129                           ; BSR set to: 0
  2130  00108C  D000               	goto	l2566
  2131  00108E                     l2566:
  2132                           
  2133                           ; BSR set to: 0
  2134  00108E  C042  FFF6         	movff	sprintf@f,tblptrl
  2135  001092  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2136  001096  4A42               	infsnz	sprintf@f,f,c
  2137  001098  2A43               	incf	sprintf@f+1,f,c
  2138  00109A                     	if	0	;tblptru may be non-zero
  2139  00109A                     	endif
  2140  00109A                     	if	0	;tblptru may be non-zero
  2141  00109A                     	endif
  2142  00109A  0008               	tblrd		*
  2143  00109C  CFF5 F076          	movff	tablat,sprintf@c
  2144  0010A0  0100               	movlb	0	; () banked
  2145  0010A2  5176               	movf	sprintf@c& (0+255),w,b
  2146  0010A4  B4D8               	btfsc	status,2,c
  2147  0010A6  D003               	goto	l2568
  2148  0010A8  EF4E  F004         	goto	l2368
  2149                           
  2150                           ; BSR set to: 0
  2151  0010AC  D000               	goto	l2568
  2152  0010AE                     l2568:
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;doprnt.c: 1538: *sp = 0;
  2156  0010AE  C040  FFD9         	movff	sprintf@sp,fsr2l
  2157  0010B2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2158  0010B6  0E00               	movlw	0
  2159  0010B8  6EDF               	movwf	indf2,c
  2160  0010BA  D000               	goto	l186
  2161  0010BC                     l186:
  2162                           
  2163                           ; BSR set to: 0
  2164  0010BC  0012               	return		;funcret
  2165  0010BE                     __end_of_sprintf:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           prodh	equ	0xFF4
  2172                           prodl	equ	0xFF3
  2173                           wreg	equ	0xFE8
  2174                           indf2	equ	0xFDF
  2175                           postinc2	equ	0xFDE
  2176                           postdec2	equ	0xFDD
  2177                           fsr2h	equ	0xFDA
  2178                           fsr2l	equ	0xFD9
  2179                           status	equ	0xFD8
  2180                           
  2181 ;; *************** function _scale *****************
  2182 ;; Defined at:
  2183 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;  scl             1    wreg     char 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  scl             1   41[COMRAM] char 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  3   35[COMRAM] char 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2197 ;;      Params:         3       0       0       0       0       0       0       0       0
  2198 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2200 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2201 ;;Total ram usage:        7 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    2
  2204 ;; This function calls:
  2205 ;;		___awdiv
  2206 ;;		___awmod
  2207 ;;		___ftmul
  2208 ;;		___wmul
  2209 ;; This function is called by:
  2210 ;;		_sprintf
  2211 ;; This function uses a non-reentrant model
  2212 ;;
  2213                           
  2214                           	psect	text3
  2215  0010BE                     __ptext3:
  2216                           	opt stack 0
  2217  0010BE                     _scale:
  2218                           	opt stack 27
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;incstack = 0
  2222                           ;scale@scl stored from wreg
  2223  0010BE  6E2A               	movwf	scale@scl,c
  2224                           
  2225                           ;doprnt.c: 428: if(scl < 0) {
  2226  0010C0  AE2A               	btfss	scale@scl,7,c
  2227  0010C2  D0EF               	goto	l2058
  2228                           
  2229                           ;doprnt.c: 429: scl = -scl;
  2230  0010C4  6C2A               	negf	scale@scl,c
  2231                           
  2232                           ;doprnt.c: 430: if(scl>=110)
  2233  0010C6  502A               	movf	scale@scl,w,c
  2234  0010C8  0A80               	xorlw	128
  2235  0010CA  0F12               	addlw	-238
  2236  0010CC  A0D8               	btfss	status,0,c
  2237  0010CE  D08D               	goto	l2048
  2238                           
  2239                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2240  0010D0  0E00               	movlw	0
  2241  0010D2  6E12               	movwf	___wmul@multiplicand+1,c
  2242  0010D4  0E03               	movlw	3
  2243  0010D6  6E11               	movwf	___wmul@multiplicand,c
  2244  0010D8  0E00               	movlw	0
  2245  0010DA  6E0A               	movwf	___awdiv@divisor+1,c
  2246  0010DC  0E0A               	movlw	10
  2247  0010DE  6E09               	movwf	___awdiv@divisor,c
  2248  0010E0  0E00               	movlw	0
  2249  0010E2  6E04               	movwf	___awmod@divisor+1,c
  2250  0010E4  0E64               	movlw	100
  2251  0010E6  6E03               	movwf	___awmod@divisor,c
  2252  0010E8  502A               	movf	scale@scl,w,c
  2253  0010EA  6E01               	movwf	___awmod@dividend,c
  2254  0010EC  6A02               	clrf	___awmod@dividend+1,c
  2255  0010EE  BE01               	btfsc	___awmod@dividend,7,c
  2256  0010F0  0602               	decf	___awmod@dividend+1,f,c
  2257  0010F2  ECE8  F00F         	call	___awmod	;wreg free
  2258  0010F6  C001  F007         	movff	?___awmod,___awdiv@dividend
  2259  0010FA  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2260  0010FE  EC0C  F00F         	call	___awdiv	;wreg free
  2261  001102  0E09               	movlw	9
  2262  001104  2407               	addwf	?___awdiv,w,c
  2263  001106  6E0F               	movwf	___wmul@multiplier,c
  2264  001108  0E00               	movlw	0
  2265  00110A  2008               	addwfc	?___awdiv+1,w,c
  2266  00110C  6E10               	movwf	___wmul@multiplier+1,c
  2267  00110E  ECB4  F011         	call	___wmul	;wreg free
  2268  001112  0E29               	movlw	low __npowers_
  2269  001114  240F               	addwf	?___wmul,w,c
  2270  001116  6EF6               	movwf	tblptrl,c
  2271  001118  0E08               	movlw	high __npowers_
  2272  00111A  2010               	addwfc	?___wmul+1,w,c
  2273  00111C  6EF7               	movwf	tblptrh,c
  2274  00111E                     	if	0	;There are less than 3 active tblptr bytes
  2275  00111E                     	endif
  2276  00111E  0009               	tblrd		*+
  2277  001120  CFF5 F018          	movff	tablat,___ftmul@f2
  2278  001124  0009               	tblrd		*+
  2279  001126  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2280  00112A  000A               	tblrd		*-
  2281  00112C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2282  001130  0E00               	movlw	0
  2283  001132  6E0A               	movwf	___awdiv@divisor+1,c
  2284  001134  0E64               	movlw	100
  2285  001136  6E09               	movwf	___awdiv@divisor,c
  2286  001138  502A               	movf	scale@scl,w,c
  2287  00113A  6E07               	movwf	___awdiv@dividend,c
  2288  00113C  6A08               	clrf	___awdiv@dividend+1,c
  2289  00113E  BE07               	btfsc	___awdiv@dividend,7,c
  2290  001140  0608               	decf	___awdiv@dividend+1,f,c
  2291  001142  EC0C  F00F         	call	___awdiv	;wreg free
  2292  001146  0E12               	movlw	18
  2293  001148  2407               	addwf	?___awdiv,w,c
  2294  00114A  6E0F               	movwf	___wmul@multiplier,c
  2295  00114C  0E00               	movlw	0
  2296  00114E  2008               	addwfc	?___awdiv+1,w,c
  2297  001150  6E10               	movwf	___wmul@multiplier+1,c
  2298  001152  0E00               	movlw	0
  2299  001154  6E12               	movwf	___wmul@multiplicand+1,c
  2300  001156  0E03               	movlw	3
  2301  001158  6E11               	movwf	___wmul@multiplicand,c
  2302  00115A  ECB4  F011         	call	___wmul	;wreg free
  2303  00115E  0E29               	movlw	low __npowers_
  2304  001160  240F               	addwf	?___wmul,w,c
  2305  001162  6EF6               	movwf	tblptrl,c
  2306  001164  0E08               	movlw	high __npowers_
  2307  001166  2010               	addwfc	?___wmul+1,w,c
  2308  001168  6EF7               	movwf	tblptrh,c
  2309  00116A                     	if	0	;There are less than 3 active tblptr bytes
  2310  00116A                     	endif
  2311  00116A  0009               	tblrd		*+
  2312  00116C  CFF5 F015          	movff	tablat,___ftmul@f1
  2313  001170  0009               	tblrd		*+
  2314  001172  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2315  001176  000A               	tblrd		*-
  2316  001178  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2317  00117C  EC60  F00D         	call	___ftmul	;wreg free
  2318  001180  C015  F027         	movff	?___ftmul,_scale$754
  2319  001184  C016  F028         	movff	?___ftmul+1,_scale$754+1
  2320  001188  C017  F029         	movff	?___ftmul+2,_scale$754+2
  2321                           
  2322                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2323  00118C  C027  F015         	movff	_scale$754,___ftmul@f1
  2324  001190  C028  F016         	movff	_scale$754+1,___ftmul@f1+1
  2325  001194  C029  F017         	movff	_scale$754+2,___ftmul@f1+2
  2326  001198  0E00               	movlw	0
  2327  00119A  6E12               	movwf	___wmul@multiplicand+1,c
  2328  00119C  0E03               	movlw	3
  2329  00119E  6E11               	movwf	___wmul@multiplicand,c
  2330  0011A0  0E00               	movlw	0
  2331  0011A2  6E04               	movwf	___awmod@divisor+1,c
  2332  0011A4  0E0A               	movlw	10
  2333  0011A6  6E03               	movwf	___awmod@divisor,c
  2334  0011A8  502A               	movf	scale@scl,w,c
  2335  0011AA  6E01               	movwf	___awmod@dividend,c
  2336  0011AC  6A02               	clrf	___awmod@dividend+1,c
  2337  0011AE  BE01               	btfsc	___awmod@dividend,7,c
  2338  0011B0  0602               	decf	___awmod@dividend+1,f,c
  2339  0011B2  ECE8  F00F         	call	___awmod	;wreg free
  2340  0011B6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2341  0011BA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2342  0011BE  ECB4  F011         	call	___wmul	;wreg free
  2343  0011C2  0E29               	movlw	low __npowers_
  2344  0011C4  240F               	addwf	?___wmul,w,c
  2345  0011C6  6EF6               	movwf	tblptrl,c
  2346  0011C8  0E08               	movlw	high __npowers_
  2347  0011CA  2010               	addwfc	?___wmul+1,w,c
  2348  0011CC  6EF7               	movwf	tblptrh,c
  2349  0011CE                     	if	0	;There are less than 3 active tblptr bytes
  2350  0011CE                     	endif
  2351  0011CE  0009               	tblrd		*+
  2352  0011D0  CFF5 F018          	movff	tablat,___ftmul@f2
  2353  0011D4  0009               	tblrd		*+
  2354  0011D6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2355  0011DA  000A               	tblrd		*-
  2356  0011DC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2357  0011E0  EC60  F00D         	call	___ftmul	;wreg free
  2358  0011E4  D141               	goto	L6
  2359  0011E6  D15A               	goto	l120
  2360  0011E8  D054               	goto	l2054
  2361  0011EA                     l2048:
  2362                           
  2363                           ;doprnt.c: 432: else if(scl > 10)
  2364  0011EA  502A               	movf	scale@scl,w,c
  2365  0011EC  0A80               	xorlw	128
  2366  0011EE  0F75               	addlw	-139
  2367  0011F0  A0D8               	btfss	status,0,c
  2368  0011F2  D04F               	goto	l2054
  2369                           
  2370                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2371  0011F4  0E00               	movlw	0
  2372  0011F6  6E0A               	movwf	___awdiv@divisor+1,c
  2373  0011F8  0E0A               	movlw	10
  2374  0011FA  6E09               	movwf	___awdiv@divisor,c
  2375  0011FC  502A               	movf	scale@scl,w,c
  2376  0011FE  6E07               	movwf	___awdiv@dividend,c
  2377  001200  6A08               	clrf	___awdiv@dividend+1,c
  2378  001202  BE07               	btfsc	___awdiv@dividend,7,c
  2379  001204  0608               	decf	___awdiv@dividend+1,f,c
  2380  001206  EC0C  F00F         	call	___awdiv	;wreg free
  2381  00120A  0E09               	movlw	9
  2382  00120C  2407               	addwf	?___awdiv,w,c
  2383  00120E  6E0F               	movwf	___wmul@multiplier,c
  2384  001210  0E00               	movlw	0
  2385  001212  2008               	addwfc	?___awdiv+1,w,c
  2386  001214  6E10               	movwf	___wmul@multiplier+1,c
  2387  001216  0E00               	movlw	0
  2388  001218  6E12               	movwf	___wmul@multiplicand+1,c
  2389  00121A  0E03               	movlw	3
  2390  00121C  6E11               	movwf	___wmul@multiplicand,c
  2391  00121E  ECB4  F011         	call	___wmul	;wreg free
  2392  001222  0E29               	movlw	low __npowers_
  2393  001224  240F               	addwf	?___wmul,w,c
  2394  001226  6EF6               	movwf	tblptrl,c
  2395  001228  0E08               	movlw	high __npowers_
  2396  00122A  2010               	addwfc	?___wmul+1,w,c
  2397  00122C  6EF7               	movwf	tblptrh,c
  2398  00122E                     	if	0	;There are less than 3 active tblptr bytes
  2399  00122E                     	endif
  2400  00122E  0009               	tblrd		*+
  2401  001230  CFF5 F015          	movff	tablat,___ftmul@f1
  2402  001234  0009               	tblrd		*+
  2403  001236  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2404  00123A  000A               	tblrd		*-
  2405  00123C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2406  001240  0E00               	movlw	0
  2407  001242  6E12               	movwf	___wmul@multiplicand+1,c
  2408  001244  0E03               	movlw	3
  2409  001246  6E11               	movwf	___wmul@multiplicand,c
  2410  001248  0E00               	movlw	0
  2411  00124A  6E04               	movwf	___awmod@divisor+1,c
  2412  00124C  0E0A               	movlw	10
  2413  00124E  6E03               	movwf	___awmod@divisor,c
  2414  001250  502A               	movf	scale@scl,w,c
  2415  001252  6E01               	movwf	___awmod@dividend,c
  2416  001254  6A02               	clrf	___awmod@dividend+1,c
  2417  001256  BE01               	btfsc	___awmod@dividend,7,c
  2418  001258  0602               	decf	___awmod@dividend+1,f,c
  2419  00125A  ECE8  F00F         	call	___awmod	;wreg free
  2420  00125E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2421  001262  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2422  001266  ECB4  F011         	call	___wmul	;wreg free
  2423  00126A  0E29               	movlw	low __npowers_
  2424  00126C  240F               	addwf	?___wmul,w,c
  2425  00126E  6EF6               	movwf	tblptrl,c
  2426  001270  0E08               	movlw	high __npowers_
  2427  001272  2010               	addwfc	?___wmul+1,w,c
  2428  001274  6EF7               	movwf	tblptrh,c
  2429  001276                     	if	0	;There are less than 3 active tblptr bytes
  2430  001276                     	endif
  2431  001276  0009               	tblrd		*+
  2432  001278  CFF5 F018          	movff	tablat,___ftmul@f2
  2433  00127C  0009               	tblrd		*+
  2434  00127E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2435  001282  000A               	tblrd		*-
  2436  001284  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2437  001288  EC60  F00D         	call	___ftmul	;wreg free
  2438  00128C  D0ED               	goto	L6
  2439  00128E  D106               	goto	l120
  2440  001290  D000               	goto	l2054
  2441  001292                     l2054:
  2442                           
  2443                           ;doprnt.c: 434: return _npowers_[scl];
  2444  001292  502A               	movf	scale@scl,w,c
  2445  001294  0D03               	mullw	3
  2446  001296  0E29               	movlw	low __npowers_
  2447  001298  24F3               	addwf	prodl,w,c
  2448  00129A  6EF6               	movwf	tblptrl,c
  2449  00129C  0E08               	movlw	high __npowers_
  2450  00129E  D0F2               	goto	L5
  2451  0012A0  D0FD               	goto	l120
  2452  0012A2                     l2058:
  2453                           
  2454                           ;doprnt.c: 435: }
  2455                           ;doprnt.c: 436: if(scl>=110)
  2456  0012A2  502A               	movf	scale@scl,w,c
  2457  0012A4  0A80               	xorlw	128
  2458  0012A6  0F12               	addlw	-238
  2459  0012A8  A0D8               	btfss	status,0,c
  2460  0012AA  D08D               	goto	l2066
  2461                           
  2462                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2463  0012AC  0E00               	movlw	0
  2464  0012AE  6E12               	movwf	___wmul@multiplicand+1,c
  2465  0012B0  0E03               	movlw	3
  2466  0012B2  6E11               	movwf	___wmul@multiplicand,c
  2467  0012B4  0E00               	movlw	0
  2468  0012B6  6E0A               	movwf	___awdiv@divisor+1,c
  2469  0012B8  0E0A               	movlw	10
  2470  0012BA  6E09               	movwf	___awdiv@divisor,c
  2471  0012BC  0E00               	movlw	0
  2472  0012BE  6E04               	movwf	___awmod@divisor+1,c
  2473  0012C0  0E64               	movlw	100
  2474  0012C2  6E03               	movwf	___awmod@divisor,c
  2475  0012C4  502A               	movf	scale@scl,w,c
  2476  0012C6  6E01               	movwf	___awmod@dividend,c
  2477  0012C8  6A02               	clrf	___awmod@dividend+1,c
  2478  0012CA  BE01               	btfsc	___awmod@dividend,7,c
  2479  0012CC  0602               	decf	___awmod@dividend+1,f,c
  2480  0012CE  ECE8  F00F         	call	___awmod	;wreg free
  2481  0012D2  C001  F007         	movff	?___awmod,___awdiv@dividend
  2482  0012D6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2483  0012DA  EC0C  F00F         	call	___awdiv	;wreg free
  2484  0012DE  0E09               	movlw	9
  2485  0012E0  2407               	addwf	?___awdiv,w,c
  2486  0012E2  6E0F               	movwf	___wmul@multiplier,c
  2487  0012E4  0E00               	movlw	0
  2488  0012E6  2008               	addwfc	?___awdiv+1,w,c
  2489  0012E8  6E10               	movwf	___wmul@multiplier+1,c
  2490  0012EA  ECB4  F011         	call	___wmul	;wreg free
  2491  0012EE  0E50               	movlw	low __powers_
  2492  0012F0  240F               	addwf	?___wmul,w,c
  2493  0012F2  6EF6               	movwf	tblptrl,c
  2494  0012F4  0E08               	movlw	high __powers_
  2495  0012F6  2010               	addwfc	?___wmul+1,w,c
  2496  0012F8  6EF7               	movwf	tblptrh,c
  2497  0012FA                     	if	0	;There are less than 3 active tblptr bytes
  2498  0012FA                     	endif
  2499  0012FA  0009               	tblrd		*+
  2500  0012FC  CFF5 F018          	movff	tablat,___ftmul@f2
  2501  001300  0009               	tblrd		*+
  2502  001302  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2503  001306  000A               	tblrd		*-
  2504  001308  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2505  00130C  0E00               	movlw	0
  2506  00130E  6E0A               	movwf	___awdiv@divisor+1,c
  2507  001310  0E64               	movlw	100
  2508  001312  6E09               	movwf	___awdiv@divisor,c
  2509  001314  502A               	movf	scale@scl,w,c
  2510  001316  6E07               	movwf	___awdiv@dividend,c
  2511  001318  6A08               	clrf	___awdiv@dividend+1,c
  2512  00131A  BE07               	btfsc	___awdiv@dividend,7,c
  2513  00131C  0608               	decf	___awdiv@dividend+1,f,c
  2514  00131E  EC0C  F00F         	call	___awdiv	;wreg free
  2515  001322  0E12               	movlw	18
  2516  001324  2407               	addwf	?___awdiv,w,c
  2517  001326  6E0F               	movwf	___wmul@multiplier,c
  2518  001328  0E00               	movlw	0
  2519  00132A  2008               	addwfc	?___awdiv+1,w,c
  2520  00132C  6E10               	movwf	___wmul@multiplier+1,c
  2521  00132E  0E00               	movlw	0
  2522  001330  6E12               	movwf	___wmul@multiplicand+1,c
  2523  001332  0E03               	movlw	3
  2524  001334  6E11               	movwf	___wmul@multiplicand,c
  2525  001336  ECB4  F011         	call	___wmul	;wreg free
  2526  00133A  0E50               	movlw	low __powers_
  2527  00133C  240F               	addwf	?___wmul,w,c
  2528  00133E  6EF6               	movwf	tblptrl,c
  2529  001340  0E08               	movlw	high __powers_
  2530  001342  2010               	addwfc	?___wmul+1,w,c
  2531  001344  6EF7               	movwf	tblptrh,c
  2532  001346                     	if	0	;There are less than 3 active tblptr bytes
  2533  001346                     	endif
  2534  001346  0009               	tblrd		*+
  2535  001348  CFF5 F015          	movff	tablat,___ftmul@f1
  2536  00134C  0009               	tblrd		*+
  2537  00134E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2538  001352  000A               	tblrd		*-
  2539  001354  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2540  001358  EC60  F00D         	call	___ftmul	;wreg free
  2541  00135C  C015  F027         	movff	?___ftmul,_scale$754
  2542  001360  C016  F028         	movff	?___ftmul+1,_scale$754+1
  2543  001364  C017  F029         	movff	?___ftmul+2,_scale$754+2
  2544                           
  2545                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2546  001368  C027  F015         	movff	_scale$754,___ftmul@f1
  2547  00136C  C028  F016         	movff	_scale$754+1,___ftmul@f1+1
  2548  001370  C029  F017         	movff	_scale$754+2,___ftmul@f1+2
  2549  001374  0E00               	movlw	0
  2550  001376  6E12               	movwf	___wmul@multiplicand+1,c
  2551  001378  0E03               	movlw	3
  2552  00137A  6E11               	movwf	___wmul@multiplicand,c
  2553  00137C  0E00               	movlw	0
  2554  00137E  6E04               	movwf	___awmod@divisor+1,c
  2555  001380  0E0A               	movlw	10
  2556  001382  6E03               	movwf	___awmod@divisor,c
  2557  001384  502A               	movf	scale@scl,w,c
  2558  001386  6E01               	movwf	___awmod@dividend,c
  2559  001388  6A02               	clrf	___awmod@dividend+1,c
  2560  00138A  BE01               	btfsc	___awmod@dividend,7,c
  2561  00138C  0602               	decf	___awmod@dividend+1,f,c
  2562  00138E  ECE8  F00F         	call	___awmod	;wreg free
  2563  001392  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2564  001396  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2565  00139A  ECB4  F011         	call	___wmul	;wreg free
  2566  00139E  0E50               	movlw	low __powers_
  2567  0013A0  240F               	addwf	?___wmul,w,c
  2568  0013A2  6EF6               	movwf	tblptrl,c
  2569  0013A4  0E08               	movlw	high __powers_
  2570  0013A6  2010               	addwfc	?___wmul+1,w,c
  2571  0013A8  6EF7               	movwf	tblptrh,c
  2572  0013AA                     	if	0	;There are less than 3 active tblptr bytes
  2573  0013AA                     	endif
  2574  0013AA  0009               	tblrd		*+
  2575  0013AC  CFF5 F018          	movff	tablat,___ftmul@f2
  2576  0013B0  0009               	tblrd		*+
  2577  0013B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2578  0013B6  000A               	tblrd		*-
  2579  0013B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2580  0013BC  EC60  F00D         	call	___ftmul	;wreg free
  2581  0013C0  D053               	goto	L6
  2582  0013C2  D06C               	goto	l120
  2583  0013C4  D059               	goto	l2072
  2584  0013C6                     l2066:
  2585                           
  2586                           ;doprnt.c: 438: else if(scl > 10)
  2587  0013C6  502A               	movf	scale@scl,w,c
  2588  0013C8  0A80               	xorlw	128
  2589  0013CA  0F75               	addlw	-139
  2590  0013CC  A0D8               	btfss	status,0,c
  2591  0013CE  D054               	goto	l2072
  2592                           
  2593                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2594  0013D0  0E00               	movlw	0
  2595  0013D2  6E0A               	movwf	___awdiv@divisor+1,c
  2596  0013D4  0E0A               	movlw	10
  2597  0013D6  6E09               	movwf	___awdiv@divisor,c
  2598  0013D8  502A               	movf	scale@scl,w,c
  2599  0013DA  6E07               	movwf	___awdiv@dividend,c
  2600  0013DC  6A08               	clrf	___awdiv@dividend+1,c
  2601  0013DE  BE07               	btfsc	___awdiv@dividend,7,c
  2602  0013E0  0608               	decf	___awdiv@dividend+1,f,c
  2603  0013E2  EC0C  F00F         	call	___awdiv	;wreg free
  2604  0013E6  0E09               	movlw	9
  2605  0013E8  2407               	addwf	?___awdiv,w,c
  2606  0013EA  6E0F               	movwf	___wmul@multiplier,c
  2607  0013EC  0E00               	movlw	0
  2608  0013EE  2008               	addwfc	?___awdiv+1,w,c
  2609  0013F0  6E10               	movwf	___wmul@multiplier+1,c
  2610  0013F2  0E00               	movlw	0
  2611  0013F4  6E12               	movwf	___wmul@multiplicand+1,c
  2612  0013F6  0E03               	movlw	3
  2613  0013F8  6E11               	movwf	___wmul@multiplicand,c
  2614  0013FA  ECB4  F011         	call	___wmul	;wreg free
  2615  0013FE  0E50               	movlw	low __powers_
  2616  001400  240F               	addwf	?___wmul,w,c
  2617  001402  6EF6               	movwf	tblptrl,c
  2618  001404  0E08               	movlw	high __powers_
  2619  001406  2010               	addwfc	?___wmul+1,w,c
  2620  001408  6EF7               	movwf	tblptrh,c
  2621  00140A                     	if	0	;There are less than 3 active tblptr bytes
  2622  00140A                     	endif
  2623  00140A  0009               	tblrd		*+
  2624  00140C  CFF5 F015          	movff	tablat,___ftmul@f1
  2625  001410  0009               	tblrd		*+
  2626  001412  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2627  001416  000A               	tblrd		*-
  2628  001418  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2629  00141C  0E00               	movlw	0
  2630  00141E  6E12               	movwf	___wmul@multiplicand+1,c
  2631  001420  0E03               	movlw	3
  2632  001422  6E11               	movwf	___wmul@multiplicand,c
  2633  001424  0E00               	movlw	0
  2634  001426  6E04               	movwf	___awmod@divisor+1,c
  2635  001428  0E0A               	movlw	10
  2636  00142A  6E03               	movwf	___awmod@divisor,c
  2637  00142C  502A               	movf	scale@scl,w,c
  2638  00142E  6E01               	movwf	___awmod@dividend,c
  2639  001430  6A02               	clrf	___awmod@dividend+1,c
  2640  001432  BE01               	btfsc	___awmod@dividend,7,c
  2641  001434  0602               	decf	___awmod@dividend+1,f,c
  2642  001436  ECE8  F00F         	call	___awmod	;wreg free
  2643  00143A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2644  00143E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2645  001442  ECB4  F011         	call	___wmul	;wreg free
  2646  001446  0E50               	movlw	low __powers_
  2647  001448  240F               	addwf	?___wmul,w,c
  2648  00144A  6EF6               	movwf	tblptrl,c
  2649  00144C  0E08               	movlw	high __powers_
  2650  00144E  2010               	addwfc	?___wmul+1,w,c
  2651  001450  6EF7               	movwf	tblptrh,c
  2652  001452                     	if	0	;There are less than 3 active tblptr bytes
  2653  001452                     	endif
  2654  001452  0009               	tblrd		*+
  2655  001454  CFF5 F018          	movff	tablat,___ftmul@f2
  2656  001458  0009               	tblrd		*+
  2657  00145A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2658  00145E  000A               	tblrd		*-
  2659  001460  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2660  001464  EC60  F00D         	call	___ftmul	;wreg free
  2661  001468                     L6:
  2662  001468  C015  F024         	movff	?___ftmul,?_scale
  2663  00146C  C016  F025         	movff	?___ftmul+1,?_scale+1
  2664  001470  C017  F026         	movff	?___ftmul+2,?_scale+2
  2665  001474  D013               	goto	l120
  2666  001476  D000               	goto	l2072
  2667  001478                     l2072:
  2668                           
  2669                           ;doprnt.c: 440: return _powers_[scl];
  2670  001478  502A               	movf	scale@scl,w,c
  2671  00147A  0D03               	mullw	3
  2672  00147C  0E50               	movlw	low __powers_
  2673  00147E  24F3               	addwf	prodl,w,c
  2674  001480  6EF6               	movwf	tblptrl,c
  2675  001482  0E08               	movlw	high __powers_
  2676  001484                     L5:
  2677  001484  20F4               	addwfc	prodh,w,c
  2678  001486  6EF7               	movwf	tblptrh,c
  2679  001488                     	if	0	;There are less than 3 active tblptr bytes
  2680  001488                     	endif
  2681  001488  0009               	tblrd		*+
  2682  00148A  CFF5 F024          	movff	tablat,?_scale
  2683  00148E  0009               	tblrd		*+
  2684  001490  CFF5 F025          	movff	tablat,?_scale+1
  2685  001494  000A               	tblrd		*-
  2686  001496  CFF5 F026          	movff	tablat,?_scale+2
  2687  00149A  D000               	goto	l120
  2688  00149C                     l120:
  2689  00149C  0012               	return		;funcret
  2690  00149E                     __end_of_scale:
  2691                           	opt stack 0
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           wreg	equ	0xFE8
  2699                           indf2	equ	0xFDF
  2700                           postinc2	equ	0xFDE
  2701                           postdec2	equ	0xFDD
  2702                           fsr2h	equ	0xFDA
  2703                           fsr2l	equ	0xFD9
  2704                           status	equ	0xFD8
  2705                           
  2706 ;; *************** function _isdigit *****************
  2707 ;; Defined at:
  2708 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  c               1    wreg     unsigned char 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;  c               1    2[COMRAM] unsigned char 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;		None               void
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2722 ;;      Params:         0       0       0       0       0       0       0       0       0
  2723 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2724 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2725 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2726 ;;Total ram usage:        3 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_sprintf
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text4
  2736  002400                     __ptext4:
  2737                           	opt stack 0
  2738  002400                     _isdigit:
  2739                           	opt stack 29
  2740                           
  2741                           ;incstack = 0
  2742                           ;isdigit@c stored from wreg
  2743  002400  6E03               	movwf	isdigit@c,c
  2744  002402  0E00               	movlw	0
  2745  002404  6E02               	movwf	_isdigit$520,c
  2746  002406  0E3A               	movlw	58
  2747  002408  6003               	cpfslt	isdigit@c,c
  2748  00240A  D006               	goto	l2084
  2749  00240C  0E2F               	movlw	47
  2750  00240E  6403               	cpfsgt	isdigit@c,c
  2751  002410  D003               	goto	l2084
  2752  002412  0E01               	movlw	1
  2753  002414  6E02               	movwf	_isdigit$520,c
  2754  002416  D000               	goto	l2084
  2755  002418                     l2084:
  2756  002418  C002  F001         	movff	_isdigit$520,??_isdigit
  2757  00241C  3001               	rrcf	??_isdigit,w,c
  2758  00241E  D000               	goto	l654
  2759  002420                     l654:
  2760  002420  0012               	return		;funcret
  2761  002422                     __end_of_isdigit:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           tblptrh	equ	0xFF7
  2765                           tblptrl	equ	0xFF6
  2766                           tablat	equ	0xFF5
  2767                           prodh	equ	0xFF4
  2768                           prodl	equ	0xFF3
  2769                           wreg	equ	0xFE8
  2770                           indf2	equ	0xFDF
  2771                           postinc2	equ	0xFDE
  2772                           postdec2	equ	0xFDD
  2773                           fsr2h	equ	0xFDA
  2774                           fsr2l	equ	0xFD9
  2775                           status	equ	0xFD8
  2776                           
  2777 ;; *************** function _fround *****************
  2778 ;; Defined at:
  2779 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  prec            1    wreg     unsigned char 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;  prec            1   44[COMRAM] unsigned char 
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  3   35[COMRAM] unsigned char 
  2786 ;; Registers used:
  2787 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2793 ;;      Params:         3       0       0       0       0       0       0       0       0
  2794 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2796 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2797 ;;Total ram usage:       10 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:    2
  2800 ;; This function calls:
  2801 ;;		___awdiv
  2802 ;;		___awmod
  2803 ;;		___ftmul
  2804 ;;		___wmul
  2805 ;; This function is called by:
  2806 ;;		_sprintf
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text5
  2811  00149E                     __ptext5:
  2812                           	opt stack 0
  2813  00149E                     _fround:
  2814                           	opt stack 27
  2815                           
  2816                           ;incstack = 0
  2817                           ;fround@prec stored from wreg
  2818  00149E  6E2D               	movwf	fround@prec,c
  2819                           
  2820                           ;doprnt.c: 413: if(prec>=110)
  2821  0014A0  0E6D               	movlw	109
  2822  0014A2  642D               	cpfsgt	fround@prec,c
  2823  0014A4  D09B               	goto	l2026
  2824                           
  2825                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2826  0014A6  0E00               	movlw	0
  2827  0014A8  6E12               	movwf	___wmul@multiplicand+1,c
  2828  0014AA  0E03               	movlw	3
  2829  0014AC  6E11               	movwf	___wmul@multiplicand,c
  2830  0014AE  0E00               	movlw	0
  2831  0014B0  6E0A               	movwf	___awdiv@divisor+1,c
  2832  0014B2  0E0A               	movlw	10
  2833  0014B4  6E09               	movwf	___awdiv@divisor,c
  2834  0014B6  0E00               	movlw	0
  2835  0014B8  6E04               	movwf	___awmod@divisor+1,c
  2836  0014BA  0E64               	movlw	100
  2837  0014BC  6E03               	movwf	___awmod@divisor,c
  2838  0014BE  C02D  F001         	movff	fround@prec,___awmod@dividend
  2839  0014C2  6A02               	clrf	___awmod@dividend+1,c
  2840  0014C4  ECE8  F00F         	call	___awmod	;wreg free
  2841  0014C8  C001  F007         	movff	?___awmod,___awdiv@dividend
  2842  0014CC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2843  0014D0  EC0C  F00F         	call	___awdiv	;wreg free
  2844  0014D4  0E09               	movlw	9
  2845  0014D6  2407               	addwf	?___awdiv,w,c
  2846  0014D8  6E0F               	movwf	___wmul@multiplier,c
  2847  0014DA  0E00               	movlw	0
  2848  0014DC  2008               	addwfc	?___awdiv+1,w,c
  2849  0014DE  6E10               	movwf	___wmul@multiplier+1,c
  2850  0014E0  ECB4  F011         	call	___wmul	;wreg free
  2851  0014E4  0E29               	movlw	low __npowers_
  2852  0014E6  240F               	addwf	?___wmul,w,c
  2853  0014E8  6EF6               	movwf	tblptrl,c
  2854  0014EA  0E08               	movlw	high __npowers_
  2855  0014EC  2010               	addwfc	?___wmul+1,w,c
  2856  0014EE  6EF7               	movwf	tblptrh,c
  2857  0014F0                     	if	0	;There are less than 3 active tblptr bytes
  2858  0014F0                     	endif
  2859  0014F0  0009               	tblrd		*+
  2860  0014F2  CFF5 F018          	movff	tablat,___ftmul@f2
  2861  0014F6  0009               	tblrd		*+
  2862  0014F8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2863  0014FC  000A               	tblrd		*-
  2864  0014FE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2865  001502  0E00               	movlw	0
  2866  001504  6E0A               	movwf	___awdiv@divisor+1,c
  2867  001506  0E64               	movlw	100
  2868  001508  6E09               	movwf	___awdiv@divisor,c
  2869  00150A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2870  00150E  6A08               	clrf	___awdiv@dividend+1,c
  2871  001510  EC0C  F00F         	call	___awdiv	;wreg free
  2872  001514  0E12               	movlw	18
  2873  001516  2407               	addwf	?___awdiv,w,c
  2874  001518  6E0F               	movwf	___wmul@multiplier,c
  2875  00151A  0E00               	movlw	0
  2876  00151C  2008               	addwfc	?___awdiv+1,w,c
  2877  00151E  6E10               	movwf	___wmul@multiplier+1,c
  2878  001520  0E00               	movlw	0
  2879  001522  6E12               	movwf	___wmul@multiplicand+1,c
  2880  001524  0E03               	movlw	3
  2881  001526  6E11               	movwf	___wmul@multiplicand,c
  2882  001528  ECB4  F011         	call	___wmul	;wreg free
  2883  00152C  0E29               	movlw	low __npowers_
  2884  00152E  240F               	addwf	?___wmul,w,c
  2885  001530  6EF6               	movwf	tblptrl,c
  2886  001532  0E08               	movlw	high __npowers_
  2887  001534  2010               	addwfc	?___wmul+1,w,c
  2888  001536  6EF7               	movwf	tblptrh,c
  2889  001538                     	if	0	;There are less than 3 active tblptr bytes
  2890  001538                     	endif
  2891  001538  0009               	tblrd		*+
  2892  00153A  CFF5 F015          	movff	tablat,___ftmul@f1
  2893  00153E  0009               	tblrd		*+
  2894  001540  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2895  001544  000A               	tblrd		*-
  2896  001546  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2897  00154A  EC60  F00D         	call	___ftmul	;wreg free
  2898  00154E  C015  F02A         	movff	?___ftmul,_fround$752
  2899  001552  C016  F02B         	movff	?___ftmul+1,_fround$752+1
  2900  001556  C017  F02C         	movff	?___ftmul+2,_fround$752+2
  2901                           
  2902                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2903  00155A  0E00               	movlw	0
  2904  00155C  6E12               	movwf	___wmul@multiplicand+1,c
  2905  00155E  0E03               	movlw	3
  2906  001560  6E11               	movwf	___wmul@multiplicand,c
  2907  001562  0E00               	movlw	0
  2908  001564  6E04               	movwf	___awmod@divisor+1,c
  2909  001566  0E0A               	movlw	10
  2910  001568  6E03               	movwf	___awmod@divisor,c
  2911  00156A  C02D  F001         	movff	fround@prec,___awmod@dividend
  2912  00156E  6A02               	clrf	___awmod@dividend+1,c
  2913  001570  ECE8  F00F         	call	___awmod	;wreg free
  2914  001574  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2915  001578  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2916  00157C  ECB4  F011         	call	___wmul	;wreg free
  2917  001580  0E29               	movlw	low __npowers_
  2918  001582  240F               	addwf	?___wmul,w,c
  2919  001584  6EF6               	movwf	tblptrl,c
  2920  001586  0E08               	movlw	high __npowers_
  2921  001588  2010               	addwfc	?___wmul+1,w,c
  2922  00158A  6EF7               	movwf	tblptrh,c
  2923  00158C                     	if	0	;There are less than 3 active tblptr bytes
  2924  00158C                     	endif
  2925  00158C  0009               	tblrd		*+
  2926  00158E  CFF5 F018          	movff	tablat,___ftmul@f2
  2927  001592  0009               	tblrd		*+
  2928  001594  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2929  001598  000A               	tblrd		*-
  2930  00159A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2931  00159E  C02A  F015         	movff	_fround$752,___ftmul@f1
  2932  0015A2  C02B  F016         	movff	_fround$752+1,___ftmul@f1+1
  2933  0015A6  C02C  F017         	movff	_fround$752+2,___ftmul@f1+2
  2934  0015AA  EC60  F00D         	call	___ftmul	;wreg free
  2935  0015AE  C015  F027         	movff	?___ftmul,_fround$753
  2936  0015B2  C016  F028         	movff	?___ftmul+1,_fround$753+1
  2937  0015B6  C017  F029         	movff	?___ftmul+2,_fround$753+2
  2938                           
  2939                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2940  0015BA  C027  F015         	movff	_fround$753,___ftmul@f1
  2941  0015BE  C028  F016         	movff	_fround$753+1,___ftmul@f1+1
  2942  0015C2  C029  F017         	movff	_fround$753+2,___ftmul@f1+2
  2943  0015C6  0E00               	movlw	0
  2944  0015C8  6E18               	movwf	___ftmul@f2,c
  2945  0015CA  0E00               	movlw	0
  2946  0015CC  6E19               	movwf	___ftmul@f2+1,c
  2947  0015CE  0E3F               	movlw	63
  2948  0015D0  6E1A               	movwf	___ftmul@f2+2,c
  2949  0015D2  EC60  F00D         	call	___ftmul	;wreg free
  2950  0015D6  D07D               	goto	L8
  2951  0015D8  D083               	goto	l113
  2952  0015DA  D062               	goto	l2034
  2953  0015DC                     l2026:
  2954                           
  2955                           ;doprnt.c: 415: else if(prec > 10)
  2956  0015DC  0E0A               	movlw	10
  2957  0015DE  642D               	cpfsgt	fround@prec,c
  2958  0015E0  D05F               	goto	l2034
  2959                           
  2960                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2961  0015E2  0E00               	movlw	0
  2962  0015E4  6E12               	movwf	___wmul@multiplicand+1,c
  2963  0015E6  0E03               	movlw	3
  2964  0015E8  6E11               	movwf	___wmul@multiplicand,c
  2965  0015EA  0E00               	movlw	0
  2966  0015EC  6E04               	movwf	___awmod@divisor+1,c
  2967  0015EE  0E0A               	movlw	10
  2968  0015F0  6E03               	movwf	___awmod@divisor,c
  2969  0015F2  C02D  F001         	movff	fround@prec,___awmod@dividend
  2970  0015F6  6A02               	clrf	___awmod@dividend+1,c
  2971  0015F8  ECE8  F00F         	call	___awmod	;wreg free
  2972  0015FC  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2973  001600  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2974  001604  ECB4  F011         	call	___wmul	;wreg free
  2975  001608  0E29               	movlw	low __npowers_
  2976  00160A  240F               	addwf	?___wmul,w,c
  2977  00160C  6EF6               	movwf	tblptrl,c
  2978  00160E  0E08               	movlw	high __npowers_
  2979  001610  2010               	addwfc	?___wmul+1,w,c
  2980  001612  6EF7               	movwf	tblptrh,c
  2981  001614                     	if	0	;There are less than 3 active tblptr bytes
  2982  001614                     	endif
  2983  001614  0009               	tblrd		*+
  2984  001616  CFF5 F018          	movff	tablat,___ftmul@f2
  2985  00161A  0009               	tblrd		*+
  2986  00161C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2987  001620  000A               	tblrd		*-
  2988  001622  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2989  001626  0E00               	movlw	0
  2990  001628  6E0A               	movwf	___awdiv@divisor+1,c
  2991  00162A  0E0A               	movlw	10
  2992  00162C  6E09               	movwf	___awdiv@divisor,c
  2993  00162E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2994  001632  6A08               	clrf	___awdiv@dividend+1,c
  2995  001634  EC0C  F00F         	call	___awdiv	;wreg free
  2996  001638  0E09               	movlw	9
  2997  00163A  2407               	addwf	?___awdiv,w,c
  2998  00163C  6E0F               	movwf	___wmul@multiplier,c
  2999  00163E  0E00               	movlw	0
  3000  001640  2008               	addwfc	?___awdiv+1,w,c
  3001  001642  6E10               	movwf	___wmul@multiplier+1,c
  3002  001644  0E00               	movlw	0
  3003  001646  6E12               	movwf	___wmul@multiplicand+1,c
  3004  001648  0E03               	movlw	3
  3005  00164A  6E11               	movwf	___wmul@multiplicand,c
  3006  00164C  ECB4  F011         	call	___wmul	;wreg free
  3007  001650  0E29               	movlw	low __npowers_
  3008  001652  240F               	addwf	?___wmul,w,c
  3009  001654  6EF6               	movwf	tblptrl,c
  3010  001656  0E08               	movlw	high __npowers_
  3011  001658  2010               	addwfc	?___wmul+1,w,c
  3012  00165A  6EF7               	movwf	tblptrh,c
  3013  00165C                     	if	0	;There are less than 3 active tblptr bytes
  3014  00165C                     	endif
  3015  00165C  0009               	tblrd		*+
  3016  00165E  CFF5 F015          	movff	tablat,___ftmul@f1
  3017  001662  0009               	tblrd		*+
  3018  001664  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3019  001668  000A               	tblrd		*-
  3020  00166A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3021  00166E  EC60  F00D         	call	___ftmul	;wreg free
  3022  001672  C015  F02A         	movff	?___ftmul,_fround$752
  3023  001676  C016  F02B         	movff	?___ftmul+1,_fround$752+1
  3024  00167A  C017  F02C         	movff	?___ftmul+2,_fround$752+2
  3025                           
  3026                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3027  00167E  C02A  F015         	movff	_fround$752,___ftmul@f1
  3028  001682  C02B  F016         	movff	_fround$752+1,___ftmul@f1+1
  3029  001686  C02C  F017         	movff	_fround$752+2,___ftmul@f1+2
  3030  00168A  0E00               	movlw	0
  3031  00168C  6E18               	movwf	___ftmul@f2,c
  3032  00168E  0E00               	movlw	0
  3033  001690  6E19               	movwf	___ftmul@f2+1,c
  3034  001692  0E3F               	movlw	63
  3035  001694  6E1A               	movwf	___ftmul@f2+2,c
  3036  001696  EC60  F00D         	call	___ftmul	;wreg free
  3037  00169A  D01B               	goto	L8
  3038  00169C  D021               	goto	l113
  3039  00169E  D000               	goto	l2034
  3040  0016A0                     l2034:
  3041                           
  3042                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3043  0016A0  502D               	movf	fround@prec,w,c
  3044  0016A2  0D03               	mullw	3
  3045  0016A4  0E29               	movlw	low __npowers_
  3046  0016A6  24F3               	addwf	prodl,w,c
  3047  0016A8  6EF6               	movwf	tblptrl,c
  3048  0016AA  0E08               	movlw	high __npowers_
  3049  0016AC  20F4               	addwfc	prodh,w,c
  3050  0016AE  6EF7               	movwf	tblptrh,c
  3051  0016B0                     	if	0	;There are less than 3 active tblptr bytes
  3052  0016B0                     	endif
  3053  0016B0  0009               	tblrd		*+
  3054  0016B2  CFF5 F015          	movff	tablat,___ftmul@f1
  3055  0016B6  0009               	tblrd		*+
  3056  0016B8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3057  0016BC  000A               	tblrd		*-
  3058  0016BE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3059  0016C2  0E00               	movlw	0
  3060  0016C4  6E18               	movwf	___ftmul@f2,c
  3061  0016C6  0E00               	movlw	0
  3062  0016C8  6E19               	movwf	___ftmul@f2+1,c
  3063  0016CA  0E3F               	movlw	63
  3064  0016CC  6E1A               	movwf	___ftmul@f2+2,c
  3065  0016CE  EC60  F00D         	call	___ftmul	;wreg free
  3066  0016D2                     L8:
  3067  0016D2  C015  F024         	movff	?___ftmul,?_fround
  3068  0016D6  C016  F025         	movff	?___ftmul+1,?_fround+1
  3069  0016DA  C017  F026         	movff	?___ftmul+2,?_fround+2
  3070  0016DE  D000               	goto	l113
  3071  0016E0                     l113:
  3072  0016E0  0012               	return		;funcret
  3073  0016E2                     __end_of_fround:
  3074                           	opt stack 0
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           prodh	equ	0xFF4
  3080                           prodl	equ	0xFF3
  3081                           wreg	equ	0xFE8
  3082                           indf2	equ	0xFDF
  3083                           postinc2	equ	0xFDE
  3084                           postdec2	equ	0xFDD
  3085                           fsr2h	equ	0xFDA
  3086                           fsr2l	equ	0xFD9
  3087                           status	equ	0xFD8
  3088                           
  3089 ;; *************** function ___wmul *****************
  3090 ;; Defined at:
  3091 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;  multiplier      2   14[COMRAM] unsigned int 
  3094 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  product         2   18[COMRAM] unsigned int 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  2   14[COMRAM] unsigned int 
  3099 ;; Registers used:
  3100 ;;		wreg, status,2, status,0, prodl, prodh
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3106 ;;      Params:         4       0       0       0       0       0       0       0       0
  3107 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3109 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3110 ;;Total ram usage:        6 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; This function calls:
  3113 ;;		Nothing
  3114 ;; This function is called by:
  3115 ;;		_fround
  3116 ;;		_scale
  3117 ;;		_sprintf
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text6
  3122  002368                     __ptext6:
  3123                           	opt stack 0
  3124  002368                     ___wmul:
  3125                           	opt stack 28
  3126                           
  3127                           ;incstack = 0
  3128  002368  500F               	movf	___wmul@multiplier,w,c
  3129  00236A  0211               	mulwf	___wmul@multiplicand,c
  3130  00236C  CFF3 F013          	movff	prodl,___wmul@product
  3131  002370  CFF4 F014          	movff	prodh,___wmul@product+1
  3132  002374  500F               	movf	___wmul@multiplier,w,c
  3133  002376  0212               	mulwf	___wmul@multiplicand+1,c
  3134  002378  50F3               	movf	prodl,w,c
  3135  00237A  2614               	addwf	___wmul@product+1,f,c
  3136  00237C  5010               	movf	___wmul@multiplier+1,w,c
  3137  00237E  0211               	mulwf	___wmul@multiplicand,c
  3138  002380  50F3               	movf	prodl,w,c
  3139  002382  2614               	addwf	___wmul@product+1,f,c
  3140  002384  C013  F00F         	movff	___wmul@product,?___wmul
  3141  002388  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3142  00238C  D000               	goto	l189
  3143  00238E                     l189:
  3144  00238E  0012               	return		;funcret
  3145  002390                     __end_of___wmul:
  3146                           	opt stack 0
  3147                           tblptru	equ	0xFF8
  3148                           tblptrh	equ	0xFF7
  3149                           tblptrl	equ	0xFF6
  3150                           tablat	equ	0xFF5
  3151                           prodh	equ	0xFF4
  3152                           prodl	equ	0xFF3
  3153                           wreg	equ	0xFE8
  3154                           indf2	equ	0xFDF
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function ___ftmul *****************
  3162 ;; Defined at:
  3163 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  f1              3   20[COMRAM] float 
  3166 ;;  f2              3   23[COMRAM] float 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3169 ;;  sign            1   34[COMRAM] unsigned char 
  3170 ;;  cntr            1   33[COMRAM] unsigned char 
  3171 ;;  exp             1   29[COMRAM] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  3   20[COMRAM] float 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3181 ;;      Params:         6       0       0       0       0       0       0       0       0
  3182 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3183 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3184 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3185 ;;Total ram usage:       15 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    1
  3188 ;; This function calls:
  3189 ;;		___ftpack
  3190 ;; This function is called by:
  3191 ;;		_main
  3192 ;;		_fround
  3193 ;;		_scale
  3194 ;;		_sprintf
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text7
  3199  001AC0                     __ptext7:
  3200                           	opt stack 0
  3201  001AC0                     ___ftmul:
  3202                           	opt stack 27
  3203                           
  3204                           ;incstack = 0
  3205  001AC0  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3206  001AC4  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3207  001AC6  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3208  001AC8  3416               	rlcf	___ftmul@f1+1,w,c
  3209  001ACA  361B               	rlcf	??___ftmul& (0+255),f,c
  3210  001ACC  E301               	bnc	u1751
  3211  001ACE  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3212  001AD0                     u1751:
  3213  001AD0  501B               	movf	??___ftmul,w,c
  3214  001AD2  6E1E               	movwf	___ftmul@exp,c
  3215  001AD4  501E               	movf	___ftmul@exp,w,c
  3216  001AD6  A4D8               	btfss	status,2,c
  3217  001AD8  D002               	goto	l1874
  3218  001ADA  D00E               	goto	l1876
  3219  001ADC  D06C               	goto	l618
  3220  001ADE                     l1874:
  3221  001ADE  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3222  001AE2  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3223  001AE4  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3224  001AE6  3419               	rlcf	___ftmul@f2+1,w,c
  3225  001AE8  361B               	rlcf	??___ftmul& (0+255),f,c
  3226  001AEA  E301               	bnc	u1771
  3227  001AEC  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3228  001AEE                     u1771:
  3229  001AEE  501B               	movf	??___ftmul,w,c
  3230  001AF0  6E23               	movwf	___ftmul@sign,c
  3231  001AF2  5023               	movf	___ftmul@sign,w,c
  3232  001AF4  A4D8               	btfss	status,2,c
  3233  001AF6  D007               	goto	l1880
  3234  001AF8                     l1876:
  3235  001AF8  0E00               	movlw	0
  3236  001AFA  6E15               	movwf	?___ftmul,c
  3237  001AFC  0E00               	movlw	0
  3238  001AFE  6E16               	movwf	?___ftmul+1,c
  3239  001B00  0E00               	movlw	0
  3240  001B02  6E17               	movwf	?___ftmul+2,c
  3241  001B04  D058               	goto	l618
  3242  001B06                     l1880:
  3243  001B06  5023               	movf	___ftmul@sign,w,c
  3244  001B08  0F7B               	addlw	123
  3245  001B0A  261E               	addwf	___ftmul@exp,f,c
  3246  001B0C  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3247  001B10  501A               	movf	___ftmul@f2+2,w,c
  3248  001B12  1A23               	xorwf	___ftmul@sign,f,c
  3249  001B14  0E80               	movlw	128
  3250  001B16  1623               	andwf	___ftmul@sign,f,c
  3251  001B18  8E16               	bsf	___ftmul@f1+1,7,c
  3252  001B1A  8E19               	bsf	___ftmul@f2+1,7,c
  3253  001B1C  0EFF               	movlw	255
  3254  001B1E  1618               	andwf	___ftmul@f2,f,c
  3255  001B20  0EFF               	movlw	255
  3256  001B22  1619               	andwf	___ftmul@f2+1,f,c
  3257  001B24  0E00               	movlw	0
  3258  001B26  161A               	andwf	___ftmul@f2+2,f,c
  3259  001B28  0E00               	movlw	0
  3260  001B2A  6E1F               	movwf	___ftmul@f3_as_product,c
  3261  001B2C  0E00               	movlw	0
  3262  001B2E  6E20               	movwf	___ftmul@f3_as_product+1,c
  3263  001B30  0E00               	movlw	0
  3264  001B32  6E21               	movwf	___ftmul@f3_as_product+2,c
  3265  001B34  0E07               	movlw	7
  3266  001B36  6E22               	movwf	___ftmul@cntr,c
  3267  001B38  D000               	goto	l1894
  3268  001B3A                     l1894:
  3269  001B3A  A015               	btfss	___ftmul@f1,0,c
  3270  001B3C  D007               	goto	l1898
  3271  001B3E  5018               	movf	___ftmul@f2,w,c
  3272  001B40  261F               	addwf	___ftmul@f3_as_product,f,c
  3273  001B42  5019               	movf	___ftmul@f2+1,w,c
  3274  001B44  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3275  001B46  501A               	movf	___ftmul@f2+2,w,c
  3276  001B48  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3277  001B4A  D000               	goto	l1898
  3278  001B4C                     l1898:
  3279  001B4C  90D8               	bcf	status,0,c
  3280  001B4E  3217               	rrcf	___ftmul@f1+2,f,c
  3281  001B50  3216               	rrcf	___ftmul@f1+1,f,c
  3282  001B52  3215               	rrcf	___ftmul@f1,f,c
  3283  001B54  90D8               	bcf	status,0,c
  3284  001B56  3618               	rlcf	___ftmul@f2,f,c
  3285  001B58  3619               	rlcf	___ftmul@f2+1,f,c
  3286  001B5A  361A               	rlcf	___ftmul@f2+2,f,c
  3287  001B5C  2E22               	decfsz	___ftmul@cntr,f,c
  3288  001B5E  D7ED               	goto	l1894
  3289  001B60  D000               	goto	l1902
  3290  001B62                     l1902:
  3291  001B62  0E09               	movlw	9
  3292  001B64  6E22               	movwf	___ftmul@cntr,c
  3293  001B66  D000               	goto	l1904
  3294  001B68                     l1904:
  3295  001B68  A015               	btfss	___ftmul@f1,0,c
  3296  001B6A  D007               	goto	l1908
  3297  001B6C  5018               	movf	___ftmul@f2,w,c
  3298  001B6E  261F               	addwf	___ftmul@f3_as_product,f,c
  3299  001B70  5019               	movf	___ftmul@f2+1,w,c
  3300  001B72  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3301  001B74  501A               	movf	___ftmul@f2+2,w,c
  3302  001B76  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3303  001B78  D000               	goto	l1908
  3304  001B7A                     l1908:
  3305  001B7A  90D8               	bcf	status,0,c
  3306  001B7C  3217               	rrcf	___ftmul@f1+2,f,c
  3307  001B7E  3216               	rrcf	___ftmul@f1+1,f,c
  3308  001B80  3215               	rrcf	___ftmul@f1,f,c
  3309  001B82  90D8               	bcf	status,0,c
  3310  001B84  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3311  001B86  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3312  001B88  321F               	rrcf	___ftmul@f3_as_product,f,c
  3313  001B8A  2E22               	decfsz	___ftmul@cntr,f,c
  3314  001B8C  D7ED               	goto	l1904
  3315  001B8E  D000               	goto	l1912
  3316  001B90                     l1912:
  3317  001B90  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3318  001B94  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3319  001B98  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3320  001B9C  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3321  001BA0  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3322  001BA4  EC4F  F00E         	call	___ftpack	;wreg free
  3323  001BA8  C001  F015         	movff	?___ftpack,?___ftmul
  3324  001BAC  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3325  001BB0  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3326  001BB4  D000               	goto	l618
  3327  001BB6                     l618:
  3328  001BB6  0012               	return		;funcret
  3329  001BB8                     __end_of___ftmul:
  3330                           	opt stack 0
  3331                           tblptru	equ	0xFF8
  3332                           tblptrh	equ	0xFF7
  3333                           tblptrl	equ	0xFF6
  3334                           tablat	equ	0xFF5
  3335                           prodh	equ	0xFF4
  3336                           prodl	equ	0xFF3
  3337                           wreg	equ	0xFE8
  3338                           indf2	equ	0xFDF
  3339                           postinc2	equ	0xFDE
  3340                           postdec2	equ	0xFDD
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function ___awmod *****************
  3346 ;; Defined at:
  3347 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  dividend        2    0[COMRAM] int 
  3350 ;;  divisor         2    2[COMRAM] int 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  sign            1    5[COMRAM] unsigned char 
  3353 ;;  counter         1    4[COMRAM] unsigned char 
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  2    0[COMRAM] int 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3363 ;;      Params:         4       0       0       0       0       0       0       0       0
  3364 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3366 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3367 ;;Total ram usage:        6 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; This function calls:
  3370 ;;		Nothing
  3371 ;; This function is called by:
  3372 ;;		_fround
  3373 ;;		_scale
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text8
  3378  001FD0                     __ptext8:
  3379                           	opt stack 0
  3380  001FD0                     ___awmod:
  3381                           	opt stack 28
  3382                           
  3383                           ;incstack = 0
  3384  001FD0  0E00               	movlw	0
  3385  001FD2  6E06               	movwf	___awmod@sign,c
  3386  001FD4  AE02               	btfss	___awmod@dividend+1,7,c
  3387  001FD6  D007               	goto	l1968
  3388  001FD8  6C01               	negf	___awmod@dividend,c
  3389  001FDA  1E02               	comf	___awmod@dividend+1,f,c
  3390  001FDC  B0D8               	btfsc	status,0,c
  3391  001FDE  2A02               	incf	___awmod@dividend+1,f,c
  3392  001FE0  0E01               	movlw	1
  3393  001FE2  6E06               	movwf	___awmod@sign,c
  3394  001FE4  D000               	goto	l1968
  3395  001FE6                     l1968:
  3396  001FE6  AE04               	btfss	___awmod@divisor+1,7,c
  3397  001FE8  D005               	goto	l1972
  3398  001FEA  6C03               	negf	___awmod@divisor,c
  3399  001FEC  1E04               	comf	___awmod@divisor+1,f,c
  3400  001FEE  B0D8               	btfsc	status,0,c
  3401  001FF0  2A04               	incf	___awmod@divisor+1,f,c
  3402  001FF2  D000               	goto	l1972
  3403  001FF4                     l1972:
  3404  001FF4  5003               	movf	___awmod@divisor,w,c
  3405  001FF6  1004               	iorwf	___awmod@divisor+1,w,c
  3406  001FF8  B4D8               	btfsc	status,2,c
  3407  001FFA  D01D               	goto	l1988
  3408  001FFC  0E01               	movlw	1
  3409  001FFE  6E05               	movwf	___awmod@counter,c
  3410  002000  D005               	goto	l1978
  3411  002002                     l1976:
  3412  002002  90D8               	bcf	status,0,c
  3413  002004  3603               	rlcf	___awmod@divisor,f,c
  3414  002006  3604               	rlcf	___awmod@divisor+1,f,c
  3415  002008  2A05               	incf	___awmod@counter,f,c
  3416  00200A  D000               	goto	l1978
  3417  00200C                     l1978:
  3418  00200C  BE04               	btfsc	___awmod@divisor+1,7,c
  3419  00200E  D002               	goto	l1980
  3420  002010  D7F8               	goto	l1976
  3421  002012  D000               	goto	l1980
  3422  002014                     l1980:
  3423  002014  5003               	movf	___awmod@divisor,w,c
  3424  002016  5C01               	subwf	___awmod@dividend,w,c
  3425  002018  5004               	movf	___awmod@divisor+1,w,c
  3426  00201A  5802               	subwfb	___awmod@dividend+1,w,c
  3427  00201C  A0D8               	btfss	status,0,c
  3428  00201E  D005               	goto	l1984
  3429  002020  5003               	movf	___awmod@divisor,w,c
  3430  002022  5E01               	subwf	___awmod@dividend,f,c
  3431  002024  5004               	movf	___awmod@divisor+1,w,c
  3432  002026  5A02               	subwfb	___awmod@dividend+1,f,c
  3433  002028  D000               	goto	l1984
  3434  00202A                     l1984:
  3435  00202A  90D8               	bcf	status,0,c
  3436  00202C  3204               	rrcf	___awmod@divisor+1,f,c
  3437  00202E  3203               	rrcf	___awmod@divisor,f,c
  3438  002030  2E05               	decfsz	___awmod@counter,f,c
  3439  002032  D7F0               	goto	l1980
  3440  002034  D000               	goto	l1988
  3441  002036                     l1988:
  3442  002036  5006               	movf	___awmod@sign,w,c
  3443  002038  B4D8               	btfsc	status,2,c
  3444  00203A  D005               	goto	l1992
  3445  00203C  6C01               	negf	___awmod@dividend,c
  3446  00203E  1E02               	comf	___awmod@dividend+1,f,c
  3447  002040  B0D8               	btfsc	status,0,c
  3448  002042  2A02               	incf	___awmod@dividend+1,f,c
  3449  002044  D000               	goto	l1992
  3450  002046                     l1992:
  3451  002046  C001  F001         	movff	___awmod@dividend,?___awmod
  3452  00204A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3453  00204E  D000               	goto	l395
  3454  002050                     l395:
  3455  002050  0012               	return		;funcret
  3456  002052                     __end_of___awmod:
  3457                           	opt stack 0
  3458                           tblptru	equ	0xFF8
  3459                           tblptrh	equ	0xFF7
  3460                           tblptrl	equ	0xFF6
  3461                           tablat	equ	0xFF5
  3462                           prodh	equ	0xFF4
  3463                           prodl	equ	0xFF3
  3464                           wreg	equ	0xFE8
  3465                           indf2	equ	0xFDF
  3466                           postinc2	equ	0xFDE
  3467                           postdec2	equ	0xFDD
  3468                           fsr2h	equ	0xFDA
  3469                           fsr2l	equ	0xFD9
  3470                           status	equ	0xFD8
  3471                           
  3472 ;; *************** function ___awdiv *****************
  3473 ;; Defined at:
  3474 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;  dividend        2    6[COMRAM] int 
  3477 ;;  divisor         2    8[COMRAM] int 
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  quotient        2   12[COMRAM] int 
  3480 ;;  sign            1   11[COMRAM] unsigned char 
  3481 ;;  counter         1   10[COMRAM] unsigned char 
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  2    6[COMRAM] int 
  3484 ;; Registers used:
  3485 ;;		wreg, status,2, status,0
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3491 ;;      Params:         4       0       0       0       0       0       0       0       0
  3492 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3493 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3494 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3495 ;;Total ram usage:        8 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_fround
  3501 ;;		_scale
  3502 ;;		_sprintf
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text9
  3507  001E18                     __ptext9:
  3508                           	opt stack 0
  3509  001E18                     ___awdiv:
  3510                           	opt stack 28
  3511                           
  3512                           ;incstack = 0
  3513  001E18  0E00               	movlw	0
  3514  001E1A  6E0C               	movwf	___awdiv@sign,c
  3515  001E1C  AE0A               	btfss	___awdiv@divisor+1,7,c
  3516  001E1E  D007               	goto	l1924
  3517  001E20  6C09               	negf	___awdiv@divisor,c
  3518  001E22  1E0A               	comf	___awdiv@divisor+1,f,c
  3519  001E24  B0D8               	btfsc	status,0,c
  3520  001E26  2A0A               	incf	___awdiv@divisor+1,f,c
  3521  001E28  0E01               	movlw	1
  3522  001E2A  6E0C               	movwf	___awdiv@sign,c
  3523  001E2C  D000               	goto	l1924
  3524  001E2E                     l1924:
  3525  001E2E  AE08               	btfss	___awdiv@dividend+1,7,c
  3526  001E30  D007               	goto	l1930
  3527  001E32  6C07               	negf	___awdiv@dividend,c
  3528  001E34  1E08               	comf	___awdiv@dividend+1,f,c
  3529  001E36  B0D8               	btfsc	status,0,c
  3530  001E38  2A08               	incf	___awdiv@dividend+1,f,c
  3531  001E3A  0E01               	movlw	1
  3532  001E3C  1A0C               	xorwf	___awdiv@sign,f,c
  3533  001E3E  D000               	goto	l1930
  3534  001E40                     l1930:
  3535  001E40  0E00               	movlw	0
  3536  001E42  6E0E               	movwf	___awdiv@quotient+1,c
  3537  001E44  0E00               	movlw	0
  3538  001E46  6E0D               	movwf	___awdiv@quotient,c
  3539  001E48  5009               	movf	___awdiv@divisor,w,c
  3540  001E4A  100A               	iorwf	___awdiv@divisor+1,w,c
  3541  001E4C  B4D8               	btfsc	status,2,c
  3542  001E4E  D021               	goto	l1952
  3543  001E50  0E01               	movlw	1
  3544  001E52  6E0B               	movwf	___awdiv@counter,c
  3545  001E54  D005               	goto	l1938
  3546  001E56                     l1936:
  3547  001E56  90D8               	bcf	status,0,c
  3548  001E58  3609               	rlcf	___awdiv@divisor,f,c
  3549  001E5A  360A               	rlcf	___awdiv@divisor+1,f,c
  3550  001E5C  2A0B               	incf	___awdiv@counter,f,c
  3551  001E5E  D000               	goto	l1938
  3552  001E60                     l1938:
  3553  001E60  BE0A               	btfsc	___awdiv@divisor+1,7,c
  3554  001E62  D002               	goto	l1940
  3555  001E64  D7F8               	goto	l1936
  3556  001E66  D000               	goto	l1940
  3557  001E68                     l1940:
  3558  001E68  90D8               	bcf	status,0,c
  3559  001E6A  360D               	rlcf	___awdiv@quotient,f,c
  3560  001E6C  360E               	rlcf	___awdiv@quotient+1,f,c
  3561  001E6E  5009               	movf	___awdiv@divisor,w,c
  3562  001E70  5C07               	subwf	___awdiv@dividend,w,c
  3563  001E72  500A               	movf	___awdiv@divisor+1,w,c
  3564  001E74  5808               	subwfb	___awdiv@dividend+1,w,c
  3565  001E76  A0D8               	btfss	status,0,c
  3566  001E78  D006               	goto	l1948
  3567  001E7A  5009               	movf	___awdiv@divisor,w,c
  3568  001E7C  5E07               	subwf	___awdiv@dividend,f,c
  3569  001E7E  500A               	movf	___awdiv@divisor+1,w,c
  3570  001E80  5A08               	subwfb	___awdiv@dividend+1,f,c
  3571  001E82  800D               	bsf	___awdiv@quotient,0,c
  3572  001E84  D000               	goto	l1948
  3573  001E86                     l1948:
  3574  001E86  90D8               	bcf	status,0,c
  3575  001E88  320A               	rrcf	___awdiv@divisor+1,f,c
  3576  001E8A  3209               	rrcf	___awdiv@divisor,f,c
  3577  001E8C  2E0B               	decfsz	___awdiv@counter,f,c
  3578  001E8E  D7EC               	goto	l1940
  3579  001E90  D000               	goto	l1952
  3580  001E92                     l1952:
  3581  001E92  500C               	movf	___awdiv@sign,w,c
  3582  001E94  B4D8               	btfsc	status,2,c
  3583  001E96  D005               	goto	l1956
  3584  001E98  6C0D               	negf	___awdiv@quotient,c
  3585  001E9A  1E0E               	comf	___awdiv@quotient+1,f,c
  3586  001E9C  B0D8               	btfsc	status,0,c
  3587  001E9E  2A0E               	incf	___awdiv@quotient+1,f,c
  3588  001EA0  D000               	goto	l1956
  3589  001EA2                     l1956:
  3590  001EA2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3591  001EA6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3592  001EAA  D000               	goto	l382
  3593  001EAC                     l382:
  3594  001EAC  0012               	return		;funcret
  3595  001EAE                     __end_of___awdiv:
  3596                           	opt stack 0
  3597                           tblptru	equ	0xFF8
  3598                           tblptrh	equ	0xFF7
  3599                           tblptrl	equ	0xFF6
  3600                           tablat	equ	0xFF5
  3601                           prodh	equ	0xFF4
  3602                           prodl	equ	0xFF3
  3603                           wreg	equ	0xFE8
  3604                           indf2	equ	0xFDF
  3605                           postinc2	equ	0xFDE
  3606                           postdec2	equ	0xFDD
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function __tdiv_to_l_ *****************
  3612 ;; Defined at:
  3613 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  f1              3    0[COMRAM] float 
  3616 ;;  f2              3    3[COMRAM] float 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  quot            4    9[COMRAM] unsigned long 
  3619 ;;  exp1            1   14[COMRAM] unsigned char 
  3620 ;;  cntr            1   13[COMRAM] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  4    0[COMRAM] unsigned long 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3630 ;;      Params:         6       0       0       0       0       0       0       0       0
  3631 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3632 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3633 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3634 ;;Total ram usage:       15 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; This function calls:
  3637 ;;		Nothing
  3638 ;; This function is called by:
  3639 ;;		_sprintf
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text10
  3644  0018A6                     __ptext10:
  3645                           	opt stack 0
  3646  0018A6                     __tdiv_to_l_:
  3647                           	opt stack 29
  3648                           
  3649                           ;incstack = 0
  3650  0018A6  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3651  0018AA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3652  0018AC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3653  0018AE  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3654  0018B0  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3655  0018B2  E301               	bnc	u2051
  3656  0018B4  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3657  0018B6                     u2051:
  3658  0018B6  5007               	movf	??__tdiv_to_l_,w,c
  3659  0018B8  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3660  0018BA  500F               	movf	__tdiv_to_l_@exp1,w,c
  3661  0018BC  A4D8               	btfss	status,2,c
  3662  0018BE  D002               	goto	l2094
  3663  0018C0  D05D               	goto	l2136
  3664  0018C2  D078               	goto	l594
  3665  0018C4                     l2094:
  3666  0018C4  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3667  0018C8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3668  0018CA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3669  0018CC  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3670  0018CE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3671  0018D0  E301               	bnc	u2071
  3672  0018D2  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3673  0018D4                     u2071:
  3674  0018D4  5007               	movf	??__tdiv_to_l_,w,c
  3675  0018D6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3676  0018D8  500E               	movf	__tdiv_to_l_@cntr,w,c
  3677  0018DA  A4D8               	btfss	status,2,c
  3678  0018DC  D002               	goto	l2100
  3679  0018DE  D04E               	goto	l2136
  3680  0018E0  D069               	goto	l594
  3681  0018E2                     l2100:
  3682  0018E2  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3683  0018E4  0EFF               	movlw	255
  3684  0018E6  1601               	andwf	__tdiv_to_l_@f1,f,c
  3685  0018E8  0EFF               	movlw	255
  3686  0018EA  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3687  0018EC  0E00               	movlw	0
  3688  0018EE  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3689  0018F0  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3690  0018F2  0EFF               	movlw	255
  3691  0018F4  1604               	andwf	__tdiv_to_l_@f2,f,c
  3692  0018F6  0EFF               	movlw	255
  3693  0018F8  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3694  0018FA  0E00               	movlw	0
  3695  0018FC  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3696  0018FE  0E00               	movlw	0
  3697  001900  6E0A               	movwf	__tdiv_to_l_@quot,c
  3698  001902  0E00               	movlw	0
  3699  001904  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3700  001906  0E00               	movlw	0
  3701  001908  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3702  00190A  0E00               	movlw	0
  3703  00190C  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3704  00190E  0E7F               	movlw	127
  3705  001910  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3706  001912  500E               	movf	__tdiv_to_l_@cntr,w,c
  3707  001914  0F98               	addlw	152
  3708  001916  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3709  001918  0E18               	movlw	24
  3710  00191A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3711  00191C                     l596:
  3712  00191C  90D8               	bcf	status,0,c
  3713  00191E  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3714  001920  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3715  001922  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3716  001924  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3717  001926  5004               	movf	__tdiv_to_l_@f2,w,c
  3718  001928  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3719  00192A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3720  00192C  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3721  00192E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3722  001930  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3723  001932  A0D8               	btfss	status,0,c
  3724  001934  D007               	goto	l597
  3725  001936  5004               	movf	__tdiv_to_l_@f2,w,c
  3726  001938  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3727  00193A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3728  00193C  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3729  00193E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3730  001940  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3731  001942  800A               	bsf	__tdiv_to_l_@quot,0,c
  3732  001944                     l597:
  3733  001944  90D8               	bcf	status,0,c
  3734  001946  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3735  001948  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3736  00194A  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3737  00194C  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3738  00194E  D7E6               	goto	l596
  3739  001950  D000               	goto	l2122
  3740  001952                     l2122:
  3741  001952  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3742  001954  D010               	goto	l2134
  3743  001956  500F               	movf	__tdiv_to_l_@exp1,w,c
  3744  001958  0A80               	xorlw	128
  3745  00195A  0F97               	addlw	151
  3746  00195C  B0D8               	btfsc	status,0,c
  3747  00195E  D003               	goto	l2130
  3748  001960  D00D               	goto	l2136
  3749  001962  D028               	goto	l594
  3750  001964  D000               	goto	l2130
  3751  001966                     l2130:
  3752  001966  90D8               	bcf	status,0,c
  3753  001968  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3754  00196A  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3755  00196C  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3756  00196E  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3757  001970  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3758  001972  D7F9               	goto	l2130
  3759  001974  D017               	goto	l603
  3760  001976                     l2134:
  3761  001976  0E17               	movlw	23
  3762  001978  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3763  00197A  D011               	goto	l2142
  3764  00197C                     l2136:
  3765  00197C  0E00               	movlw	0
  3766  00197E  6E01               	movwf	?__tdiv_to_l_,c
  3767  001980  0E00               	movlw	0
  3768  001982  6E02               	movwf	?__tdiv_to_l_+1,c
  3769  001984  0E00               	movlw	0
  3770  001986  6E03               	movwf	?__tdiv_to_l_+2,c
  3771  001988  0E00               	movlw	0
  3772  00198A  6E04               	movwf	?__tdiv_to_l_+3,c
  3773  00198C  D013               	goto	l594
  3774  00198E  D007               	goto	l2142
  3775  001990                     l2140:
  3776  001990  90D8               	bcf	status,0,c
  3777  001992  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3778  001994  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3779  001996  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3780  001998  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3781  00199A  060F               	decf	__tdiv_to_l_@exp1,f,c
  3782  00199C  D000               	goto	l2142
  3783  00199E                     l2142:
  3784  00199E  500F               	movf	__tdiv_to_l_@exp1,w,c
  3785  0019A0  A4D8               	btfss	status,2,c
  3786  0019A2  D7F6               	goto	l2140
  3787  0019A4                     l603:
  3788  0019A4  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3789  0019A8  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3790  0019AC  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3791  0019B0  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3792  0019B4                     l594:
  3793  0019B4  0012               	return		;funcret
  3794  0019B6                     __end_of__tdiv_to_l_:
  3795                           	opt stack 0
  3796                           tblptru	equ	0xFF8
  3797                           tblptrh	equ	0xFF7
  3798                           tblptrl	equ	0xFF6
  3799                           tablat	equ	0xFF5
  3800                           prodh	equ	0xFF4
  3801                           prodl	equ	0xFF3
  3802                           wreg	equ	0xFE8
  3803                           indf2	equ	0xFDF
  3804                           postinc2	equ	0xFDE
  3805                           postdec2	equ	0xFDD
  3806                           fsr2h	equ	0xFDA
  3807                           fsr2l	equ	0xFD9
  3808                           status	equ	0xFD8
  3809                           
  3810 ;; *************** function __div_to_l_ *****************
  3811 ;; Defined at:
  3812 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  f1              3    0[COMRAM] unsigned long 
  3815 ;;  f2              3    3[COMRAM] unsigned long 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  quot            4    6[COMRAM] unsigned long 
  3818 ;;  exp1            1   11[COMRAM] unsigned char 
  3819 ;;  cntr            1   10[COMRAM] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  4    0[COMRAM] unsigned long 
  3822 ;; Registers used:
  3823 ;;		wreg, status,2, status,0
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3829 ;;      Params:         6       0       0       0       0       0       0       0       0
  3830 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3832 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3833 ;;Total ram usage:       12 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; This function calls:
  3836 ;;		Nothing
  3837 ;; This function is called by:
  3838 ;;		_sprintf
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text11
  3843  0019B6                     __ptext11:
  3844                           	opt stack 0
  3845  0019B6                     __div_to_l_:
  3846                           	opt stack 29
  3847                           
  3848                           ;incstack = 0
  3849  0019B6  3403               	rlcf	__div_to_l_@f1+2,w,c
  3850  0019B8  3404               	rlcf	__div_to_l_@f1+3,w,c
  3851  0019BA  6E0C               	movwf	__div_to_l_@exp1,c
  3852  0019BC  500C               	movf	__div_to_l_@exp1,w,c
  3853  0019BE  A4D8               	btfss	status,2,c
  3854  0019C0  D002               	goto	l2150
  3855  0019C2  D061               	goto	l2196
  3856  0019C4  D07C               	goto	l473
  3857  0019C6                     l2150:
  3858  0019C6  3406               	rlcf	__div_to_l_@f2+2,w,c
  3859  0019C8  3407               	rlcf	__div_to_l_@f2+3,w,c
  3860  0019CA  6E0B               	movwf	__div_to_l_@cntr,c
  3861  0019CC  500B               	movf	__div_to_l_@cntr,w,c
  3862  0019CE  A4D8               	btfss	status,2,c
  3863  0019D0  D002               	goto	l2156
  3864  0019D2  D059               	goto	l2196
  3865  0019D4  D074               	goto	l473
  3866  0019D6                     l2156:
  3867  0019D6  8E03               	bsf	__div_to_l_@f1+2,7,c
  3868  0019D8  0EFF               	movlw	255
  3869  0019DA  1601               	andwf	__div_to_l_@f1,f,c
  3870  0019DC  0EFF               	movlw	255
  3871  0019DE  1602               	andwf	__div_to_l_@f1+1,f,c
  3872  0019E0  0EFF               	movlw	255
  3873  0019E2  1603               	andwf	__div_to_l_@f1+2,f,c
  3874  0019E4  0E00               	movlw	0
  3875  0019E6  1604               	andwf	__div_to_l_@f1+3,f,c
  3876  0019E8  8E06               	bsf	__div_to_l_@f2+2,7,c
  3877  0019EA  0EFF               	movlw	255
  3878  0019EC  1604               	andwf	__div_to_l_@f2,f,c
  3879  0019EE  0EFF               	movlw	255
  3880  0019F0  1605               	andwf	__div_to_l_@f2+1,f,c
  3881  0019F2  0EFF               	movlw	255
  3882  0019F4  1606               	andwf	__div_to_l_@f2+2,f,c
  3883  0019F6  0E00               	movlw	0
  3884  0019F8  1607               	andwf	__div_to_l_@f2+3,f,c
  3885  0019FA  0E00               	movlw	0
  3886  0019FC  6E07               	movwf	__div_to_l_@quot,c
  3887  0019FE  0E00               	movlw	0
  3888  001A00  6E08               	movwf	__div_to_l_@quot+1,c
  3889  001A02  0E00               	movlw	0
  3890  001A04  6E09               	movwf	__div_to_l_@quot+2,c
  3891  001A06  0E00               	movlw	0
  3892  001A08  6E0A               	movwf	__div_to_l_@quot+3,c
  3893  001A0A  0E7F               	movlw	127
  3894  001A0C  5E0C               	subwf	__div_to_l_@exp1,f,c
  3895  001A0E  500B               	movf	__div_to_l_@cntr,w,c
  3896  001A10  0FA0               	addlw	160
  3897  001A12  5E0C               	subwf	__div_to_l_@exp1,f,c
  3898  001A14  0E20               	movlw	32
  3899  001A16  6E0B               	movwf	__div_to_l_@cntr,c
  3900  001A18  D000               	goto	l2170
  3901  001A1A                     l2170:
  3902  001A1A  90D8               	bcf	status,0,c
  3903  001A1C  3607               	rlcf	__div_to_l_@quot,f,c
  3904  001A1E  3608               	rlcf	__div_to_l_@quot+1,f,c
  3905  001A20  3609               	rlcf	__div_to_l_@quot+2,f,c
  3906  001A22  360A               	rlcf	__div_to_l_@quot+3,f,c
  3907  001A24  5004               	movf	__div_to_l_@f2,w,c
  3908  001A26  5C01               	subwf	__div_to_l_@f1,w,c
  3909  001A28  5005               	movf	__div_to_l_@f2+1,w,c
  3910  001A2A  5802               	subwfb	__div_to_l_@f1+1,w,c
  3911  001A2C  5006               	movf	__div_to_l_@f2+2,w,c
  3912  001A2E  5803               	subwfb	__div_to_l_@f1+2,w,c
  3913  001A30  5007               	movf	__div_to_l_@f2+3,w,c
  3914  001A32  5804               	subwfb	__div_to_l_@f1+3,w,c
  3915  001A34  A0D8               	btfss	status,0,c
  3916  001A36  D00A               	goto	l2178
  3917  001A38  5004               	movf	__div_to_l_@f2,w,c
  3918  001A3A  5E01               	subwf	__div_to_l_@f1,f,c
  3919  001A3C  5005               	movf	__div_to_l_@f2+1,w,c
  3920  001A3E  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3921  001A40  5006               	movf	__div_to_l_@f2+2,w,c
  3922  001A42  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3923  001A44  5007               	movf	__div_to_l_@f2+3,w,c
  3924  001A46  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3925  001A48  8007               	bsf	__div_to_l_@quot,0,c
  3926  001A4A  D000               	goto	l2178
  3927  001A4C                     l2178:
  3928  001A4C  90D8               	bcf	status,0,c
  3929  001A4E  3601               	rlcf	__div_to_l_@f1,f,c
  3930  001A50  3602               	rlcf	__div_to_l_@f1+1,f,c
  3931  001A52  3603               	rlcf	__div_to_l_@f1+2,f,c
  3932  001A54  3604               	rlcf	__div_to_l_@f1+3,f,c
  3933  001A56  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3934  001A58  D7E0               	goto	l2170
  3935  001A5A  D000               	goto	l2182
  3936  001A5C                     l2182:
  3937  001A5C  AE0C               	btfss	__div_to_l_@exp1,7,c
  3938  001A5E  D010               	goto	l2194
  3939  001A60  500C               	movf	__div_to_l_@exp1,w,c
  3940  001A62  0A80               	xorlw	128
  3941  001A64  0F9F               	addlw	159
  3942  001A66  B0D8               	btfsc	status,0,c
  3943  001A68  D003               	goto	l2190
  3944  001A6A  D00D               	goto	l2196
  3945  001A6C  D028               	goto	l473
  3946  001A6E  D000               	goto	l2190
  3947  001A70                     l2190:
  3948  001A70  90D8               	bcf	status,0,c
  3949  001A72  320A               	rrcf	__div_to_l_@quot+3,f,c
  3950  001A74  3209               	rrcf	__div_to_l_@quot+2,f,c
  3951  001A76  3208               	rrcf	__div_to_l_@quot+1,f,c
  3952  001A78  3207               	rrcf	__div_to_l_@quot,f,c
  3953  001A7A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3954  001A7C  D7F9               	goto	l2190
  3955  001A7E  D017               	goto	l482
  3956  001A80                     l2194:
  3957  001A80  0E1F               	movlw	31
  3958  001A82  640C               	cpfsgt	__div_to_l_@exp1,c
  3959  001A84  D011               	goto	l2202
  3960  001A86                     l2196:
  3961  001A86  0E00               	movlw	0
  3962  001A88  6E01               	movwf	?__div_to_l_,c
  3963  001A8A  0E00               	movlw	0
  3964  001A8C  6E02               	movwf	?__div_to_l_+1,c
  3965  001A8E  0E00               	movlw	0
  3966  001A90  6E03               	movwf	?__div_to_l_+2,c
  3967  001A92  0E00               	movlw	0
  3968  001A94  6E04               	movwf	?__div_to_l_+3,c
  3969  001A96  D013               	goto	l473
  3970  001A98  D007               	goto	l2202
  3971  001A9A                     l2200:
  3972  001A9A  90D8               	bcf	status,0,c
  3973  001A9C  3607               	rlcf	__div_to_l_@quot,f,c
  3974  001A9E  3608               	rlcf	__div_to_l_@quot+1,f,c
  3975  001AA0  3609               	rlcf	__div_to_l_@quot+2,f,c
  3976  001AA2  360A               	rlcf	__div_to_l_@quot+3,f,c
  3977  001AA4  060C               	decf	__div_to_l_@exp1,f,c
  3978  001AA6  D000               	goto	l2202
  3979  001AA8                     l2202:
  3980  001AA8  500C               	movf	__div_to_l_@exp1,w,c
  3981  001AAA  A4D8               	btfss	status,2,c
  3982  001AAC  D7F6               	goto	l2200
  3983  001AAE                     l482:
  3984  001AAE  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3985  001AB2  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3986  001AB6  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3987  001ABA  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3988  001ABE                     l473:
  3989  001ABE  0012               	return		;funcret
  3990  001AC0                     __end_of__div_to_l_:
  3991                           	opt stack 0
  3992                           tblptru	equ	0xFF8
  3993                           tblptrh	equ	0xFF7
  3994                           tblptrl	equ	0xFF6
  3995                           tablat	equ	0xFF5
  3996                           prodh	equ	0xFF4
  3997                           prodl	equ	0xFF3
  3998                           wreg	equ	0xFE8
  3999                           indf2	equ	0xFDF
  4000                           postinc2	equ	0xFDE
  4001                           postdec2	equ	0xFDD
  4002                           fsr2h	equ	0xFDA
  4003                           fsr2l	equ	0xFD9
  4004                           status	equ	0xFD8
  4005                           
  4006 ;; *************** function ___lltoft *****************
  4007 ;; Defined at:
  4008 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;  c               4    8[COMRAM] unsigned long 
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;  exp             1   16[COMRAM] unsigned char 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  3    8[COMRAM] float 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4022 ;;      Params:         4       0       0       0       0       0       0       0       0
  4023 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4024 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4025 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4026 ;;Total ram usage:        9 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    1
  4029 ;; This function calls:
  4030 ;;		___ftpack
  4031 ;; This function is called by:
  4032 ;;		_sprintf
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text12
  4037  002140                     __ptext12:
  4038                           	opt stack 0
  4039  002140                     ___lltoft:
  4040                           	opt stack 28
  4041                           
  4042                           ;incstack = 0
  4043  002140  0E8E               	movlw	142
  4044  002142  6E11               	movwf	___lltoft@exp,c
  4045  002144  D007               	goto	l2322
  4046  002146                     l2320:
  4047  002146  90D8               	bcf	status,0,c
  4048  002148  320C               	rrcf	___lltoft@c+3,f,c
  4049  00214A  320B               	rrcf	___lltoft@c+2,f,c
  4050  00214C  320A               	rrcf	___lltoft@c+1,f,c
  4051  00214E  3209               	rrcf	___lltoft@c,f,c
  4052  002150  2A11               	incf	___lltoft@exp,f,c
  4053  002152  D000               	goto	l2322
  4054  002154                     l2322:
  4055  002154  0E00               	movlw	0
  4056  002156  1409               	andwf	___lltoft@c,w,c
  4057  002158  6E0D               	movwf	??___lltoft& (0+255),c
  4058  00215A  0E00               	movlw	0
  4059  00215C  140A               	andwf	___lltoft@c+1,w,c
  4060  00215E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4061  002160  0E00               	movlw	0
  4062  002162  140B               	andwf	___lltoft@c+2,w,c
  4063  002164  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4064  002166  0EFF               	movlw	255
  4065  002168  140C               	andwf	___lltoft@c+3,w,c
  4066  00216A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4067  00216C  500D               	movf	??___lltoft,w,c
  4068  00216E  100E               	iorwf	??___lltoft+1,w,c
  4069  002170  100F               	iorwf	??___lltoft+2,w,c
  4070  002172  1010               	iorwf	??___lltoft+3,w,c
  4071  002174  A4D8               	btfss	status,2,c
  4072  002176  D7E7               	goto	l2320
  4073  002178  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4074  00217C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4075  002180  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4076  002184  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4077  002188  0E00               	movlw	0
  4078  00218A  6E05               	movwf	___ftpack@sign,c
  4079  00218C  EC4F  F00E         	call	___ftpack	;wreg free
  4080  002190  C001  F009         	movff	?___ftpack,?___lltoft
  4081  002194  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4082  002198  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4083  00219C  D000               	goto	l713
  4084  00219E                     l713:
  4085  00219E  0012               	return		;funcret
  4086  0021A0                     __end_of___lltoft:
  4087                           	opt stack 0
  4088                           tblptru	equ	0xFF8
  4089                           tblptrh	equ	0xFF7
  4090                           tblptrl	equ	0xFF6
  4091                           tablat	equ	0xFF5
  4092                           prodh	equ	0xFF4
  4093                           prodl	equ	0xFF3
  4094                           wreg	equ	0xFE8
  4095                           indf2	equ	0xFDF
  4096                           postinc2	equ	0xFDE
  4097                           postdec2	equ	0xFDD
  4098                           fsr2h	equ	0xFDA
  4099                           fsr2l	equ	0xFD9
  4100                           status	equ	0xFD8
  4101                           
  4102 ;; *************** function ___llmod *****************
  4103 ;; Defined at:
  4104 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  dividend        4    0[COMRAM] unsigned long 
  4107 ;;  divisor         4    4[COMRAM] unsigned long 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  counter         1    8[COMRAM] unsigned char 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  4    0[COMRAM] unsigned long 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4119 ;;      Params:         8       0       0       0       0       0       0       0       0
  4120 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4122 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4123 ;;Total ram usage:        9 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_sprintf
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text13
  4133  0020D0                     __ptext13:
  4134                           	opt stack 0
  4135  0020D0                     ___llmod:
  4136                           	opt stack 29
  4137                           
  4138                           ;incstack = 0
  4139  0020D0  5005               	movf	___llmod@divisor,w,c
  4140  0020D2  1006               	iorwf	___llmod@divisor+1,w,c
  4141  0020D4  1007               	iorwf	___llmod@divisor+2,w,c
  4142  0020D6  1008               	iorwf	___llmod@divisor+3,w,c
  4143  0020D8  B4D8               	btfsc	status,2,c
  4144  0020DA  D029               	goto	l693
  4145  0020DC  0E01               	movlw	1
  4146  0020DE  6E09               	movwf	___llmod@counter,c
  4147  0020E0  D007               	goto	l2308
  4148  0020E2                     l2306:
  4149  0020E2  90D8               	bcf	status,0,c
  4150  0020E4  3605               	rlcf	___llmod@divisor,f,c
  4151  0020E6  3606               	rlcf	___llmod@divisor+1,f,c
  4152  0020E8  3607               	rlcf	___llmod@divisor+2,f,c
  4153  0020EA  3608               	rlcf	___llmod@divisor+3,f,c
  4154  0020EC  2A09               	incf	___llmod@counter,f,c
  4155  0020EE  D000               	goto	l2308
  4156  0020F0                     l2308:
  4157  0020F0  BE08               	btfsc	___llmod@divisor+3,7,c
  4158  0020F2  D002               	goto	l2310
  4159  0020F4  D7F6               	goto	l2306
  4160  0020F6  D000               	goto	l2310
  4161  0020F8                     l2310:
  4162  0020F8  5005               	movf	___llmod@divisor,w,c
  4163  0020FA  5C01               	subwf	___llmod@dividend,w,c
  4164  0020FC  5006               	movf	___llmod@divisor+1,w,c
  4165  0020FE  5802               	subwfb	___llmod@dividend+1,w,c
  4166  002100  5007               	movf	___llmod@divisor+2,w,c
  4167  002102  5803               	subwfb	___llmod@dividend+2,w,c
  4168  002104  5008               	movf	___llmod@divisor+3,w,c
  4169  002106  5804               	subwfb	___llmod@dividend+3,w,c
  4170  002108  A0D8               	btfss	status,0,c
  4171  00210A  D009               	goto	l2314
  4172  00210C  5005               	movf	___llmod@divisor,w,c
  4173  00210E  5E01               	subwf	___llmod@dividend,f,c
  4174  002110  5006               	movf	___llmod@divisor+1,w,c
  4175  002112  5A02               	subwfb	___llmod@dividend+1,f,c
  4176  002114  5007               	movf	___llmod@divisor+2,w,c
  4177  002116  5A03               	subwfb	___llmod@dividend+2,f,c
  4178  002118  5008               	movf	___llmod@divisor+3,w,c
  4179  00211A  5A04               	subwfb	___llmod@dividend+3,f,c
  4180  00211C  D000               	goto	l2314
  4181  00211E                     l2314:
  4182  00211E  90D8               	bcf	status,0,c
  4183  002120  3208               	rrcf	___llmod@divisor+3,f,c
  4184  002122  3207               	rrcf	___llmod@divisor+2,f,c
  4185  002124  3206               	rrcf	___llmod@divisor+1,f,c
  4186  002126  3205               	rrcf	___llmod@divisor,f,c
  4187  002128  2E09               	decfsz	___llmod@counter,f,c
  4188  00212A  D7E6               	goto	l2310
  4189  00212C  D000               	goto	l693
  4190  00212E                     l693:
  4191  00212E  C001  F001         	movff	___llmod@dividend,?___llmod
  4192  002132  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4193  002136  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4194  00213A  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4195  00213E  0012               	return		;funcret
  4196  002140                     __end_of___llmod:
  4197                           	opt stack 0
  4198                           tblptru	equ	0xFF8
  4199                           tblptrh	equ	0xFF7
  4200                           tblptrl	equ	0xFF6
  4201                           tablat	equ	0xFF5
  4202                           prodh	equ	0xFF4
  4203                           prodl	equ	0xFF3
  4204                           wreg	equ	0xFE8
  4205                           indf2	equ	0xFDF
  4206                           postinc2	equ	0xFDE
  4207                           postdec2	equ	0xFDD
  4208                           fsr2h	equ	0xFDA
  4209                           fsr2l	equ	0xFD9
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function ___lldiv *****************
  4213 ;; Defined at:
  4214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  dividend        4    0[COMRAM] unsigned long 
  4217 ;;  divisor         4    4[COMRAM] unsigned long 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  quotient        4    8[COMRAM] unsigned long 
  4220 ;;  counter         1   12[COMRAM] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  4    0[COMRAM] unsigned long 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4230 ;;      Params:         8       0       0       0       0       0       0       0       0
  4231 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4232 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4233 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4234 ;;Total ram usage:       13 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_sprintf
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           	psect	text14
  4244  001F44                     __ptext14:
  4245                           	opt stack 0
  4246  001F44                     ___lldiv:
  4247                           	opt stack 29
  4248                           
  4249                           ;incstack = 0
  4250  001F44  0E00               	movlw	0
  4251  001F46  6E09               	movwf	___lldiv@quotient,c
  4252  001F48  0E00               	movlw	0
  4253  001F4A  6E0A               	movwf	___lldiv@quotient+1,c
  4254  001F4C  0E00               	movlw	0
  4255  001F4E  6E0B               	movwf	___lldiv@quotient+2,c
  4256  001F50  0E00               	movlw	0
  4257  001F52  6E0C               	movwf	___lldiv@quotient+3,c
  4258  001F54  5005               	movf	___lldiv@divisor,w,c
  4259  001F56  1006               	iorwf	___lldiv@divisor+1,w,c
  4260  001F58  1007               	iorwf	___lldiv@divisor+2,w,c
  4261  001F5A  1008               	iorwf	___lldiv@divisor+3,w,c
  4262  001F5C  B4D8               	btfsc	status,2,c
  4263  001F5E  D02F               	goto	l683
  4264  001F60  0E01               	movlw	1
  4265  001F62  6E0D               	movwf	___lldiv@counter,c
  4266  001F64  D007               	goto	l2288
  4267  001F66                     l2286:
  4268  001F66  90D8               	bcf	status,0,c
  4269  001F68  3605               	rlcf	___lldiv@divisor,f,c
  4270  001F6A  3606               	rlcf	___lldiv@divisor+1,f,c
  4271  001F6C  3607               	rlcf	___lldiv@divisor+2,f,c
  4272  001F6E  3608               	rlcf	___lldiv@divisor+3,f,c
  4273  001F70  2A0D               	incf	___lldiv@counter,f,c
  4274  001F72  D000               	goto	l2288
  4275  001F74                     l2288:
  4276  001F74  BE08               	btfsc	___lldiv@divisor+3,7,c
  4277  001F76  D002               	goto	l2290
  4278  001F78  D7F6               	goto	l2286
  4279  001F7A  D000               	goto	l2290
  4280  001F7C                     l2290:
  4281  001F7C  90D8               	bcf	status,0,c
  4282  001F7E  3609               	rlcf	___lldiv@quotient,f,c
  4283  001F80  360A               	rlcf	___lldiv@quotient+1,f,c
  4284  001F82  360B               	rlcf	___lldiv@quotient+2,f,c
  4285  001F84  360C               	rlcf	___lldiv@quotient+3,f,c
  4286  001F86  5005               	movf	___lldiv@divisor,w,c
  4287  001F88  5C01               	subwf	___lldiv@dividend,w,c
  4288  001F8A  5006               	movf	___lldiv@divisor+1,w,c
  4289  001F8C  5802               	subwfb	___lldiv@dividend+1,w,c
  4290  001F8E  5007               	movf	___lldiv@divisor+2,w,c
  4291  001F90  5803               	subwfb	___lldiv@dividend+2,w,c
  4292  001F92  5008               	movf	___lldiv@divisor+3,w,c
  4293  001F94  5804               	subwfb	___lldiv@dividend+3,w,c
  4294  001F96  A0D8               	btfss	status,0,c
  4295  001F98  D00A               	goto	l2298
  4296  001F9A  5005               	movf	___lldiv@divisor,w,c
  4297  001F9C  5E01               	subwf	___lldiv@dividend,f,c
  4298  001F9E  5006               	movf	___lldiv@divisor+1,w,c
  4299  001FA0  5A02               	subwfb	___lldiv@dividend+1,f,c
  4300  001FA2  5007               	movf	___lldiv@divisor+2,w,c
  4301  001FA4  5A03               	subwfb	___lldiv@dividend+2,f,c
  4302  001FA6  5008               	movf	___lldiv@divisor+3,w,c
  4303  001FA8  5A04               	subwfb	___lldiv@dividend+3,f,c
  4304  001FAA  8009               	bsf	___lldiv@quotient,0,c
  4305  001FAC  D000               	goto	l2298
  4306  001FAE                     l2298:
  4307  001FAE  90D8               	bcf	status,0,c
  4308  001FB0  3208               	rrcf	___lldiv@divisor+3,f,c
  4309  001FB2  3207               	rrcf	___lldiv@divisor+2,f,c
  4310  001FB4  3206               	rrcf	___lldiv@divisor+1,f,c
  4311  001FB6  3205               	rrcf	___lldiv@divisor,f,c
  4312  001FB8  2E0D               	decfsz	___lldiv@counter,f,c
  4313  001FBA  D7E0               	goto	l2290
  4314  001FBC  D000               	goto	l683
  4315  001FBE                     l683:
  4316  001FBE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4317  001FC2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4318  001FC6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4319  001FCA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4320  001FCE  0012               	return		;funcret
  4321  001FD0                     __end_of___lldiv:
  4322                           	opt stack 0
  4323                           tblptru	equ	0xFF8
  4324                           tblptrh	equ	0xFF7
  4325                           tblptrl	equ	0xFF6
  4326                           tablat	equ	0xFF5
  4327                           prodh	equ	0xFF4
  4328                           prodl	equ	0xFF3
  4329                           wreg	equ	0xFE8
  4330                           indf2	equ	0xFDF
  4331                           postinc2	equ	0xFDE
  4332                           postdec2	equ	0xFDD
  4333                           fsr2h	equ	0xFDA
  4334                           fsr2l	equ	0xFD9
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function ___fttol *****************
  4338 ;; Defined at:
  4339 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  f1              3   42[COMRAM] float 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  lval            4   52[COMRAM] unsigned long 
  4344 ;;  exp1            1   56[COMRAM] unsigned char 
  4345 ;;  sign1           1   51[COMRAM] unsigned char 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  4   42[COMRAM] long 
  4348 ;; Registers used:
  4349 ;;		wreg, status,2, status,0
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4355 ;;      Params:         4       0       0       0       0       0       0       0       0
  4356 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4357 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4358 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4359 ;;Total ram usage:       15 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_sprintf
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text15
  4369  001BB8                     __ptext15:
  4370                           	opt stack 0
  4371  001BB8                     ___fttol:
  4372                           	opt stack 29
  4373                           
  4374                           ;incstack = 0
  4375  001BB8  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4376  001BBC  6A30               	clrf	(??___fttol+1)& (0+255),c
  4377  001BBE  6A31               	clrf	(??___fttol+2)& (0+255),c
  4378  001BC0  342C               	rlcf	___fttol@f1+1,w,c
  4379  001BC2  362F               	rlcf	??___fttol& (0+255),f,c
  4380  001BC4  E301               	bnc	u2261
  4381  001BC6  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4382  001BC8                     u2261:
  4383  001BC8  502F               	movf	??___fttol,w,c
  4384  001BCA  6E39               	movwf	___fttol@exp1,c
  4385  001BCC  5039               	movf	___fttol@exp1,w,c
  4386  001BCE  A4D8               	btfss	status,2,c
  4387  001BD0  D002               	goto	l2240
  4388  001BD2  D039               	goto	l2264
  4389  001BD4  D063               	goto	l639
  4390  001BD6                     l2240:
  4391  001BD6  0E17               	movlw	23
  4392  001BD8  6E2F               	movwf	??___fttol& (0+255),c
  4393  001BDA  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4394  001BDE  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4395  001BE2  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4396  001BE6  282F               	incf	??___fttol,w,c
  4397  001BE8  6E33               	movwf	(??___fttol+4)& (0+255),c
  4398  001BEA  D004               	goto	u2280
  4399  001BEC                     u2285:
  4400  001BEC  90D8               	bcf	status,0,c
  4401  001BEE  3232               	rrcf	??___fttol+3,f,c
  4402  001BF0  3231               	rrcf	??___fttol+2,f,c
  4403  001BF2  3230               	rrcf	??___fttol+1,f,c
  4404  001BF4                     u2280:
  4405  001BF4  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4406  001BF6  D7FA               	goto	u2285
  4407  001BF8  5030               	movf	??___fttol+1,w,c
  4408  001BFA  6E34               	movwf	___fttol@sign1,c
  4409  001BFC  8E2C               	bsf	___fttol@f1+1,7,c
  4410  001BFE  0EFF               	movlw	255
  4411  001C00  162B               	andwf	___fttol@f1,f,c
  4412  001C02  0EFF               	movlw	255
  4413  001C04  162C               	andwf	___fttol@f1+1,f,c
  4414  001C06  0E00               	movlw	0
  4415  001C08  162D               	andwf	___fttol@f1+2,f,c
  4416  001C0A  502B               	movf	___fttol@f1,w,c
  4417  001C0C  6E35               	movwf	___fttol@lval,c
  4418  001C0E  502C               	movf	___fttol@f1+1,w,c
  4419  001C10  6E36               	movwf	___fttol@lval+1,c
  4420  001C12  502D               	movf	___fttol@f1+2,w,c
  4421  001C14  6E37               	movwf	___fttol@lval+2,c
  4422  001C16  6A38               	clrf	___fttol@lval+3,c
  4423  001C18  0E8E               	movlw	142
  4424  001C1A  5E39               	subwf	___fttol@exp1,f,c
  4425  001C1C  AE39               	btfss	___fttol@exp1,7,c
  4426  001C1E  D010               	goto	l2262
  4427  001C20  5039               	movf	___fttol@exp1,w,c
  4428  001C22  0A80               	xorlw	128
  4429  001C24  0F8F               	addlw	143
  4430  001C26  B0D8               	btfsc	status,0,c
  4431  001C28  D003               	goto	l2258
  4432  001C2A  D00D               	goto	l2264
  4433  001C2C  D037               	goto	l639
  4434  001C2E  D000               	goto	l2258
  4435  001C30                     l2258:
  4436  001C30  90D8               	bcf	status,0,c
  4437  001C32  3238               	rrcf	___fttol@lval+3,f,c
  4438  001C34  3237               	rrcf	___fttol@lval+2,f,c
  4439  001C36  3236               	rrcf	___fttol@lval+1,f,c
  4440  001C38  3235               	rrcf	___fttol@lval,f,c
  4441  001C3A  3E39               	incfsz	___fttol@exp1,f,c
  4442  001C3C  D7F9               	goto	l2258
  4443  001C3E  D019               	goto	l2272
  4444  001C40                     l2262:
  4445  001C40  0E17               	movlw	23
  4446  001C42  6439               	cpfsgt	___fttol@exp1,c
  4447  001C44  D011               	goto	l2270
  4448  001C46                     l2264:
  4449  001C46  0E00               	movlw	0
  4450  001C48  6E2B               	movwf	?___fttol,c
  4451  001C4A  0E00               	movlw	0
  4452  001C4C  6E2C               	movwf	?___fttol+1,c
  4453  001C4E  0E00               	movlw	0
  4454  001C50  6E2D               	movwf	?___fttol+2,c
  4455  001C52  0E00               	movlw	0
  4456  001C54  6E2E               	movwf	?___fttol+3,c
  4457  001C56  D022               	goto	l639
  4458  001C58  D007               	goto	l2270
  4459  001C5A                     l2268:
  4460  001C5A  90D8               	bcf	status,0,c
  4461  001C5C  3635               	rlcf	___fttol@lval,f,c
  4462  001C5E  3636               	rlcf	___fttol@lval+1,f,c
  4463  001C60  3637               	rlcf	___fttol@lval+2,f,c
  4464  001C62  3638               	rlcf	___fttol@lval+3,f,c
  4465  001C64  0639               	decf	___fttol@exp1,f,c
  4466  001C66  D000               	goto	l2270
  4467  001C68                     l2270:
  4468  001C68  5039               	movf	___fttol@exp1,w,c
  4469  001C6A  B4D8               	btfsc	status,2,c
  4470  001C6C  D002               	goto	l2272
  4471  001C6E  D7F5               	goto	l2268
  4472  001C70  D000               	goto	l2272
  4473  001C72                     l2272:
  4474  001C72  5034               	movf	___fttol@sign1,w,c
  4475  001C74  B4D8               	btfsc	status,2,c
  4476  001C76  D009               	goto	l2276
  4477  001C78  1E38               	comf	___fttol@lval+3,f,c
  4478  001C7A  1E37               	comf	___fttol@lval+2,f,c
  4479  001C7C  1E36               	comf	___fttol@lval+1,f,c
  4480  001C7E  6C35               	negf	___fttol@lval,c
  4481  001C80  0E00               	movlw	0
  4482  001C82  2236               	addwfc	___fttol@lval+1,f,c
  4483  001C84  2237               	addwfc	___fttol@lval+2,f,c
  4484  001C86  2238               	addwfc	___fttol@lval+3,f,c
  4485  001C88  D000               	goto	l2276
  4486  001C8A                     l2276:
  4487  001C8A  C035  F02B         	movff	___fttol@lval,?___fttol
  4488  001C8E  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4489  001C92  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4490  001C96  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4491  001C9A  D000               	goto	l639
  4492  001C9C                     l639:
  4493  001C9C  0012               	return		;funcret
  4494  001C9E                     __end_of___fttol:
  4495                           	opt stack 0
  4496                           tblptru	equ	0xFF8
  4497                           tblptrh	equ	0xFF7
  4498                           tblptrl	equ	0xFF6
  4499                           tablat	equ	0xFF5
  4500                           prodh	equ	0xFF4
  4501                           prodl	equ	0xFF3
  4502                           wreg	equ	0xFE8
  4503                           indf2	equ	0xFDF
  4504                           postinc2	equ	0xFDE
  4505                           postdec2	equ	0xFDD
  4506                           fsr2h	equ	0xFDA
  4507                           fsr2l	equ	0xFD9
  4508                           status	equ	0xFD8
  4509                           
  4510 ;; *************** function ___ftsub *****************
  4511 ;; Defined at:
  4512 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;  f1              3   57[COMRAM] float 
  4515 ;;  f2              3   60[COMRAM] float 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;		None
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  3   57[COMRAM] float 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4527 ;;      Params:         6       0       0       0       0       0       0       0       0
  4528 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4530 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4531 ;;Total ram usage:        6 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    2
  4534 ;; This function calls:
  4535 ;;		___ftadd
  4536 ;; This function is called by:
  4537 ;;		_sprintf
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           	psect	text16
  4542  00223E                     __ptext16:
  4543                           	opt stack 0
  4544  00223E                     ___ftsub:
  4545                           	opt stack 27
  4546                           
  4547                           ;incstack = 0
  4548  00223E  503D               	movf	___ftsub@f2,w,c
  4549  002240  103E               	iorwf	___ftsub@f2+1,w,c
  4550  002242  103F               	iorwf	___ftsub@f2+2,w,c
  4551  002244  B4D8               	btfsc	status,2,c
  4552  002246  D007               	goto	l2208
  4553  002248  0E00               	movlw	0
  4554  00224A  1A3D               	xorwf	___ftsub@f2,f,c
  4555  00224C  0E00               	movlw	0
  4556  00224E  1A3E               	xorwf	___ftsub@f2+1,f,c
  4557  002250  0E80               	movlw	128
  4558  002252  1A3F               	xorwf	___ftsub@f2+2,f,c
  4559  002254  D000               	goto	l2208
  4560  002256                     l2208:
  4561  002256  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4562  00225A  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4563  00225E  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4564  002262  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4565  002266  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4566  00226A  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4567  00226E  EC71  F00B         	call	___ftadd	;wreg free
  4568  002272  C02E  F03A         	movff	?___ftadd,?___ftsub
  4569  002276  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4570  00227A  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4571  00227E  D000               	goto	l635
  4572  002280                     l635:
  4573  002280  0012               	return		;funcret
  4574  002282                     __end_of___ftsub:
  4575                           	opt stack 0
  4576                           tblptru	equ	0xFF8
  4577                           tblptrh	equ	0xFF7
  4578                           tblptrl	equ	0xFF6
  4579                           tablat	equ	0xFF5
  4580                           prodh	equ	0xFF4
  4581                           prodl	equ	0xFF3
  4582                           wreg	equ	0xFE8
  4583                           indf2	equ	0xFDF
  4584                           postinc2	equ	0xFDE
  4585                           postdec2	equ	0xFDD
  4586                           fsr2h	equ	0xFDA
  4587                           fsr2l	equ	0xFD9
  4588                           status	equ	0xFD8
  4589                           
  4590 ;; *************** function ___ftadd *****************
  4591 ;; Defined at:
  4592 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  f1              3   45[COMRAM] float 
  4595 ;;  f2              3   48[COMRAM] float 
  4596 ;; Auto vars:     Size  Location     Type
  4597 ;;  exp1            1   56[COMRAM] unsigned char 
  4598 ;;  exp2            1   55[COMRAM] unsigned char 
  4599 ;;  sign            1   54[COMRAM] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  3   45[COMRAM] float 
  4602 ;; Registers used:
  4603 ;;		wreg, status,2, status,0, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4609 ;;      Params:         6       0       0       0       0       0       0       0       0
  4610 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4611 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4612 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4613 ;;Total ram usage:       12 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    1
  4616 ;; This function calls:
  4617 ;;		___ftpack
  4618 ;; This function is called by:
  4619 ;;		_sprintf
  4620 ;;		___ftsub
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           	psect	text17
  4625  0016E2                     __ptext17:
  4626                           	opt stack 0
  4627  0016E2                     ___ftadd:
  4628                           	opt stack 27
  4629                           
  4630                           ;incstack = 0
  4631  0016E2  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4632  0016E6  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4633  0016E8  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4634  0016EA  342F               	rlcf	___ftadd@f1+1,w,c
  4635  0016EC  3634               	rlcf	??___ftadd& (0+255),f,c
  4636  0016EE  E301               	bnc	u1541
  4637  0016F0  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4638  0016F2                     u1541:
  4639  0016F2  5034               	movf	??___ftadd,w,c
  4640  0016F4  6E39               	movwf	___ftadd@exp1,c
  4641  0016F6  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4642  0016FA  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4643  0016FC  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4644  0016FE  3432               	rlcf	___ftadd@f2+1,w,c
  4645  001700  3634               	rlcf	??___ftadd& (0+255),f,c
  4646  001702  E301               	bnc	u1551
  4647  001704  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4648  001706                     u1551:
  4649  001706  5034               	movf	??___ftadd,w,c
  4650  001708  6E38               	movwf	___ftadd@exp2,c
  4651  00170A  5039               	movf	___ftadd@exp1,w,c
  4652  00170C  B4D8               	btfsc	status,2,c
  4653  00170E  D00B               	goto	l554
  4654  001710  5038               	movf	___ftadd@exp2,w,c
  4655  001712  5C39               	subwf	___ftadd@exp1,w,c
  4656  001714  B0D8               	btfsc	status,0,c
  4657  001716  D00E               	goto	l1806
  4658  001718  5039               	movf	___ftadd@exp1,w,c
  4659  00171A  0800               	sublw	0
  4660  00171C  2438               	addwf	___ftadd@exp2,w,c
  4661  00171E  6E34               	movwf	??___ftadd& (0+255),c
  4662  001720  0E18               	movlw	24
  4663  001722  6434               	cpfsgt	??___ftadd,c
  4664  001724  D007               	goto	l1806
  4665  001726                     l554:
  4666  001726  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4667  00172A  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4668  00172E  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4669  001732  D0B8               	goto	l555
  4670  001734                     l1806:
  4671  001734  5038               	movf	___ftadd@exp2,w,c
  4672  001736  B4D8               	btfsc	status,2,c
  4673  001738  D00B               	goto	l558
  4674  00173A  5039               	movf	___ftadd@exp1,w,c
  4675  00173C  5C38               	subwf	___ftadd@exp2,w,c
  4676  00173E  B0D8               	btfsc	status,0,c
  4677  001740  D00E               	goto	l1812
  4678  001742  5038               	movf	___ftadd@exp2,w,c
  4679  001744  0800               	sublw	0
  4680  001746  2439               	addwf	___ftadd@exp1,w,c
  4681  001748  6E34               	movwf	??___ftadd& (0+255),c
  4682  00174A  0E18               	movlw	24
  4683  00174C  6434               	cpfsgt	??___ftadd,c
  4684  00174E  D007               	goto	l1812
  4685  001750                     l558:
  4686  001750  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4687  001754  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4688  001758  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4689  00175C  D0A3               	goto	l555
  4690  00175E                     l1812:
  4691  00175E  0E06               	movlw	6
  4692  001760  6E37               	movwf	___ftadd@sign,c
  4693  001762  AE30               	btfss	___ftadd@f1+2,7,c
  4694  001764  D002               	goto	l1818
  4695  001766  8E37               	bsf	___ftadd@sign,7,c
  4696  001768  D000               	goto	l1818
  4697  00176A                     l1818:
  4698  00176A  BE33               	btfsc	___ftadd@f2+2,7,c
  4699  00176C  8C37               	bsf	___ftadd@sign,6,c
  4700  00176E  8E2F               	bsf	___ftadd@f1+1,7,c
  4701  001770  0EFF               	movlw	255
  4702  001772  162E               	andwf	___ftadd@f1,f,c
  4703  001774  0EFF               	movlw	255
  4704  001776  162F               	andwf	___ftadd@f1+1,f,c
  4705  001778  0E00               	movlw	0
  4706  00177A  1630               	andwf	___ftadd@f1+2,f,c
  4707  00177C  8E32               	bsf	___ftadd@f2+1,7,c
  4708  00177E  0EFF               	movlw	255
  4709  001780  1631               	andwf	___ftadd@f2,f,c
  4710  001782  0EFF               	movlw	255
  4711  001784  1632               	andwf	___ftadd@f2+1,f,c
  4712  001786  0E00               	movlw	0
  4713  001788  1633               	andwf	___ftadd@f2+2,f,c
  4714  00178A  5038               	movf	___ftadd@exp2,w,c
  4715  00178C  5C39               	subwf	___ftadd@exp1,w,c
  4716  00178E  B0D8               	btfsc	status,0,c
  4717  001790  D01E               	goto	l1838
  4718  001792                     l1828:
  4719  001792  90D8               	bcf	status,0,c
  4720  001794  3631               	rlcf	___ftadd@f2,f,c
  4721  001796  3632               	rlcf	___ftadd@f2+1,f,c
  4722  001798  3633               	rlcf	___ftadd@f2+2,f,c
  4723  00179A  0638               	decf	___ftadd@exp2,f,c
  4724  00179C  5039               	movf	___ftadd@exp1,w,c
  4725  00179E  1838               	xorwf	___ftadd@exp2,w,c
  4726  0017A0  B4D8               	btfsc	status,2,c
  4727  0017A2  D00F               	goto	l1836
  4728  0017A4  0637               	decf	___ftadd@sign,f,c
  4729  0017A6  C037  F034         	movff	___ftadd@sign,??___ftadd
  4730  0017AA  0E07               	movlw	7
  4731  0017AC  1634               	andwf	??___ftadd,f,c
  4732  0017AE  B4D8               	btfsc	status,2,c
  4733  0017B0  D008               	goto	l1836
  4734  0017B2  D7EF               	goto	l1828
  4735  0017B4  D006               	goto	l1836
  4736  0017B6                     l1834:
  4737  0017B6  90D8               	bcf	status,0,c
  4738  0017B8  3230               	rrcf	___ftadd@f1+2,f,c
  4739  0017BA  322F               	rrcf	___ftadd@f1+1,f,c
  4740  0017BC  322E               	rrcf	___ftadd@f1,f,c
  4741  0017BE  2A39               	incf	___ftadd@exp1,f,c
  4742  0017C0  D000               	goto	l1836
  4743  0017C2                     l1836:
  4744  0017C2  5038               	movf	___ftadd@exp2,w,c
  4745  0017C4  1839               	xorwf	___ftadd@exp1,w,c
  4746  0017C6  B4D8               	btfsc	status,2,c
  4747  0017C8  D024               	goto	l569
  4748  0017CA  D7F5               	goto	l1834
  4749  0017CC  D022               	goto	l569
  4750  0017CE                     l1838:
  4751  0017CE  5039               	movf	___ftadd@exp1,w,c
  4752  0017D0  5C38               	subwf	___ftadd@exp2,w,c
  4753  0017D2  B0D8               	btfsc	status,0,c
  4754  0017D4  D01E               	goto	l569
  4755  0017D6                     l1840:
  4756  0017D6  90D8               	bcf	status,0,c
  4757  0017D8  362E               	rlcf	___ftadd@f1,f,c
  4758  0017DA  362F               	rlcf	___ftadd@f1+1,f,c
  4759  0017DC  3630               	rlcf	___ftadd@f1+2,f,c
  4760  0017DE  0639               	decf	___ftadd@exp1,f,c
  4761  0017E0  5039               	movf	___ftadd@exp1,w,c
  4762  0017E2  1838               	xorwf	___ftadd@exp2,w,c
  4763  0017E4  B4D8               	btfsc	status,2,c
  4764  0017E6  D00F               	goto	l1848
  4765  0017E8  0637               	decf	___ftadd@sign,f,c
  4766  0017EA  C037  F034         	movff	___ftadd@sign,??___ftadd
  4767  0017EE  0E07               	movlw	7
  4768  0017F0  1634               	andwf	??___ftadd,f,c
  4769  0017F2  B4D8               	btfsc	status,2,c
  4770  0017F4  D008               	goto	l1848
  4771  0017F6  D7EF               	goto	l1840
  4772  0017F8  D006               	goto	l1848
  4773  0017FA                     l1846:
  4774  0017FA  90D8               	bcf	status,0,c
  4775  0017FC  3233               	rrcf	___ftadd@f2+2,f,c
  4776  0017FE  3232               	rrcf	___ftadd@f2+1,f,c
  4777  001800  3231               	rrcf	___ftadd@f2,f,c
  4778  001802  2A38               	incf	___ftadd@exp2,f,c
  4779  001804  D000               	goto	l1848
  4780  001806                     l1848:
  4781  001806  5038               	movf	___ftadd@exp2,w,c
  4782  001808  1839               	xorwf	___ftadd@exp1,w,c
  4783  00180A  B4D8               	btfsc	status,2,c
  4784  00180C  D002               	goto	l569
  4785  00180E  D7F5               	goto	l1846
  4786  001810  D000               	goto	l569
  4787  001812                     l569:
  4788  001812  AE37               	btfss	___ftadd@sign,7,c
  4789  001814  D00C               	goto	l578
  4790  001816  0EFF               	movlw	255
  4791  001818  1A2E               	xorwf	___ftadd@f1,f,c
  4792  00181A  0EFF               	movlw	255
  4793  00181C  1A2F               	xorwf	___ftadd@f1+1,f,c
  4794  00181E  0EFF               	movlw	255
  4795  001820  1A30               	xorwf	___ftadd@f1+2,f,c
  4796  001822  0E01               	movlw	1
  4797  001824  262E               	addwf	___ftadd@f1,f,c
  4798  001826  0E00               	movlw	0
  4799  001828  222F               	addwfc	___ftadd@f1+1,f,c
  4800  00182A  0E00               	movlw	0
  4801  00182C  2230               	addwfc	___ftadd@f1+2,f,c
  4802  00182E                     l578:
  4803  00182E  AC37               	btfss	___ftadd@sign,6,c
  4804  001830  D00D               	goto	l1854
  4805  001832  0EFF               	movlw	255
  4806  001834  1A31               	xorwf	___ftadd@f2,f,c
  4807  001836  0EFF               	movlw	255
  4808  001838  1A32               	xorwf	___ftadd@f2+1,f,c
  4809  00183A  0EFF               	movlw	255
  4810  00183C  1A33               	xorwf	___ftadd@f2+2,f,c
  4811  00183E  0E01               	movlw	1
  4812  001840  2631               	addwf	___ftadd@f2,f,c
  4813  001842  0E00               	movlw	0
  4814  001844  2232               	addwfc	___ftadd@f2+1,f,c
  4815  001846  0E00               	movlw	0
  4816  001848  2233               	addwfc	___ftadd@f2+2,f,c
  4817  00184A  D000               	goto	l1854
  4818  00184C                     l1854:
  4819  00184C  0E00               	movlw	0
  4820  00184E  6E37               	movwf	___ftadd@sign,c
  4821  001850  502E               	movf	___ftadd@f1,w,c
  4822  001852  2631               	addwf	___ftadd@f2,f,c
  4823  001854  502F               	movf	___ftadd@f1+1,w,c
  4824  001856  2232               	addwfc	___ftadd@f2+1,f,c
  4825  001858  5030               	movf	___ftadd@f1+2,w,c
  4826  00185A  2233               	addwfc	___ftadd@f2+2,f,c
  4827  00185C  AE33               	btfss	___ftadd@f2+2,7,c
  4828  00185E  D00F               	goto	l1864
  4829  001860  0EFF               	movlw	255
  4830  001862  1A31               	xorwf	___ftadd@f2,f,c
  4831  001864  0EFF               	movlw	255
  4832  001866  1A32               	xorwf	___ftadd@f2+1,f,c
  4833  001868  0EFF               	movlw	255
  4834  00186A  1A33               	xorwf	___ftadd@f2+2,f,c
  4835  00186C  0E01               	movlw	1
  4836  00186E  2631               	addwf	___ftadd@f2,f,c
  4837  001870  0E00               	movlw	0
  4838  001872  2232               	addwfc	___ftadd@f2+1,f,c
  4839  001874  0E00               	movlw	0
  4840  001876  2233               	addwfc	___ftadd@f2+2,f,c
  4841  001878  0E01               	movlw	1
  4842  00187A  6E37               	movwf	___ftadd@sign,c
  4843  00187C  D000               	goto	l1864
  4844  00187E                     l1864:
  4845  00187E  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4846  001882  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4847  001886  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4848  00188A  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4849  00188E  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4850  001892  EC4F  F00E         	call	___ftpack	;wreg free
  4851  001896  C001  F02E         	movff	?___ftpack,?___ftadd
  4852  00189A  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4853  00189E  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4854  0018A2  D000               	goto	l555
  4855  0018A4                     l555:
  4856  0018A4  0012               	return		;funcret
  4857  0018A6                     __end_of___ftadd:
  4858                           	opt stack 0
  4859                           tblptru	equ	0xFF8
  4860                           tblptrh	equ	0xFF7
  4861                           tblptrl	equ	0xFF6
  4862                           tablat	equ	0xFF5
  4863                           prodh	equ	0xFF4
  4864                           prodl	equ	0xFF3
  4865                           wreg	equ	0xFE8
  4866                           indf2	equ	0xFDF
  4867                           postinc2	equ	0xFDE
  4868                           postdec2	equ	0xFDD
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873 ;; *************** function ___ftneg *****************
  4874 ;; Defined at:
  4875 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;  f1              3    0[COMRAM] float 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  3    0[COMRAM] float 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4889 ;;      Params:         3       0       0       0       0       0       0       0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4892 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4893 ;;Total ram usage:        3 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_sprintf
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text18
  4903  0023DC                     __ptext18:
  4904                           	opt stack 0
  4905  0023DC                     ___ftneg:
  4906                           	opt stack 29
  4907                           
  4908                           ;incstack = 0
  4909  0023DC  5001               	movf	___ftneg@f1,w,c
  4910  0023DE  1002               	iorwf	___ftneg@f1+1,w,c
  4911  0023E0  1003               	iorwf	___ftneg@f1+2,w,c
  4912  0023E2  B4D8               	btfsc	status,2,c
  4913  0023E4  D006               	goto	l628
  4914  0023E6  0E00               	movlw	0
  4915  0023E8  1A01               	xorwf	___ftneg@f1,f,c
  4916  0023EA  0E00               	movlw	0
  4917  0023EC  1A02               	xorwf	___ftneg@f1+1,f,c
  4918  0023EE  0E80               	movlw	128
  4919  0023F0  1A03               	xorwf	___ftneg@f1+2,f,c
  4920  0023F2                     l628:
  4921  0023F2  C001  F001         	movff	___ftneg@f1,?___ftneg
  4922  0023F6  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4923  0023FA  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4924  0023FE  0012               	return		;funcret
  4925  002400                     __end_of___ftneg:
  4926                           	opt stack 0
  4927                           tblptru	equ	0xFF8
  4928                           tblptrh	equ	0xFF7
  4929                           tblptrl	equ	0xFF6
  4930                           tablat	equ	0xFF5
  4931                           prodh	equ	0xFF4
  4932                           prodl	equ	0xFF3
  4933                           wreg	equ	0xFE8
  4934                           indf2	equ	0xFDF
  4935                           postinc2	equ	0xFDE
  4936                           postdec2	equ	0xFDD
  4937                           fsr2h	equ	0xFDA
  4938                           fsr2l	equ	0xFD9
  4939                           status	equ	0xFD8
  4940                           
  4941 ;; *************** function ___ftge *****************
  4942 ;; Defined at:
  4943 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;  ff1             3    0[COMRAM] float 
  4946 ;;  ff2             3    3[COMRAM] float 
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;		None
  4949 ;; Return value:  Size  Location     Type
  4950 ;;		None               void
  4951 ;; Registers used:
  4952 ;;		wreg, status,2, status,0
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4958 ;;      Params:         6       0       0       0       0       0       0       0       0
  4959 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4960 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4961 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4962 ;;Total ram usage:        9 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		_sprintf
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           	psect	text19
  4972  001EAE                     __ptext19:
  4973                           	opt stack 0
  4974  001EAE                     ___ftge:
  4975                           	opt stack 29
  4976                           
  4977                           ;incstack = 0
  4978  001EAE  AE03               	btfss	___ftge@ff1+2,7,c
  4979  001EB0  D017               	goto	l2216
  4980  001EB2  C001  F007         	movff	___ftge@ff1,??___ftge
  4981  001EB6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4982  001EBA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4983  001EBE  1E07               	comf	??___ftge,f,c
  4984  001EC0  1E08               	comf	??___ftge+1,f,c
  4985  001EC2  1E09               	comf	??___ftge+2,f,c
  4986  001EC4  2A07               	incf	??___ftge,f,c
  4987  001EC6  0E00               	movlw	0
  4988  001EC8  2208               	addwfc	??___ftge+1,f,c
  4989  001ECA  2209               	addwfc	??___ftge+2,f,c
  4990  001ECC  0E00               	movlw	0
  4991  001ECE  2407               	addwf	??___ftge,w,c
  4992  001ED0  6E01               	movwf	___ftge@ff1,c
  4993  001ED2  0E00               	movlw	0
  4994  001ED4  2008               	addwfc	??___ftge+1,w,c
  4995  001ED6  6E02               	movwf	___ftge@ff1+1,c
  4996  001ED8  0E80               	movlw	128
  4997  001EDA  2009               	addwfc	??___ftge+2,w,c
  4998  001EDC  6E03               	movwf	___ftge@ff1+2,c
  4999  001EDE  D000               	goto	l2216
  5000  001EE0                     l2216:
  5001  001EE0  AE06               	btfss	___ftge@ff2+2,7,c
  5002  001EE2  D017               	goto	l2220
  5003  001EE4  C004  F007         	movff	___ftge@ff2,??___ftge
  5004  001EE8  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5005  001EEC  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5006  001EF0  1E07               	comf	??___ftge,f,c
  5007  001EF2  1E08               	comf	??___ftge+1,f,c
  5008  001EF4  1E09               	comf	??___ftge+2,f,c
  5009  001EF6  2A07               	incf	??___ftge,f,c
  5010  001EF8  0E00               	movlw	0
  5011  001EFA  2208               	addwfc	??___ftge+1,f,c
  5012  001EFC  2209               	addwfc	??___ftge+2,f,c
  5013  001EFE  0E00               	movlw	0
  5014  001F00  2407               	addwf	??___ftge,w,c
  5015  001F02  6E04               	movwf	___ftge@ff2,c
  5016  001F04  0E00               	movlw	0
  5017  001F06  2008               	addwfc	??___ftge+1,w,c
  5018  001F08  6E05               	movwf	___ftge@ff2+1,c
  5019  001F0A  0E80               	movlw	128
  5020  001F0C  2009               	addwfc	??___ftge+2,w,c
  5021  001F0E  6E06               	movwf	___ftge@ff2+2,c
  5022  001F10  D000               	goto	l2220
  5023  001F12                     l2220:
  5024  001F12  0E00               	movlw	0
  5025  001F14  1A01               	xorwf	___ftge@ff1,f,c
  5026  001F16  0E00               	movlw	0
  5027  001F18  1A02               	xorwf	___ftge@ff1+1,f,c
  5028  001F1A  0E80               	movlw	128
  5029  001F1C  1A03               	xorwf	___ftge@ff1+2,f,c
  5030  001F1E  0E00               	movlw	0
  5031  001F20  1A04               	xorwf	___ftge@ff2,f,c
  5032  001F22  0E00               	movlw	0
  5033  001F24  1A05               	xorwf	___ftge@ff2+1,f,c
  5034  001F26  0E80               	movlw	128
  5035  001F28  1A06               	xorwf	___ftge@ff2+2,f,c
  5036  001F2A  5004               	movf	___ftge@ff2,w,c
  5037  001F2C  5C01               	subwf	___ftge@ff1,w,c
  5038  001F2E  5005               	movf	___ftge@ff2+1,w,c
  5039  001F30  5802               	subwfb	___ftge@ff1+1,w,c
  5040  001F32  5006               	movf	___ftge@ff2+2,w,c
  5041  001F34  5803               	subwfb	___ftge@ff1+2,w,c
  5042  001F36  B0D8               	btfsc	status,0,c
  5043  001F38  D002               	goto	l2226
  5044  001F3A  90D8               	bcf	status,0,c
  5045  001F3C  D002               	goto	l612
  5046  001F3E                     l2226:
  5047  001F3E  80D8               	bsf	status,0,c
  5048  001F40  D000               	goto	l612
  5049  001F42                     l612:
  5050  001F42  0012               	return		;funcret
  5051  001F44                     __end_of___ftge:
  5052                           	opt stack 0
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           wreg	equ	0xFE8
  5060                           indf2	equ	0xFDF
  5061                           postinc2	equ	0xFDE
  5062                           postdec2	equ	0xFDD
  5063                           fsr2h	equ	0xFDA
  5064                           fsr2l	equ	0xFD9
  5065                           status	equ	0xFD8
  5066                           
  5067 ;; *************** function ___awtoft *****************
  5068 ;; Defined at:
  5069 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;  c               2    8[COMRAM] int 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  sign            1   11[COMRAM] unsigned char 
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  3    8[COMRAM] float 
  5076 ;; Registers used:
  5077 ;;		wreg, status,2, status,0, cstack
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5083 ;;      Params:         3       0       0       0       0       0       0       0       0
  5084 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5085 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5086 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5087 ;;Total ram usage:        4 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    1
  5090 ;; This function calls:
  5091 ;;		___ftpack
  5092 ;; This function is called by:
  5093 ;;		_main
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           	psect	text20
  5098  0022C0                     __ptext20:
  5099                           	opt stack 0
  5100  0022C0                     ___awtoft:
  5101                           	opt stack 29
  5102                           
  5103                           ;incstack = 0
  5104  0022C0  0E00               	movlw	0
  5105  0022C2  6E0C               	movwf	___awtoft@sign,c
  5106  0022C4  AE0A               	btfss	___awtoft@c+1,7,c
  5107  0022C6  D007               	goto	l2590
  5108  0022C8  6C09               	negf	___awtoft@c,c
  5109  0022CA  1E0A               	comf	___awtoft@c+1,f,c
  5110  0022CC  B0D8               	btfsc	status,0,c
  5111  0022CE  2A0A               	incf	___awtoft@c+1,f,c
  5112  0022D0  0E01               	movlw	1
  5113  0022D2  6E0C               	movwf	___awtoft@sign,c
  5114  0022D4  D000               	goto	l2590
  5115  0022D6                     l2590:
  5116  0022D6  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5117  0022DA  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5118  0022DE  6A03               	clrf	___ftpack@arg+2,c
  5119  0022E0  0E8E               	movlw	142
  5120  0022E2  6E04               	movwf	___ftpack@exp,c
  5121  0022E4  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5122  0022E8  EC4F  F00E         	call	___ftpack	;wreg free
  5123  0022EC  C001  F009         	movff	?___ftpack,?___awtoft
  5124  0022F0  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5125  0022F4  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5126  0022F8  D000               	goto	l407
  5127  0022FA                     l407:
  5128  0022FA  0012               	return		;funcret
  5129  0022FC                     __end_of___awtoft:
  5130                           	opt stack 0
  5131                           tblptru	equ	0xFF8
  5132                           tblptrh	equ	0xFF7
  5133                           tblptrl	equ	0xFF6
  5134                           tablat	equ	0xFF5
  5135                           prodh	equ	0xFF4
  5136                           prodl	equ	0xFF3
  5137                           wreg	equ	0xFE8
  5138                           indf2	equ	0xFDF
  5139                           postinc2	equ	0xFDE
  5140                           postdec2	equ	0xFDD
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function ___ftpack *****************
  5146 ;; Defined at:
  5147 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;  arg             3    0[COMRAM] unsigned um
  5150 ;;  exp             1    3[COMRAM] unsigned char 
  5151 ;;  sign            1    4[COMRAM] unsigned char 
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  3    0[COMRAM] float 
  5156 ;; Registers used:
  5157 ;;		wreg, status,2, status,0
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5163 ;;      Params:         5       0       0       0       0       0       0       0       0
  5164 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5165 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5166 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5167 ;;Total ram usage:        8 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; This function calls:
  5170 ;;		Nothing
  5171 ;; This function is called by:
  5172 ;;		___awtoft
  5173 ;;		___ftadd
  5174 ;;		___ftmul
  5175 ;;		___lltoft
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text21
  5180  001C9E                     __ptext21:
  5181                           	opt stack 0
  5182  001C9E                     ___ftpack:
  5183                           	opt stack 27
  5184                           
  5185                           ;incstack = 0
  5186  001C9E  5004               	movf	___ftpack@exp,w,c
  5187  001CA0  B4D8               	btfsc	status,2,c
  5188  001CA2  D005               	goto	l1748
  5189  001CA4  5001               	movf	___ftpack@arg,w,c
  5190  001CA6  1002               	iorwf	___ftpack@arg+1,w,c
  5191  001CA8  1003               	iorwf	___ftpack@arg+2,w,c
  5192  001CAA  A4D8               	btfss	status,2,c
  5193  001CAC  D00E               	goto	l1754
  5194  001CAE                     l1748:
  5195  001CAE  0E00               	movlw	0
  5196  001CB0  6E01               	movwf	?___ftpack,c
  5197  001CB2  0E00               	movlw	0
  5198  001CB4  6E02               	movwf	?___ftpack+1,c
  5199  001CB6  0E00               	movlw	0
  5200  001CB8  6E03               	movwf	?___ftpack+2,c
  5201  001CBA  D053               	goto	l514
  5202  001CBC  D006               	goto	l1754
  5203  001CBE                     l1752:
  5204  001CBE  2A04               	incf	___ftpack@exp,f,c
  5205  001CC0  90D8               	bcf	status,0,c
  5206  001CC2  3203               	rrcf	___ftpack@arg+2,f,c
  5207  001CC4  3202               	rrcf	___ftpack@arg+1,f,c
  5208  001CC6  3201               	rrcf	___ftpack@arg,f,c
  5209  001CC8  D000               	goto	l1754
  5210  001CCA                     l1754:
  5211  001CCA  0E00               	movlw	0
  5212  001CCC  1401               	andwf	___ftpack@arg,w,c
  5213  001CCE  6E06               	movwf	??___ftpack& (0+255),c
  5214  001CD0  0E00               	movlw	0
  5215  001CD2  1402               	andwf	___ftpack@arg+1,w,c
  5216  001CD4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5217  001CD6  0EFE               	movlw	254
  5218  001CD8  1403               	andwf	___ftpack@arg+2,w,c
  5219  001CDA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5220  001CDC  5006               	movf	??___ftpack,w,c
  5221  001CDE  1007               	iorwf	??___ftpack+1,w,c
  5222  001CE0  1008               	iorwf	??___ftpack+2,w,c
  5223  001CE2  B4D8               	btfsc	status,2,c
  5224  001CE4  D00E               	goto	l1760
  5225  001CE6  D7EB               	goto	l1752
  5226  001CE8  D00C               	goto	l1760
  5227  001CEA                     l1756:
  5228  001CEA  2A04               	incf	___ftpack@exp,f,c
  5229  001CEC  0E01               	movlw	1
  5230  001CEE  2601               	addwf	___ftpack@arg,f,c
  5231  001CF0  0E00               	movlw	0
  5232  001CF2  2202               	addwfc	___ftpack@arg+1,f,c
  5233  001CF4  0E00               	movlw	0
  5234  001CF6  2203               	addwfc	___ftpack@arg+2,f,c
  5235  001CF8  90D8               	bcf	status,0,c
  5236  001CFA  3203               	rrcf	___ftpack@arg+2,f,c
  5237  001CFC  3202               	rrcf	___ftpack@arg+1,f,c
  5238  001CFE  3201               	rrcf	___ftpack@arg,f,c
  5239  001D00  D000               	goto	l1760
  5240  001D02                     l1760:
  5241  001D02  0E00               	movlw	0
  5242  001D04  1401               	andwf	___ftpack@arg,w,c
  5243  001D06  6E06               	movwf	??___ftpack& (0+255),c
  5244  001D08  0E00               	movlw	0
  5245  001D0A  1402               	andwf	___ftpack@arg+1,w,c
  5246  001D0C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5247  001D0E  0EFF               	movlw	255
  5248  001D10  1403               	andwf	___ftpack@arg+2,w,c
  5249  001D12  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5250  001D14  5006               	movf	??___ftpack,w,c
  5251  001D16  1007               	iorwf	??___ftpack+1,w,c
  5252  001D18  1008               	iorwf	??___ftpack+2,w,c
  5253  001D1A  B4D8               	btfsc	status,2,c
  5254  001D1C  D008               	goto	l1764
  5255  001D1E  D7E5               	goto	l1756
  5256  001D20  D006               	goto	l1764
  5257  001D22                     l1762:
  5258  001D22  0604               	decf	___ftpack@exp,f,c
  5259  001D24  90D8               	bcf	status,0,c
  5260  001D26  3601               	rlcf	___ftpack@arg,f,c
  5261  001D28  3602               	rlcf	___ftpack@arg+1,f,c
  5262  001D2A  3603               	rlcf	___ftpack@arg+2,f,c
  5263  001D2C  D000               	goto	l1764
  5264  001D2E                     l1764:
  5265  001D2E  BE02               	btfsc	___ftpack@arg+1,7,c
  5266  001D30  D004               	goto	l525
  5267  001D32  0E02               	movlw	2
  5268  001D34  6004               	cpfslt	___ftpack@exp,c
  5269  001D36  D7F5               	goto	l1762
  5270  001D38  D000               	goto	l525
  5271  001D3A                     l525:
  5272  001D3A  B004               	btfsc	___ftpack@exp,0,c
  5273  001D3C  D002               	goto	l1770
  5274  001D3E  9E02               	bcf	___ftpack@arg+1,7,c
  5275  001D40  D000               	goto	l1770
  5276  001D42                     l1770:
  5277  001D42  90D8               	bcf	status,0,c
  5278  001D44  3204               	rrcf	___ftpack@exp,f,c
  5279  001D46  5004               	movf	___ftpack@exp,w,c
  5280  001D48  1203               	iorwf	___ftpack@arg+2,f,c
  5281  001D4A  5005               	movf	___ftpack@sign,w,c
  5282  001D4C  B4D8               	btfsc	status,2,c
  5283  001D4E  D002               	goto	l1776
  5284  001D50  8E03               	bsf	___ftpack@arg+2,7,c
  5285  001D52  D000               	goto	l1776
  5286  001D54                     l1776:
  5287  001D54  C001  F001         	movff	___ftpack@arg,?___ftpack
  5288  001D58  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5289  001D5C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5290  001D60  D000               	goto	l514
  5291  001D62                     l514:
  5292  001D62  0012               	return		;funcret
  5293  001D64                     __end_of___ftpack:
  5294                           	opt stack 0
  5295                           tblptru	equ	0xFF8
  5296                           tblptrh	equ	0xFF7
  5297                           tblptrl	equ	0xFF6
  5298                           tablat	equ	0xFF5
  5299                           prodh	equ	0xFF4
  5300                           prodl	equ	0xFF3
  5301                           wreg	equ	0xFE8
  5302                           indf2	equ	0xFDF
  5303                           postinc2	equ	0xFDE
  5304                           postdec2	equ	0xFDD
  5305                           fsr2h	equ	0xFDA
  5306                           fsr2l	equ	0xFD9
  5307                           status	equ	0xFD8
  5308                           
  5309 ;; *************** function _LCD_init *****************
  5310 ;; Defined at:
  5311 ;;		line 6 in file "LCD_8bit.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    2
  5332 ;; This function calls:
  5333 ;;		_LCD_Command
  5334 ;;		_MSdelay
  5335 ;; This function is called by:
  5336 ;;		_main
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           	psect	text22
  5341  002336                     __ptext22:
  5342                           	opt stack 0
  5343  002336                     _LCD_init:
  5344                           	opt stack 28
  5345                           
  5346                           ;LCD_8bit.c: 8: TRISB = 0;
  5347                           
  5348                           ;incstack = 0
  5349  002336  0E00               	movlw	0
  5350  002338  6E93               	movwf	3987,c	;volatile
  5351                           
  5352                           ;LCD_8bit.c: 9: TRISD=0;
  5353  00233A  0E00               	movlw	0
  5354  00233C  6E95               	movwf	3989,c	;volatile
  5355                           
  5356                           ;LCD_8bit.c: 10: TRISC=0;
  5357  00233E  0E00               	movlw	0
  5358  002340  6E94               	movwf	3988,c	;volatile
  5359                           
  5360                           ;LCD_8bit.c: 11: MSdelay(5);
  5361  002342  0E00               	movlw	0
  5362  002344  6E02               	movwf	MSdelay@val+1,c
  5363  002346  0E05               	movlw	5
  5364  002348  6E01               	movwf	MSdelay@val,c
  5365  00234A  EC41  F011         	call	_MSdelay	;wreg free
  5366                           
  5367                           ;LCD_8bit.c: 12: LCD_Command(0x38);
  5368  00234E  0E38               	movlw	56
  5369  002350  ECDB  F011         	call	_LCD_Command
  5370                           
  5371                           ;LCD_8bit.c: 13: LCD_Command(0x01);
  5372  002354  0E01               	movlw	1
  5373  002356  ECDB  F011         	call	_LCD_Command
  5374                           
  5375                           ;LCD_8bit.c: 14: LCD_Command(0x06);
  5376  00235A  0E06               	movlw	6
  5377  00235C  ECDB  F011         	call	_LCD_Command
  5378                           
  5379                           ;LCD_8bit.c: 15: LCD_Command(0x0c);
  5380  002360  0E0C               	movlw	12
  5381  002362  ECDB  F011         	call	_LCD_Command
  5382  002366  0012               	return		;funcret
  5383  002368                     __end_of_LCD_init:
  5384                           	opt stack 0
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           wreg	equ	0xFE8
  5392                           indf2	equ	0xFDF
  5393                           postinc2	equ	0xFDE
  5394                           postdec2	equ	0xFDD
  5395                           fsr2h	equ	0xFDA
  5396                           fsr2l	equ	0xFD9
  5397                           status	equ	0xFD8
  5398                           
  5399 ;; *************** function _LCD_String_xy *****************
  5400 ;; Defined at:
  5401 ;;		line 50 in file "LCD_8bit.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;  row             1    wreg     unsigned char 
  5404 ;;  pos             1    9[COMRAM] unsigned char 
  5405 ;;  msg             2   10[COMRAM] PTR const unsigned char 
  5406 ;;		 -> main@data(10), STR_1(14), 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;  row             1   12[COMRAM] unsigned char 
  5409 ;;  location        1   13[COMRAM] unsigned char 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;		None               void
  5412 ;; Registers used:
  5413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5419 ;;      Params:         3       0       0       0       0       0       0       0       0
  5420 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5421 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5422 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5423 ;;Total ram usage:        5 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    3
  5426 ;; This function calls:
  5427 ;;		_LCD_Command
  5428 ;;		_LCD_String
  5429 ;; This function is called by:
  5430 ;;		_main
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text23
  5435  0022FC                     __ptext23:
  5436                           	opt stack 0
  5437  0022FC                     _LCD_String_xy:
  5438                           	opt stack 27
  5439                           
  5440                           ;incstack = 0
  5441                           ;LCD_String_xy@row stored from wreg
  5442  0022FC  6E0D               	movwf	LCD_String_xy@row,c
  5443                           
  5444                           ;LCD_8bit.c: 52: char location=0;
  5445  0022FE  0E00               	movlw	0
  5446  002300  6E0E               	movwf	LCD_String_xy@location,c
  5447                           
  5448                           ;LCD_8bit.c: 53: if(row<=1)
  5449  002302  0E02               	movlw	2
  5450  002304  600D               	cpfslt	LCD_String_xy@row,c
  5451  002306  D008               	goto	l2352
  5452                           
  5453                           ;LCD_8bit.c: 54: {
  5454                           ;LCD_8bit.c: 55: location=(0x80) | ((pos) & 0x0f);
  5455  002308  500A               	movf	LCD_String_xy@pos,w,c
  5456  00230A  0B0F               	andlw	15
  5457  00230C  0980               	iorlw	128
  5458  00230E  6E0E               	movwf	LCD_String_xy@location,c
  5459                           
  5460                           ;LCD_8bit.c: 56: LCD_Command(location);
  5461  002310  500E               	movf	LCD_String_xy@location,w,c
  5462  002312  ECDB  F011         	call	_LCD_Command
  5463                           
  5464                           ;LCD_8bit.c: 57: }
  5465  002316  D008               	goto	l2356
  5466  002318                     l2352:
  5467                           
  5468                           ;LCD_8bit.c: 58: else
  5469                           ;LCD_8bit.c: 59: {
  5470                           ;LCD_8bit.c: 60: location=(0xC0) | ((pos) & 0x0f);
  5471  002318  500A               	movf	LCD_String_xy@pos,w,c
  5472  00231A  0B0F               	andlw	15
  5473  00231C  09C0               	iorlw	192
  5474  00231E  6E0E               	movwf	LCD_String_xy@location,c
  5475                           
  5476                           ;LCD_8bit.c: 61: LCD_Command(location);
  5477  002320  500E               	movf	LCD_String_xy@location,w,c
  5478  002322  ECDB  F011         	call	_LCD_Command
  5479  002326  D000               	goto	l2356
  5480  002328                     l2356:
  5481                           
  5482                           ;LCD_8bit.c: 62: }
  5483                           ;LCD_8bit.c: 65: LCD_String(msg);
  5484  002328  C00B  F008         	movff	LCD_String_xy@msg,LCD_String@msg
  5485  00232C  C00C  F009         	movff	LCD_String_xy@msg+1,LCD_String@msg+1
  5486  002330  ECD0  F010         	call	_LCD_String	;wreg free
  5487  002334  0012               	return		;funcret
  5488  002336                     __end_of_LCD_String_xy:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           wreg	equ	0xFE8
  5497                           indf2	equ	0xFDF
  5498                           postinc2	equ	0xFDE
  5499                           postdec2	equ	0xFDD
  5500                           fsr2h	equ	0xFDA
  5501                           fsr2l	equ	0xFD9
  5502                           status	equ	0xFD8
  5503                           
  5504 ;; *************** function _LCD_String *****************
  5505 ;; Defined at:
  5506 ;;		line 40 in file "LCD_8bit.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;  msg             2    7[COMRAM] PTR const unsigned char 
  5509 ;;		 -> main@data(10), STR_1(14), 
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;		None
  5512 ;; Return value:  Size  Location     Type
  5513 ;;		None               void
  5514 ;; Registers used:
  5515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5521 ;;      Params:         2       0       0       0       0       0       0       0       0
  5522 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5523 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5524 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5525 ;;Total ram usage:        2 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    2
  5528 ;; This function calls:
  5529 ;;		_LCD_Char
  5530 ;; This function is called by:
  5531 ;;		_LCD_String_xy
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           	psect	text24
  5536  0021A0                     __ptext24:
  5537                           	opt stack 0
  5538  0021A0                     _LCD_String:
  5539                           	opt stack 27
  5540                           
  5541                           ;LCD_8bit.c: 42: while((*msg)!=0)
  5542                           
  5543                           ;incstack = 0
  5544  0021A0  D015               	goto	l2014
  5545  0021A2                     l2010:
  5546                           
  5547                           ;LCD_8bit.c: 43: {
  5548                           ;LCD_8bit.c: 44: LCD_Char(*msg);
  5549  0021A2  C008  FFF6         	movff	LCD_String@msg,tblptrl
  5550  0021A6  C009  FFF7         	movff	LCD_String@msg+1,tblptrh
  5551  0021AA  6AF8               	clrf	tblptru,c
  5552  0021AC  0E07               	movlw	(high __ramtop+-1)
  5553  0021AE  64F7               	cpfsgt	tblptrh,c
  5554  0021B0  D003               	bra	u1937
  5555  0021B2  0008               	tblrd		*
  5556  0021B4  50F5               	movf	tablat,w,c
  5557  0021B6  D005               	bra	u1930
  5558  0021B8                     u1937:
  5559  0021B8  CFF6 FFE9          	movff	tblptrl,fsr0l
  5560  0021BC  CFF7 FFEA          	movff	tblptrh,fsr0h
  5561  0021C0  50EF               	movf	indf0,w,c
  5562  0021C2                     u1930:
  5563  0021C2  ECC8  F011         	call	_LCD_Char
  5564                           
  5565                           ;LCD_8bit.c: 45: msg++;
  5566  0021C6  4A08               	infsnz	LCD_String@msg,f,c
  5567  0021C8  2A09               	incf	LCD_String@msg+1,f,c
  5568  0021CA  D000               	goto	l2014
  5569  0021CC                     l2014:
  5570  0021CC  C008  FFF6         	movff	LCD_String@msg,tblptrl
  5571  0021D0  C009  FFF7         	movff	LCD_String@msg+1,tblptrh
  5572  0021D4  6AF8               	clrf	tblptru,c
  5573  0021D6  0E07               	movlw	(high __ramtop+-1)
  5574  0021D8  64F7               	cpfsgt	tblptrh,c
  5575  0021DA  D003               	bra	u1947
  5576  0021DC  0008               	tblrd		*
  5577  0021DE  50F5               	movf	tablat,w,c
  5578  0021E0  D005               	bra	u1940
  5579  0021E2                     u1947:
  5580  0021E2  CFF6 FFE9          	movff	tblptrl,fsr0l
  5581  0021E6  CFF7 FFEA          	movff	tblptrh,fsr0h
  5582  0021EA  50EF               	movf	indf0,w,c
  5583  0021EC                     u1940:
  5584  0021EC  0900               	iorlw	0
  5585  0021EE  A4D8               	btfss	status,2,c
  5586  0021F0  D7D8               	goto	l2010
  5587  0021F2  0012               	return		;funcret
  5588  0021F4                     __end_of_LCD_String:
  5589                           	opt stack 0
  5590                           tblptru	equ	0xFF8
  5591                           tblptrh	equ	0xFF7
  5592                           tblptrl	equ	0xFF6
  5593                           tablat	equ	0xFF5
  5594                           prodh	equ	0xFF4
  5595                           prodl	equ	0xFF3
  5596                           indf0	equ	0xFEF
  5597                           fsr0h	equ	0xFEA
  5598                           fsr0l	equ	0xFE9
  5599                           wreg	equ	0xFE8
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           postdec2	equ	0xFDD
  5603                           fsr2h	equ	0xFDA
  5604                           fsr2l	equ	0xFD9
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function _LCD_Char *****************
  5608 ;; Defined at:
  5609 ;;		line 29 in file "LCD_8bit.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;  dat             1    wreg     unsigned char 
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;  dat             1    6[COMRAM] unsigned char 
  5614 ;; Return value:  Size  Location     Type
  5615 ;;		None               void
  5616 ;; Registers used:
  5617 ;;		wreg, status,2, status,0, cstack
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5623 ;;      Params:         0       0       0       0       0       0       0       0       0
  5624 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5625 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5626 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5627 ;;Total ram usage:        1 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    1
  5630 ;; This function calls:
  5631 ;;		_MSdelay
  5632 ;; This function is called by:
  5633 ;;		_LCD_String
  5634 ;; This function uses a non-reentrant model
  5635 ;;
  5636                           
  5637                           	psect	text25
  5638  002390                     __ptext25:
  5639                           	opt stack 0
  5640  002390                     _LCD_Char:
  5641                           	opt stack 27
  5642                           
  5643                           ;incstack = 0
  5644                           ;LCD_Char@dat stored from wreg
  5645  002390  6E07               	movwf	LCD_Char@dat,c
  5646                           
  5647                           ;LCD_8bit.c: 31: LATD= dat;
  5648  002392  C007  FF8C         	movff	LCD_Char@dat,3980	;volatile
  5649                           
  5650                           ;LCD_8bit.c: 32: LATC0 = 1;
  5651  002396  808B               	bsf	3979,0,c	;volatile
  5652                           
  5653                           ;LCD_8bit.c: 33: LATC1=1;
  5654  002398  828B               	bsf	3979,1,c	;volatile
  5655                           
  5656                           ;LCD_8bit.c: 34: MSdelay(1);
  5657  00239A  0E00               	movlw	0
  5658  00239C  6E02               	movwf	MSdelay@val+1,c
  5659  00239E  0E01               	movlw	1
  5660  0023A0  6E01               	movwf	MSdelay@val,c
  5661  0023A2  EC41  F011         	call	_MSdelay	;wreg free
  5662                           
  5663                           ;LCD_8bit.c: 35: LATC1=0;
  5664  0023A6  928B               	bcf	3979,1,c	;volatile
  5665                           
  5666                           ;LCD_8bit.c: 36: MSdelay(3);
  5667  0023A8  0E00               	movlw	0
  5668  0023AA  6E02               	movwf	MSdelay@val+1,c
  5669  0023AC  0E03               	movlw	3
  5670  0023AE  6E01               	movwf	MSdelay@val,c
  5671  0023B0  EC41  F011         	call	_MSdelay	;wreg free
  5672  0023B4  0012               	return		;funcret
  5673  0023B6                     __end_of_LCD_Char:
  5674                           	opt stack 0
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           indf0	equ	0xFEF
  5682                           fsr0h	equ	0xFEA
  5683                           fsr0l	equ	0xFE9
  5684                           wreg	equ	0xFE8
  5685                           indf2	equ	0xFDF
  5686                           postinc2	equ	0xFDE
  5687                           postdec2	equ	0xFDD
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function _LCD_Command *****************
  5693 ;; Defined at:
  5694 ;;		line 19 in file "LCD_8bit.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;  cmd             1    wreg     unsigned char 
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;  cmd             1    6[COMRAM] unsigned char 
  5699 ;; Return value:  Size  Location     Type
  5700 ;;		None               void
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5708 ;;      Params:         0       0       0       0       0       0       0       0       0
  5709 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5711 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5712 ;;Total ram usage:        1 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    1
  5715 ;; This function calls:
  5716 ;;		_MSdelay
  5717 ;; This function is called by:
  5718 ;;		_LCD_init
  5719 ;;		_LCD_String_xy
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text26
  5724  0023B6                     __ptext26:
  5725                           	opt stack 0
  5726  0023B6                     _LCD_Command:
  5727                           	opt stack 28
  5728                           
  5729                           ;incstack = 0
  5730                           ;LCD_Command@cmd stored from wreg
  5731  0023B6  6E07               	movwf	LCD_Command@cmd,c
  5732                           
  5733                           ;LCD_8bit.c: 21: LATD= cmd;
  5734  0023B8  C007  FF8C         	movff	LCD_Command@cmd,3980	;volatile
  5735                           
  5736                           ;LCD_8bit.c: 22: LATC0 = 0;
  5737  0023BC  908B               	bcf	3979,0,c	;volatile
  5738                           
  5739                           ;LCD_8bit.c: 23: LATC1 = 1;
  5740  0023BE  828B               	bsf	3979,1,c	;volatile
  5741                           
  5742                           ;LCD_8bit.c: 24: MSdelay(1);
  5743  0023C0  0E00               	movlw	0
  5744  0023C2  6E02               	movwf	MSdelay@val+1,c
  5745  0023C4  0E01               	movlw	1
  5746  0023C6  6E01               	movwf	MSdelay@val,c
  5747  0023C8  EC41  F011         	call	_MSdelay	;wreg free
  5748                           
  5749                           ;LCD_8bit.c: 25: LATC1 = 0;
  5750  0023CC  928B               	bcf	3979,1,c	;volatile
  5751                           
  5752                           ;LCD_8bit.c: 26: MSdelay(3);
  5753  0023CE  0E00               	movlw	0
  5754  0023D0  6E02               	movwf	MSdelay@val+1,c
  5755  0023D2  0E03               	movlw	3
  5756  0023D4  6E01               	movwf	MSdelay@val,c
  5757  0023D6  EC41  F011         	call	_MSdelay	;wreg free
  5758  0023DA  0012               	return		;funcret
  5759  0023DC                     __end_of_LCD_Command:
  5760                           	opt stack 0
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           indf0	equ	0xFEF
  5768                           fsr0h	equ	0xFEA
  5769                           fsr0l	equ	0xFE9
  5770                           wreg	equ	0xFE8
  5771                           indf2	equ	0xFDF
  5772                           postinc2	equ	0xFDE
  5773                           postdec2	equ	0xFDD
  5774                           fsr2h	equ	0xFDA
  5775                           fsr2l	equ	0xFD9
  5776                           status	equ	0xFD8
  5777                           
  5778 ;; *************** function _MSdelay *****************
  5779 ;; Defined at:
  5780 ;;		line 70 in file "LCD_8bit.c"
  5781 ;; Parameters:    Size  Location     Type
  5782 ;;  val             2    0[COMRAM] unsigned int 
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  j               2    4[COMRAM] unsigned int 
  5785 ;;  i               2    2[COMRAM] unsigned int 
  5786 ;; Return value:  Size  Location     Type
  5787 ;;		None               void
  5788 ;; Registers used:
  5789 ;;		wreg, status,2, status,0
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5795 ;;      Params:         2       0       0       0       0       0       0       0       0
  5796 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5797 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5798 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5799 ;;Total ram usage:        6 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; This function calls:
  5802 ;;		Nothing
  5803 ;; This function is called by:
  5804 ;;		_LCD_init
  5805 ;;		_LCD_Command
  5806 ;;		_LCD_Char
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           	psect	text27
  5811  002282                     __ptext27:
  5812                           	opt stack 0
  5813  002282                     _MSdelay:
  5814                           	opt stack 29
  5815                           
  5816                           ;LCD_8bit.c: 72: unsigned int i,j;
  5817                           ;LCD_8bit.c: 73: for(i=0;i<=val;i++)
  5818                           
  5819                           ;incstack = 0
  5820  002282  0E00               	movlw	0
  5821  002284  6E04               	movwf	MSdelay@i+1,c
  5822  002286  0E00               	movlw	0
  5823  002288  6E03               	movwf	MSdelay@i,c
  5824  00228A  D013               	goto	l1742
  5825  00228C                     l1730:
  5826                           
  5827                           ;LCD_8bit.c: 74: for(j=0;j<81;j++);
  5828  00228C  0E00               	movlw	0
  5829  00228E  6E06               	movwf	MSdelay@j+1,c
  5830  002290  0E00               	movlw	0
  5831  002292  6E05               	movwf	MSdelay@j,c
  5832  002294                     l1732:
  5833  002294  5006               	movf	MSdelay@j+1,w,c
  5834  002296  E10A               	bnz	l1740
  5835  002298  0E51               	movlw	81
  5836  00229A  5C05               	subwf	MSdelay@j,w,c
  5837  00229C  B0D8               	btfsc	status,0,c
  5838  00229E  D006               	goto	l1740
  5839  0022A0  D001               	goto	l1736
  5840  0022A2  D004               	goto	l1740
  5841  0022A4                     l1736:
  5842  0022A4  4A05               	infsnz	MSdelay@j,f,c
  5843  0022A6  2A06               	incf	MSdelay@j+1,f,c
  5844  0022A8  D7F5               	goto	l1732
  5845  0022AA  D000               	goto	l1740
  5846  0022AC                     l1740:
  5847  0022AC  4A03               	infsnz	MSdelay@i,f,c
  5848  0022AE  2A04               	incf	MSdelay@i+1,f,c
  5849  0022B0  D000               	goto	l1742
  5850  0022B2                     l1742:
  5851  0022B2  5003               	movf	MSdelay@i,w,c
  5852  0022B4  5C01               	subwf	MSdelay@val,w,c
  5853  0022B6  5004               	movf	MSdelay@i+1,w,c
  5854  0022B8  5802               	subwfb	MSdelay@val+1,w,c
  5855  0022BA  B0D8               	btfsc	status,0,c
  5856  0022BC  D7E7               	goto	l1730
  5857  0022BE  0012               	return		;funcret
  5858  0022C0                     __end_of_MSdelay:
  5859                           	opt stack 0
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           indf0	equ	0xFEF
  5867                           fsr0h	equ	0xFEA
  5868                           fsr0l	equ	0xFE9
  5869                           wreg	equ	0xFE8
  5870                           indf2	equ	0xFDF
  5871                           postinc2	equ	0xFDE
  5872                           postdec2	equ	0xFDD
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _ADC_init *****************
  5878 ;; Defined at:
  5879 ;;		line 37 in file "newmain.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;		None               void
  5886 ;; Registers used:
  5887 ;;		wreg, status,2
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5893 ;;      Params:         0       0       0       0       0       0       0       0       0
  5894 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5896 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5897 ;;Total ram usage:        0 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_main
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           	psect	text28
  5907  002422                     __ptext28:
  5908                           	opt stack 0
  5909  002422                     _ADC_init:
  5910                           	opt stack 30
  5911                           
  5912                           ;newmain.c: 39: TRISA = 0xff;
  5913                           
  5914                           ;incstack = 0
  5915  002422  6892               	setf	3986,c	;volatile
  5916                           
  5917                           ;newmain.c: 40: ADCON1 = 0x0e;
  5918  002424  0E0E               	movlw	14
  5919  002426  6EC1               	movwf	4033,c	;volatile
  5920                           
  5921                           ;newmain.c: 41: ADCON2 = 0x92;
  5922  002428  0E92               	movlw	146
  5923  00242A  6EC0               	movwf	4032,c	;volatile
  5924                           
  5925                           ;newmain.c: 42: ADRESH=0;
  5926  00242C  0E00               	movlw	0
  5927  00242E  6EC4               	movwf	4036,c	;volatile
  5928                           
  5929                           ;newmain.c: 43: ADRESL=0;
  5930  002430  0E00               	movlw	0
  5931  002432  6EC3               	movwf	4035,c	;volatile
  5932  002434  0012               	return		;funcret
  5933  002436                     __end_of_ADC_init:
  5934                           	opt stack 0
  5935                           tblptru	equ	0xFF8
  5936                           tblptrh	equ	0xFF7
  5937                           tblptrl	equ	0xFF6
  5938                           tablat	equ	0xFF5
  5939                           prodh	equ	0xFF4
  5940                           prodl	equ	0xFF3
  5941                           indf0	equ	0xFEF
  5942                           fsr0h	equ	0xFEA
  5943                           fsr0l	equ	0xFE9
  5944                           wreg	equ	0xFE8
  5945                           indf2	equ	0xFDF
  5946                           postinc2	equ	0xFDE
  5947                           postdec2	equ	0xFDD
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function _ADC_Read *****************
  5953 ;; Defined at:
  5954 ;;		line 46 in file "newmain.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  channel         2    0[COMRAM] int 
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;  digital         2    6[COMRAM] int 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  2    0[COMRAM] int 
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, status,0
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5968 ;;      Params:         2       0       0       0       0       0       0       0       0
  5969 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5970 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5971 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5972 ;;Total ram usage:        8 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text29
  5982  002052                     __ptext29:
  5983                           	opt stack 0
  5984  002052                     _ADC_Read:
  5985                           	opt stack 30
  5986                           
  5987                           ;newmain.c: 48: int digital;
  5988                           ;newmain.c: 49: ADCON0 =(ADCON0 & 0b11000011)|((channel<<2) & 0b00111100);
  5989                           
  5990                           ;incstack = 0
  5991  002052  C001  F003         	movff	ADC_Read@channel,??_ADC_Read
  5992  002056  90D8               	bcf	status,0,c
  5993  002058  3603               	rlcf	??_ADC_Read,f,c
  5994  00205A  90D8               	bcf	status,0,c
  5995  00205C  3603               	rlcf	??_ADC_Read,f,c
  5996  00205E  0E3C               	movlw	60
  5997  002060  1603               	andwf	??_ADC_Read,f,c
  5998  002062  50C2               	movf	4034,w,c	;volatile
  5999  002064  0BC3               	andlw	195
  6000  002066  1003               	iorwf	??_ADC_Read,w,c
  6001  002068  6EC2               	movwf	4034,c	;volatile
  6002                           
  6003                           ;newmain.c: 51: ADCON0 |= ((1<<ADON)|(1<<GO));
  6004  00206A  A2C2               	btfss	4034,1,c	;volatile
  6005  00206C  D003               	goto	u2420
  6006  00206E  6A03               	clrf	??_ADC_Read& (0+255),c
  6007  002070  2A03               	incf	??_ADC_Read& (0+255),f,c
  6008  002072  D001               	goto	u2438
  6009  002074                     u2420:
  6010  002074  6A03               	clrf	??_ADC_Read& (0+255),c
  6011  002076                     u2438:
  6012  002076  0E01               	movlw	1
  6013  002078  6E04               	movwf	(??_ADC_Read+1)& (0+255),c
  6014  00207A  2A03               	incf	??_ADC_Read,f,c
  6015  00207C  D002               	goto	u2444
  6016  00207E                     u2445:
  6017  00207E  90D8               	bcf	status,0,c
  6018  002080  3604               	rlcf	??_ADC_Read+1,f,c
  6019  002082                     u2444:
  6020  002082  2E03               	decfsz	??_ADC_Read,f,c
  6021  002084  D7FC               	goto	u2445
  6022  002086  A0C2               	btfss	4034,0,c	;volatile
  6023  002088  D003               	goto	u2450
  6024  00208A  6A05               	clrf	(??_ADC_Read+2)& (0+255),c
  6025  00208C  2A05               	incf	(??_ADC_Read+2)& (0+255),f,c
  6026  00208E  D001               	goto	u2468
  6027  002090                     u2450:
  6028  002090  6A05               	clrf	(??_ADC_Read+2)& (0+255),c
  6029  002092                     u2468:
  6030  002092  0E01               	movlw	1
  6031  002094  6E06               	movwf	(??_ADC_Read+3)& (0+255),c
  6032  002096  2A05               	incf	??_ADC_Read+2,f,c
  6033  002098  D002               	goto	u2474
  6034  00209A                     u2475:
  6035  00209A  90D8               	bcf	status,0,c
  6036  00209C  3606               	rlcf	??_ADC_Read+3,f,c
  6037  00209E                     u2474:
  6038  00209E  2E05               	decfsz	??_ADC_Read+2,f,c
  6039  0020A0  D7FC               	goto	u2475
  6040  0020A2  5006               	movf	??_ADC_Read+3,w,c
  6041  0020A4  1004               	iorwf	??_ADC_Read+1,w,c
  6042  0020A6  12C2               	iorwf	4034,f,c	;volatile
  6043                           
  6044                           ;newmain.c: 52: while(ADCON0bits.GO_nDONE==1);
  6045  0020A8  D000               	goto	l46
  6046  0020AA                     l46:
  6047  0020AA  B2C2               	btfsc	4034,1,c	;volatile
  6048  0020AC  D7FE               	goto	l46
  6049                           
  6050                           ;newmain.c: 53: digital = (ADRESH*256) | (ADRESL);
  6051  0020AE  50C3               	movf	4035,w,c	;volatile
  6052  0020B0  CFC4 F003          	movff	4036,??_ADC_Read	;volatile
  6053  0020B4  6A04               	clrf	(??_ADC_Read+1)& (0+255),c
  6054  0020B6  C003  F004         	movff	??_ADC_Read,??_ADC_Read+1
  6055  0020BA  6A03               	clrf	??_ADC_Read,c
  6056  0020BC  1003               	iorwf	??_ADC_Read,w,c
  6057  0020BE  6E07               	movwf	ADC_Read@digital,c
  6058  0020C0  5004               	movf	??_ADC_Read+1,w,c
  6059  0020C2  6E08               	movwf	ADC_Read@digital+1,c
  6060                           
  6061                           ;newmain.c: 54: return(digital);
  6062  0020C4  C007  F001         	movff	ADC_Read@digital,?_ADC_Read
  6063  0020C8  C008  F002         	movff	ADC_Read@digital+1,?_ADC_Read+1
  6064  0020CC  D000               	goto	l49
  6065  0020CE                     l49:
  6066  0020CE  0012               	return		;funcret
  6067  0020D0                     __end_of_ADC_Read:
  6068                           	opt stack 0
  6069                           tblptru	equ	0xFF8
  6070                           tblptrh	equ	0xFF7
  6071                           tblptrl	equ	0xFF6
  6072                           tablat	equ	0xFF5
  6073                           prodh	equ	0xFF4
  6074                           prodl	equ	0xFF3
  6075                           indf0	equ	0xFEF
  6076                           fsr0h	equ	0xFEA
  6077                           fsr0l	equ	0xFE9
  6078                           wreg	equ	0xFE8
  6079                           indf2	equ	0xFDF
  6080                           postinc2	equ	0xFDE
  6081                           postdec2	equ	0xFDD
  6082                           fsr2h	equ	0xFDA
  6083                           fsr2l	equ	0xFD9
  6084                           status	equ	0xFD8
  6085                           tblptru	equ	0xFF8
  6086                           tblptrh	equ	0xFF7
  6087                           tblptrl	equ	0xFF6
  6088                           tablat	equ	0xFF5
  6089                           prodh	equ	0xFF4
  6090                           prodl	equ	0xFF3
  6091                           indf0	equ	0xFEF
  6092                           fsr0h	equ	0xFEA
  6093                           fsr0l	equ	0xFE9
  6094                           wreg	equ	0xFE8
  6095                           indf2	equ	0xFDF
  6096                           postinc2	equ	0xFDE
  6097                           postdec2	equ	0xFDD
  6098                           fsr2h	equ	0xFDA
  6099                           fsr2l	equ	0xFD9
  6100                           status	equ	0xFD8
  6101                           
  6102                           	psect	rparam
  6103  0000                     tblptru	equ	0xFF8
  6104                           tblptrh	equ	0xFF7
  6105                           tblptrl	equ	0xFF6
  6106                           tablat	equ	0xFF5
  6107                           prodh	equ	0xFF4
  6108                           prodl	equ	0xFF3
  6109                           indf0	equ	0xFEF
  6110                           fsr0h	equ	0xFEA
  6111                           fsr0l	equ	0xFE9
  6112                           wreg	equ	0xFE8
  6113                           indf2	equ	0xFDF
  6114                           postinc2	equ	0xFDE
  6115                           postdec2	equ	0xFDD
  6116                           fsr2h	equ	0xFDA
  6117                           fsr2l	equ	0xFD9
  6118                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    118
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     88      91
    BANK0           160     23      23
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           244      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 10
		 -> main@data(COMRAM[10]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 10
		 -> main@data(COMRAM[10]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> main@data(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    LCD_String_xy@msg	PTR const unsigned char  size(2) Largest target is 14
		 -> main@data(COMRAM[10]), STR_1(CODE[14]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 14
		 -> main@data(COMRAM[10]), STR_1(CODE[14]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 10
		 -> main@data(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___awtoft->___ftpack
    _LCD_init->_LCD_Command
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Command->_MSdelay

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   44857
                                             76 COMRAM    12    12      0
                           _ADC_Read
                           _ADC_init
                      _LCD_String_xy
                           _LCD_init
                           ___awtoft
                            ___ftmul
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (1) _strcat                                               6     2      4     204
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   36950
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3    8763
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    8565
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1961
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3703
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1250
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1360
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    1829
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     411
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3092
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2839
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     454
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1851
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1707
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             0     0      0     736
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        5     2      3    1203
                                              9 COMRAM     5     2      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2     477
                                              7 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0     379
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          1     1      0     379
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _MSdelay                                              6     4      2     357
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             8     6      2      98
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _ADC_init
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay
   _LCD_init
     _LCD_Command
       _MSdelay
     _MSdelay
   ___awtoft
     ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _strcat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3F3      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK3            F4      0       0      11        0.0%
BANK3               F4      0       0      12        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     17      17       6       14.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     58      5B       1       95.8%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      72       3        0.0%
DATA                 0      0      72       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Jun 14 19:30:28 2016

           ?_LCD_Command 0001                       l46 20AA                       l49 20CE  
                     _GO 007E11             ___awdiv@sign 000C              __CFG_BOR$ON 000000  
    ___wmul@multiplicand 0011              __CFG_BORV$3 000000              ?_LCD_String 0008  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000             ___ftadd@exp1 0039             ___ftadd@exp2 0038  
           ___ftadd@sign 0037                      l120 149C                      l113 16E0  
                    l171 0E42                      l407 22FA                      l514 1D62  
                    l186 10BC                      l603 19A4                      l612 1F42  
                    l525 1D3A                      l189 238E                      l382 1EAC  
                    l713 219E                      l473 1ABE                      l554 1726  
                    l482 1AAE                      l618 1BB6                      l555 18A4  
                    l635 2280                      l395 2050                      l628 23F2  
                    l558 1750                      l654 2420                      l639 1C9C  
                    l569 1812                      l578 182E                      l594 19B4  
                    l683 1FBE                      l596 191C                      l693 212E  
                    l597 1944             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
           ___awmod@sign 0006                      wreg 000FE8              _sprintf$755 0060  
            main@digital 0057             __CFG_LVP$OFF 000000              LCD_Char@dat 0007  
           __CFG_WDT$OFF 000000                     l2010 21A2                     l2100 18E2  
                   l2014 21CC                     l2200 1A9A                     l2202 1AA8  
                   l2130 1966                     l2122 1952                     l2034 16A0  
                   l2026 15DC                     l2220 1F12                     l2140 1990  
                   l2310 20F8                     l2150 19C6                     l2142 199E  
                   l2134 1976                     l2054 1292                     l2216 1EE0  
                   l2208 2256                     l2240 1BD6                     l2320 2146  
                   l2136 197C                     l2072 1478                     l2048 11EA  
                   l2226 1F3E                     l2314 211E                     l2306 20E2  
                   l2322 2154                     l2170 1A1A                     l2066 13C6  
                   l2058 12A2                     l2308 20F0                     l2156 19D6  
                   l2084 2418                     l2500 0DE6                     l2404 0994  
                   l2270 1C68                     l2262 1C40                     l2190 1A70  
                   l2182 1A5C                     l2094 18C4                     l2510 0E24  
                   l2502 0DF6                     l2430 0A80                     l2414 09DC  
                   l2352 2318                     l2264 1C46                     l2272 1C72  
                   l1730 228C                     l2258 1C30                     l2290 1F7C  
                   l2194 1A80                     l2178 1A4C                     l2522 0E78  
                   l2514 0E48                     l2442 0B10                     l2602 1D84  
                   l1740 22AC                     l1732 2294                     l2356 2328  
                   l1812 175E                     l2276 1C8A                     l2268 1C5A  
                   l2196 1A86                     l2508 0E10                     l2460 0BE6  
                   l2444 0B26                     l1742 22B2                     l1806 1734  
                   l2286 1F66                     l1902 1B62                     l2526 0ECA  
                   l2454 0BB4                     l2446 0B58                     l2438 0AE8  
                   l2382 08E4                     l2374 08B4                     l1736 22A4  
                   l1760 1D02                     l1752 1CBE                     l1840 17D6  
                   l2288 1F74                     l1912 1B90                     l1904 1B68  
                   l2560 1064                     l2552 1012                     l2544 0FDA  
                   l2536 0FB0                     l2472 0CD4                     l2464 0C2A  
                   l2448 0B6E                     l2392 094A                     l2368 089C  
                   l1770 1D42                     l1762 1D22                     l1754 1CCA  
                   l1834 17B6                     l1818 176A                     l2298 1FAE  
                   l1930 1E40                     l2538 0FC0                     l2490 0D4C  
                   l2482 0D22                     l2474 0CDA                     l2466 0C58  
                   l2458 0BDA                     l2546 0FEA                     l2386 0920  
                   l1764 1D2E                     l1756 1CEA                     l1748 1CAE  
                   l1836 17C2                     l1828 1792                     l1940 1E68  
                   l1924 1E2E                     l1908 1B7A                     l2564 1088  
                   l2556 1036                     l2492 0D52                     l2468 0C6C  
                   l2396 0954                     l2388 0938                     l2580 2220  
                   l2590 22D6                     l1854 184C                     l1846 17FA  
                   l1838 17CE                     l2486 0D28                     l2478 0CE8  
                   l2398 0978                     l2566 108E                     l2574 21FE  
                   l1776 1D54                     l1864 187E                     l1848 1806  
                   l1936 1E56                     l1952 1E92                     l1880 1B06  
                   l2568 10AE                     l2576 2204                     l1938 1E60  
                   l1874 1ADE                     l2578 2216                     l1956 1EA2  
                   l1948 1E86                     l1980 2014                     l1972 1FF4  
                   l1876 1AF8                     l1894 1B3A                     l1992 2046  
                   l1984 202A                     l1976 2002                     l1968 1FE6  
                   l1978 200C                     l1898 1B4C                     l1988 2036  
                   _ADON 007E10                     STR_1 0877                     STR_2 0885  
                   STR_3 088A                     u2051 18B6                     u2071 18D4  
                   _LATD 000F8C                     u2420 2074                     u1541 16F2  
                   u2261 1BC8                     u1551 1706                     u2280 1BF4  
                   u2450 2090                     u2444 2082                     u2445 207E  
                   u2285 1BEC                     u2438 2076                     u1751 1AD0  
                   u2720 0E3A                     u2560 0A1C                     u2474 209E  
                   u1930 21C2                     u2475 209A                     u1771 1AEE  
                   u2468 2092                     u1940 21EC                     u2565 0A12  
                   u1937 21B8                     u1947 21E2                     _main 1D64  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr0h 000FEA  
                   indf0 000FEF                     fsr0l 000FE9                     fsr2h 000FDA  
                   indf2 000FDF                     fsr2l 000FD9         __end_of_ADC_Read 20D0  
                   prodh 000FF4                     prodl 000FF3                     start 0002  
        __end_of_MSdelay 22C0         __end_of_ADC_init 2436            __CFG_IESO$OFF 000000  
          _LCD_String_xy 22FC             ___ftmul@cntr 0022             ___param_bank 000010  
           ___ftmul@sign 0023             ___fttol@exp1 0039             ___fttol@lval 0035  
       __end_of_LCD_Char 23B6            __CFG_PLLDIV$1 000000         __end_of_LCD_init 2368  
         __CFG_CCP2MX$ON 000000                    ?_main 0001          __end_of___awdiv 1EAE  
        __end_of___ftadd 18A6          __end_of___awmod 2052          __end_of___ftneg 2400  
        __end_of___lldiv 1FD0          __end_of___ftmul 1BB8          ___awdiv@divisor 0009  
        __end_of___llmod 2140          __end_of___ftsub 2282          __end_of___fttol 1C9E  
                  _LATC0 007C58                    _LATC1 007C59          ___awdiv@counter 000B  
          __CFG_USBDIV$1 000000                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000             ___lltoft@exp 0011           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000            ___awtoft@sign 000C  
        __end_of_dpowers 0829                    _scale 10BE          __end_of_isdigit 2422  
          ___ftpack@sign 0005                    tablat 000FF5                    status 000FD8  
    __size_of_LCD_String 0054          __end_of_sprintf 10BE           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000           ?_LCD_String_xy 000A           __CFG_MCLRE$OFF 000000  
        __initialization 2436             __end_of_main 1E18                   ??_main 004D  
          ___fttol@sign1 0034            __activetblptr 000002     __size_of__tdiv_to_l_ 0110  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___llmod@dividend 0001                   ?_scale 0024                   _ADRESH 000FC4  
                 _ADRESL 000FC3         ___awdiv@dividend 0007         __end_of___awtoft 22FC  
       __end_of___ftpack 1D64         LCD_String_xy@msg 000B         LCD_String_xy@pos 000A  
       LCD_String_xy@row 000D         __end_of___lltoft 21A0                ??_MSdelay 0003  
                 _OSCCON 000FD3           __CFG_XINST$OFF 000000         __end_of__powers_ 0877  
                 ___ftge 1EAE                   ___wmul 2368                ??___awdiv 000B  
              ??___ftadd 0034           __CFG_STVREN$ON 000000                ??___awmod 0005  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 001B  
              ??___llmod 0009                ??___ftsub 0040                ??___fttol 002F  
        ADC_Read@channel 0001                   _fround 149E          ADC_Read@digital 0007  
       ___awdiv@quotient 000D          ___awmod@divisor 0003          ___awmod@counter 0005  
   __size_of_LCD_Command 0026                   _strcat 21F4    ___ftmul@f3_as_product 001F  
              ??_isdigit 0001                ?_ADC_Read 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ?_ADC_init 0001                ??_sprintf 0047                ?_LCD_Char 0001  
             __accesstop 0060  __end_of__initialization 243C          ??_LCD_String_xy 000D  
             ___ftadd@f1 002E               ___ftadd@f2 0031               ___ftge@ff1 0001  
             ___ftge@ff2 0004                ?_LCD_init 0001            ___rparam_used 000001  
             ___ftneg@f1 0001               ___awtoft@c 0009               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003A               ___ftsub@f2 003D  
             ___fttol@f1 002B           __pcstackCOMRAM 0001               ___lltoft@c 0009  
          __end_of_scale 149E             ??_LCD_String 000A               __div_to_l_ 19B6  
             ??_ADC_Read 0003               ??_ADC_init 0001          __div_to_l_@exp1 000C  
        __div_to_l_@cntr 000B                  ??_scale 0027          __div_to_l_@quot 0007  
             ??_LCD_Char 0007               ??_LCD_init 0008       __end_of_LCD_String 21F4  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004                  ?___ftge 0001  
                ?___wmul 000F                  ?_fround 0024                ?___awtoft 0009  
              ?___ftpack 0001                ?___lltoft 0009                  ?_strcat 0001  
                _MSdelay 2282          __CFG_VREGEN$OFF 000000            LCD_String@msg 0008  
      __end_of__npowers_ 0850                  __Hparam 0000                  __Lparam 0000  
        __size_of___ftge 0096                  ___awdiv 1E18                  ___ftadd 16E2  
                ___awmod 1FD0                  ___ftneg 23DC                  ___lldiv 1F44  
        __size_of___wmul 0028                  ___ftmul 1AC0                  ___llmod 20D0  
                ___ftsub 223E                  ___fttol 1BB8               _fround$752 002A  
             _fround$753 0027             __psmallconst 0800                  __pcinit 2436  
             ??___awtoft 000C               ??___ftpack 0006          __size_of_fround 0244  
                __ramtop 0800               ??___lltoft 000D                  __ptext0 1D64  
                __ptext1 21F4                  __ptext2 088E                  __ptext3 10BE  
                __ptext4 2400                  __ptext5 149E                  __ptext6 2368  
                __ptext7 1AC0                  __ptext8 1FD0                  __ptext9 1E18  
        __size_of_strcat 004A              ?__div_to_l_ 0001                  _dpowers 0801  
                _isdigit 2400         ___awmod@dividend 0001                  _sprintf 088E  
                _voltage 0059     end_of_initialization 243C           LCD_Command@cmd 0007  
          __Lmediumconst 0000          ___lldiv@divisor 0005          ___lldiv@counter 000D  
                postdec2 000FDD                  postinc2 000FDE           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004            ??__tdiv_to_l_ 0007        __size_of_ADC_Read 007E  
      __size_of_ADC_init 0014        __size_of_LCD_Char 0026      __size_of__div_to_l_ 010A  
      __size_of_LCD_init 0032              ___ftmul@exp 001E            ??_LCD_Command 0007  
         __end_of___ftge 1F44           __end_of___wmul 2390           __end_of_fround 16E2  
         __end_of_strcat 223E      start_initialization 2436      __end_of__tdiv_to_l_ 19B6  
        ___llmod@divisor 0005          ___llmod@counter 0009    __end_of_LCD_String_xy 2336  
               ??___ftge 0007                 ??___wmul 0013         __CFG_LPT1OSC$OFF 000000  
               ??_fround 0027            sprintf@tmpval 006D                 ??_strcat 0005  
             fround@prec 002D        __size_of___awtoft 003C        __size_of___ftpack 00C6  
    __end_of_LCD_Command 23DC        __size_of___lltoft 0060              __pbssCOMRAM 0059  
          __pcstackBANK0 0060                 ?_MSdelay 0001              sprintf@flag 0065  
            sprintf@fval 0073              sprintf@prec 0071                 ?___awdiv 0007  
               ?___ftadd 002E                 ?___awmod 0001                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 0015                 ?___llmod 0001  
               ?___ftsub 003A                __npowers_ 0829                 ?___fttol 002B  
            __tdiv_to_l_ 18A6             ??__div_to_l_ 0007              __smallconst 0800  
               ?_isdigit 0001                 _ADC_Read 2052                _scale$754 0027  
               _ADC_init 2422    LCD_String_xy@location 000E                 ?_sprintf 0040  
         __size_of_scale 03E0                 MSdelay@i 0003                 MSdelay@j 0005  
               _LCD_Char 2390           ___wmul@product 0013                 _LCD_init 2336  
     __end_of__div_to_l_ 1AC0         __CFG_WDTPS$32768 000000              _LCD_Command 23B6  
             _ADCON0bits 000FC2        ___wmul@multiplier 000F         __size_of_MSdelay 003E  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0096  
       __size_of___ftadd 01C4         __size_of___awmod 0082         __size_of___ftneg 0024  
       __size_of___lldiv 008C         __size_of___ftmul 00F8         __size_of___llmod 0070  
       __size_of___ftsub 0044         __size_of___fttol 00E6                 ___awtoft 22C0  
               ___ftpack 1C9E                 ___lltoft 2140              _isdigit$520 0002  
             sprintf@exp 006B               sprintf@val 0067               strcat@from 0003  
       __size_of_isdigit 0022                 __ptext10 18A6                 __ptext11 19B6  
               __ptext20 22C0                 __ptext12 2140                 __ptext21 1C9E  
               __ptext13 20D0                 __ptext22 2336                 __ptext14 1F44  
               __ptext23 22FC                 __ptext15 1BB8                 __ptext24 21A0  
               __ptext16 223E                 __ptext25 2390                 __ptext17 16E2  
               __ptext26 23B6                 __ptext18 23DC                 __ptext27 2282  
               __ptext19 1EAE                 __ptext28 2422                 __ptext29 2052  
               __powers_ 0850         __size_of_sprintf 0830            __size_of_main 00B4  
             MSdelay@val 0001                 main@data 004D               _LCD_String 21A0  
  __CFG_CPUDIV$OSC1_PLL2 000000                 isdigit@c 0003                 scale@scl 002A  
              sprintf@ap 0063         __tdiv_to_l_@exp1 000F                sprintf@sp 0040  
       __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
           ?__tdiv_to_l_ 0001      __CFG_FOSC$INTOSC_EC 000000                 sprintf@c 0076  
               sprintf@f 0042                 strcat@cp 0005                 strcat@to 0001  
       ___lldiv@quotient 0009   __size_of_LCD_String_xy 003A  
